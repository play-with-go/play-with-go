Terminals: [
  {
    "Name": "term1",
    "Description": "The main terminal",
    "Scenarios": {
      "go115": {
        "Image": "playwithgo/go1.15.3@sha256:f0a27c113697fa8201ae9cd7d80c3f87fc0514a855c8467251c89f8ae4a68043"
      }
    }
  }
]
Presteps: [
  {
    "Package": "github.com/play-with-go/gitea",
    "Path": "/newuser",
    "Args": {
      "Repos": [
        {
          "Pattern": "greetings",
          "Var": "GREETINGS"
        },
        {
          "Pattern": "hello",
          "Var": "HELLO"
        }
      ]
    },
    "Version": "{\n  \"Path\": \"github.com/play-with-go/gitea/cmd/gitea\",\n  \"Main\": {\n    \"Path\": \"github.com/play-with-go/gitea\",\n    \"Version\": \"v0.0.0-20201106060436-cd0e98fe53f4\",\n    \"Sum\": \"h1:gsIXEg+J3mOTHm32E8Kuqat+6YaB/2MnlwDvpYFD8Aw=\",\n    \"Replace\": null\n  },\n  \"Deps\": [\n    {\n      \"Path\": \"code.gitea.io/sdk/gitea\",\n      \"Version\": \"v0.13.1\",\n      \"Sum\": \"h1:Y7bpH2iO6Q0KhhMJfjP/LZ0AmiYITeRQlCD8b0oYqhk=\",\n      \"Replace\": null\n    },\n    {\n      \"Path\": \"cuelang.org/go\",\n      \"Version\": \"v0.3.0-alpha4\",\n      \"Sum\": \"h1:BIPutFX2WhHXwERWZka8PZBxcl6amdKO0Vry4n5qUEc=\",\n      \"Replace\": null\n    },\n    {\n      \"Path\": \"github.com/cockroachdb/apd/v2\",\n      \"Version\": \"v2.0.1\",\n      \"Sum\": \"h1:y1Rh3tEU89D+7Tgbw+lp52T6p/GJLpDmNvr10UWqLTE=\",\n      \"Replace\": null\n    },\n    {\n      \"Path\": \"github.com/emicklei/proto\",\n      \"Version\": \"v1.6.15\",\n      \"Sum\": \"h1:XbpwxmuOPrdES97FrSfpyy67SSCV/wBIKXqgJzh6hNw=\",\n      \"Replace\": null\n    },\n    {\n      \"Path\": \"github.com/hashicorp/go-version\",\n      \"Version\": \"v1.2.0\",\n      \"Sum\": \"h1:3vNe/fWF5CBgRIguda1meWhsZHy3m8gCJ5wx+dIzX/E=\",\n      \"Replace\": null\n    },\n    {\n      \"Path\": \"github.com/mpvl/unique\",\n      \"Version\": \"v0.0.0-20150818121801-cbe035fff7de\",\n      \"Sum\": \"h1:D5x39vF5KCwKQaw+OC9ZPiLVHXz3UFw2+psEX+gYcto=\",\n      \"Replace\": null\n    },\n    {\n      \"Path\": \"github.com/pkg/errors\",\n      \"Version\": \"v0.8.1\",\n      \"Sum\": \"h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=\",\n      \"Replace\": null\n    },\n    {\n      \"Path\": \"github.com/play-with-go/preguide\",\n      \"Version\": \"v0.0.2-0.20201106060430-853a563a2223\",\n      \"Sum\": \"h1:oZlEA1fw7nQSRJv5dHZK99ADt9IapwJg1t13EiBdED8=\",\n      \"Replace\": null\n    },\n    {\n      \"Path\": \"golang.org/x/net\",\n      \"Version\": \"v0.0.0-20200602114024-627f9648deb9\",\n      \"Sum\": \"h1:pNX+40auqi2JqRfOP1akLGtYcn15TUbkhwuCO3foqqM=\",\n      \"Replace\": null\n    },\n    {\n      \"Path\": \"golang.org/x/text\",\n      \"Version\": \"v0.3.2\",\n      \"Sum\": \"h1:tW2bmiBqwgJj/UpqtC8EpXEZVYOwU0yG4iWbprSVAcs=\",\n      \"Replace\": null\n    },\n    {\n      \"Path\": \"golang.org/x/xerrors\",\n      \"Version\": \"v0.0.0-20191204190536-9bdfabe68543\",\n      \"Sum\": \"h1:E7g+9GITq07hpfrRu66IVDexMakfv52eLZ2CXBWiKr4=\",\n      \"Replace\": null\n    },\n    {\n      \"Path\": \"gopkg.in/retry.v1\",\n      \"Version\": \"v1.0.3\",\n      \"Sum\": \"h1:a9CArYczAVv6Qs6VGoLMio99GEs7kY9UzSF9+LD+iGs=\",\n      \"Replace\": null\n    },\n    {\n      \"Path\": \"gopkg.in/yaml.v3\",\n      \"Version\": \"v3.0.0-20200121175148-a6ecf24a6d71\",\n      \"Sum\": \"h1:Xe2gvTZUJpsvOWUnvmL/tmhVBZUmHSvLbMjRj6NUUKo=\",\n      \"Replace\": null\n    }\n  ]\n}",
    "Variables": [
      "GITEA_USERNAME",
      "GITEA_PASSWORD",
      "GREETINGS",
      "HELLO"
    ]
  }
]
$ go version
go version go1.15.3 linux/amd64
$ pwd
/home/gopher
$ mkdir /home/gopher/greetings
$ cd /home/gopher/greetings
$ go mod init {{{.GREETINGS}}}
go: creating new go.mod: module {{{.GREETINGS}}}
$ cat go.mod
module {{{.GREETINGS}}}

go 1.15
$ cat <<EOD > /home/gopher/greetings/greetings.go
package greetings

import "fmt"

// Hello returns a greeting for the named person.
func Hello(name string) string {
	// Return a greeting that embeds the name in a message.
	message := fmt.Sprintf("Hi, %v. Welcome!", name)
	return message
}

EOD
$ cat <<EOD > /home/gopher/greetings/greetings.go
package greetings

import "fmt"

// Hello returns a greeting for the named person.
func Hello(name string) string {
	// Return a greeting that embeds the name in a message.
	var message string
	message = fmt.Sprintf("Hi, %v. Welcome!", name)
	return message
}

EOD
$ git init
Initialized empty Git repository in /home/gopher/greetings/.git/
$ git remote add origin https://{{{.GREETINGS}}}.git
$ git add greetings.go
$ git commit -q -m 'Initial commit'
$ git push -q origin main
remote: . Processing 1 references        
remote: Processed 1 references in total        
$ mkdir /home/gopher/hello
$ cd /home/gopher/hello
$ go mod init {{{.HELLO}}}
go: creating new go.mod: module {{{.HELLO}}}
$ go get {{{.GREETINGS}}}
go: downloading {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345
go: {{{.GREETINGS}}} upgrade => v0.0.0-20060102150405-abcedf12345
$ go list -m -f {{.Version}} {{{.GREETINGS}}}
v0.0.0-20060102150405-abcedf12345
$ cat <<EOD > /home/gopher/hello/hello.go
package main

import (
	"fmt"

	"{{{.GREETINGS}}}"
)

func main() {
	// Get a greeting message and print it.
	message := greetings.Hello("Gladys")
	fmt.Println(message)
}

EOD
$ go build
$ ./hello
Hi, Gladys. Welcome!
$ cd /home/gopher/greetings
$ cat <<EOD > /home/gopher/greetings/greetings.go
package greetings

import (
	"errors"
	"fmt"
)

// Hello returns a greeting for the named person.
func Hello(name string) (string, error) {
	// If no name was given, return an error with a message.
	if name == "" {
		return "", errors.New("empty name")
	}

	// If a name was received, return a value that embeds the name
	// in a greeting message.
	message := fmt.Sprintf("Hi, %v. Welcome!", name)
	return message, nil
}

EOD
$ git add greetings.go
$ git commit -q -m 'Added error handling'
$ greetings_error_commit=$(git rev-parse HEAD)
$ git rev-parse HEAD
v0.0.0-20060102150405-abcedf12345
$ git push -q origin main
remote: . Processing 1 references        
remote: Processed 1 references in total        
$ cd /home/gopher/hello
$ go get {{{.GREETINGS}}}@$greetings_error_commit
go: {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345 => v0.0.0-20060102150405-abcedf12345
go: downloading {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345
$ go list -m -f {{.Version}} {{{.GREETINGS}}}
v0.0.0-20060102150405-abcedf12345
$ cat <<EOD > /home/gopher/hello/hello.go
package main

import (
	"fmt"
	"log"

	"{{{.GREETINGS}}}"
)

func main() {
	// Set properties of the predefined Logger, including
	// the log entry prefix and a flag to disable printing
	// the time, source file, and line number.
	log.SetPrefix("greetings: ")
	log.SetFlags(0)

	// Request a greeting message.
	message, err := greetings.Hello("")
	// If an error was returned, print it to the console and
	// exit the program.
	if err != nil {
		log.Fatal(err)
	}

	// If no error was returned, print the returned message
	// to the console.
	fmt.Println(message)
}

EOD
$ go run hello.go
greetings: empty name
exit status 1
$ cd /home/gopher/greetings
$ cat <<EOD > /home/gopher/greetings/greetings.go
package greetings

import (
	"errors"
	"fmt"
	"math/rand"
)

// Hello returns a greeting for the named person.
func Hello(name string) (string, error) {
	// If no name was given, return an error with a message.
	if name == "" {
		return name, errors.New("empty name")
	}
	// Create a message using a random format.
	message := fmt.Sprintf(randomFormat(), name)
	return message, nil
}

// init sets initial values for variables used in the function.
func init() {
	// For truly random greetings, import "time" and replace the call
	// to rand.Seed with:
	//
	// rand.Seed(time.Now().UnixNano())
	//
	// Calling rand.Seed with a constant value means that we always
	// generate the same pseudo-random sequence.
	rand.Seed(1)
}

// randomFormat returns one of a set of greeting messages. The returned
// message is selected at random.
func randomFormat() string {
	// A slice of message formats.
	formats := []string{
		"Hi, %v. Welcome!",
		"Great to see you, %v!",
		"Hail, %v! Well met!",
	}

	// Return one of the message formats selected at random.
	return formats[rand.Intn(len(formats))]
}

EOD
$ git add greetings.go
$ git commit -q -m 'Added random format'
$ greetings_random_commit=$(git rev-parse HEAD)
$ git rev-parse HEAD
v0.0.0-20060102150405-abcedf12345
$ git push -q origin main
remote: . Processing 1 references        
remote: Processed 1 references in total        
$ cd /home/gopher/hello
$ go get {{{.GREETINGS}}}@$greetings_random_commit
go: {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345 => v0.0.0-20060102150405-abcedf12345
go: downloading {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345
$ go list -m -f {{.Version}} {{{.GREETINGS}}}
v0.0.0-20060102150405-abcedf12345
$ cat <<EOD > /home/gopher/hello/hello.go
package main

import (
	"fmt"
	"log"

	"{{{.GREETINGS}}}"
)

func main() {
	// Set properties of the predefined Logger, including
	// the log entry prefix and a flag to disable printing
	// the time, source file, and line number.
	log.SetPrefix("greetings: ")
	log.SetFlags(0)

	// Request a greeting message.
	message, err := greetings.Hello("Gladys")
	// If an error was returned, print it to the console and
	// exit the program.
	if err != nil {
		log.Fatal(err)
	}

	// If no error was returned, print the returned message
	// to the console.
	fmt.Println(message)
}

EOD
$ go run hello.go
Hail, Gladys! Well met!
$ go run hello.go
Hail, Gladys! Well met!
$ cd /home/gopher/greetings
$ cat <<EOD > /home/gopher/greetings/greetings.go
package greetings

import (
	"errors"
	"fmt"
	"math/rand"
)

// Hello returns a greeting for the named person.
func Hello(name string) (string, error) {
	// If no name was given, return an error with a message.
	if name == "" {
		return name, errors.New("empty name")
	}
	// Create a message using a random format.
	message := fmt.Sprintf(randomFormat(), name)
	return message, nil
}

// Hellos returns a map that associates each of the named people
// with a greeting message.
func Hellos(names []string) (map[string]string, error) {
	// A map to associate names with messages.
	messages := make(map[string]string)
	// Loop through the received slice of names, calling
	// the Hello function to get a message for each name.
	for _, name := range names {
		message, err := Hello(name)
		if err != nil {
			return nil, err
		}
		// In the map, associate the retrieved message with
		// the name.
		messages[name] = message
	}
	return messages, nil
}

// init sets initial values for variables used in the function.
func init() {
	// For truly random greetings, import "time" and replace the call
	// to rand.Seed with:
	//
	// rand.Seed(time.Now().UnixNano())
	//
	// Calling rand.Seed with a constant value means that we always
	// generate the same pseudo-random sequence.
	rand.Seed(1)
}

// randomFormat returns one of a set of greeting messages. The returned
// message is selected at random.
func randomFormat() string {
	// A slice of message formats.
	formats := []string{
		"Hi, %v. Welcome!",
		"Great to see you, %v!",
		"Hail, %v! Well met!",
	}

	// Return one of the message formats selected at random.
	return formats[rand.Intn(len(formats))]
}

EOD
$ cd /home/gopher/hello
$ go mod edit -replace {{{.GREETINGS}}}=/home/gopher/greetings
$ cat go.mod
module {{{.HELLO}}}

go 1.15

require {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345

replace {{{.GREETINGS}}} => /home/gopher/greetings
$ cat <<EOD > /home/gopher/hello/hello.go
package main

import (
	"fmt"
	"log"

	"{{{.GREETINGS}}}"
)

func main() {
	// Set properties of the predefined Logger, including
	// the log entry prefix and a flag to disable printing
	// the time, source file, and line number.
	log.SetPrefix("greetings: ")
	log.SetFlags(0)

	// A slice of names.
	names := []string{"Gladys", "Samantha", "Darrin"}

	// Request greeting messages for the names.
	messages, err := greetings.Hellos(names)
	if err != nil {
		log.Fatal(err)
	}
	// If no error was returned, print the returned map of
	// messages to the console.
	fmt.Println(messages)
}

EOD
$ go run hello.go
map[Darrin:Hail, Darrin! Well met! Gladys:Hail, Gladys! Well met! Samantha:Hi, Samantha. Welcome!]
$ cd /home/gopher/greetings
$ cat <<EOD > /home/gopher/greetings/greetings_test.go
package greetings

import (
	"regexp"
	"testing"
)

// TestHelloName calls greetings.Hello with a name, checking
// for a valid return value.
func TestHelloName(t *testing.T) {
	name := "Gladys"
	want := regexp.MustCompile(`\b` + name + `\b`)
	msg, err := Hello(name)
	if !want.MatchString(msg) || err != nil {
		t.Fatalf(`Hello("Gladys") = %q, %v, want match for %#q, <nil>`, msg, err, want)
	}
}

// TestHelloEmpty calls greetings.Hello with an empty string,
// checking for an error.
func TestHelloEmpty(t *testing.T) {
	msg, err := Hello("")
	if msg != "" || err == nil {
		t.Fatalf(`Hello("") = %q, %v, want "", error`, msg, err)
	}
}

EOD
$ go test
PASS
ok  	{{{.GREETINGS}}}	0.042s
$ go test -v
=== RUN   TestHelloName
--- PASS: TestHelloName (0.042s)
=== RUN   TestHelloEmpty
--- PASS: TestHelloEmpty (0.042s)
PASS
ok  	{{{.GREETINGS}}}	0.042s
$ cat <<EOD > /home/gopher/greetings/greetings.go
package greetings

import (
	"errors"
	"fmt"
	"math/rand"
)

// Hello returns a greeting for the named person.
func Hello(name string) (string, error) {
	// If no name was given, return an error with a message.
	if name == "" {
		return name, errors.New("empty name")
	}
	// Create a message using a random format.
	// message := fmt.Sprintf(randomFormat(), name)
	message := fmt.Sprint(randomFormat())
	return message, nil
}

// Hellos returns a map that associates each of the named people
// with a greeting message.
func Hellos(names []string) (map[string]string, error) {
	// A map to associate names with messages.
	messages := make(map[string]string)
	// Loop through the received slice of names, calling
	// the Hello function to get a message for each name.
	for _, name := range names {
		message, err := Hello(name)
		if err != nil {
			return nil, err
		}
		// In the map, associate the retrieved message with
		// the name.
		messages[name] = message
	}
	return messages, nil
}

// init sets initial values for variables used in the function.
func init() {
	// For truly random greetings, import "time" and replace the call
	// to rand.Seed with:
	//
	// rand.Seed(time.Now().UnixNano())
	//
	// Calling rand.Seed with a constant value means that we always
	// generate the same pseudo-random sequence.
	rand.Seed(1)
}

// randomFormat returns one of a set of greeting messages. The returned
// message is selected at random.
func randomFormat() string {
	// A slice of message formats.
	formats := []string{
		"Hi, %v. Welcome!",
		"Great to see you, %v!",
		"Hail, %v! Well met!",
	}

	// Return one of the message formats selected at random.
	return formats[rand.Intn(len(formats))]
}

EOD
$ go test
--- FAIL: TestHelloName (0.042s)
    greetings_test.go:15: Hello("Gladys") = "Hail, %v! Well met!", <nil>, want match for `\bGladys\b`, <nil>
FAIL
exit status 1
FAIL	{{{.GREETINGS}}}	0.042s
$ cat <<EOD > /home/gopher/greetings/greetings.go
package greetings

import (
	"errors"
	"fmt"
	"math/rand"
)

// Hello returns a greeting for the named person.
func Hello(name string) (string, error) {
	// If no name was given, return an error with a message.
	if name == "" {
		return name, errors.New("empty name")
	}
	// Create a message using a random format.
	message := fmt.Sprintf(randomFormat(), name)
	return message, nil
}

// Hellos returns a map that associates each of the named people
// with a greeting message.
func Hellos(names []string) (map[string]string, error) {
	// A map to associate names with messages.
	messages := make(map[string]string)
	// Loop through the received slice of names, calling
	// the Hello function to get a message for each name.
	for _, name := range names {
		message, err := Hello(name)
		if err != nil {
			return nil, err
		}
		// In the map, associate the retrieved message with
		// the name.
		messages[name] = message
	}
	return messages, nil
}

// init sets initial values for variables used in the function.
func init() {
	// For truly random greetings, import "time" and replace the call
	// to rand.Seed with:
	//
	// rand.Seed(time.Now().UnixNano())
	//
	// Calling rand.Seed with a constant value means that we always
	// generate the same pseudo-random sequence.
	rand.Seed(1)
}

// randomFormat returns one of a set of greeting messages. The returned
// message is selected at random.
func randomFormat() string {
	// A slice of message formats.
	formats := []string{
		"Hi, %v. Welcome!",
		"Great to see you, %v!",
		"Hail, %v! Well met!",
	}

	// Return one of the message formats selected at random.
	return formats[rand.Intn(len(formats))]
}

EOD
$ go test
PASS
ok  	{{{.GREETINGS}}}	0.042s
$ cd /home/gopher/hello
$ go list -f '{{.Target}}'
/home/gopher/go/bin/hello
$ goinstalldir="$(dirname "$(go list -f '{{.Target}}')")"
$ export PATH="$goinstalldir:$PATH"
$ go install
$ hello
map[Darrin:Hail, Darrin! Well met! Gladys:Hail, Gladys! Well met! Samantha:Hi, Samantha. Welcome!]
