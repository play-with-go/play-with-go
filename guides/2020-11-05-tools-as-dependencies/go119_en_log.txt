$ go version
go version go1.19.1 linux/amd64
$ mkdir painkiller
$ cd painkiller
$ go mod init painkiller
go: creating new go.mod: module painkiller
$ cat <<EOD > /home/gopher/painkiller/painkiller.go
package main

import "fmt"

type Pill int

const (
	Placebo Pill = iota
	Ibuprofen
)

func main() {
	fmt.Printf("For headaches, take %v\n", Ibuprofen)
}

EOD
$ go run .
For headaches, take 1
$ cat <<EOD > /home/gopher/painkiller/painkiller.go
package main

import "fmt"

type Pill int

func (p Pill) String() string {
	switch p {
	case Placebo:
		return "Placebo"
	case Ibuprofen:
		return "Ibuprofen"
	default:
		panic(fmt.Errorf("unknown Pill value %v", p))
	}
}

const (
	Placebo Pill = iota
	Ibuprofen
)

func main() {
	fmt.Printf("For headaches, take %v\n", Ibuprofen)
}

EOD
$ go run .
For headaches, take Ibuprofen
$ cat <<EOD > /home/gopher/painkiller/painkiller.go
package main

import "fmt"

type Pill int

const (
	Placebo Pill = iota
	Ibuprofen
)

func main() {
	fmt.Printf("For headaches, take %v\n", Ibuprofen)
}

EOD
$ cat <<EOD > /home/gopher/painkiller/tools.go
// +build tools

package tools

import (
	_ "golang.org/x/tools/cmd/stringer"
)

EOD
$ go get golang.org/x/tools/cmd/stringer@v0.1.13-0.20220917004541-4d18923f060e
go: downloading golang.org/x/tools v0.1.13-0.20220917004541-4d18923f060e
go: downloading golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f
go: downloading golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4
go: added golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4
go: added golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f
go: added golang.org/x/tools v0.1.13-0.20220917004541-4d18923f060e
$ cat go.mod
module painkiller

go 1.19

require (
	golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4 // indirect
	golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f // indirect
	golang.org/x/tools v0.1.13-0.20220917004541-4d18923f060e // indirect
)
$ go mod tidy
$ go run golang.org/x/tools/cmd/stringer -help
Usage of stringer:
	stringer [flags] -type T [directory]
	stringer [flags] -type T files... # Must be a single package
For more information, see:
	https://pkg.go.dev/golang.org/x/tools/cmd/stringer
Flags:
  -linecomment
    	use line comment text as printed text when present
  -output string
    	output file name; default srcdir/<type>_string.go
  -tags string
    	comma-separated list of build tags to apply
  -trimprefix prefix
    	trim the prefix from the generated constant names
  -type string
    	comma-separated list of type names; must be set
$ go run golang.org/x/tools/cmd/stringer -type Pill
$ ls
go.mod	go.sum	painkiller.go  pill_string.go  tools.go
$ cat pill_string.go
// Code generated by "stringer -type Pill"; DO NOT EDIT.

package main

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Placebo-0]
	_ = x[Ibuprofen-1]
}

const _Pill_name = "PlaceboIbuprofen"

var _Pill_index = [...]uint8{0, 7, 16}

func (i Pill) String() string {
	if i < 0 || i >= Pill(len(_Pill_index)-1) {
		return "Pill(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Pill_name[_Pill_index[i]:_Pill_index[i+1]]
}
$ go run .
For headaches, take Ibuprofen
$ cat <<EOD > /home/gopher/painkiller/painkiller.go
package main

import "fmt"

//go:generate go run golang.org/x/tools/cmd/stringer -type=Pill

type Pill int

const (
	Placebo Pill = iota
	Ibuprofen
)

func main() {
	fmt.Printf("For headaches, take %v\n", Ibuprofen)
}

EOD
$ go generate .
$ cat <<EOD > /home/gopher/painkiller/painkiller.go
package main

import "fmt"

//go:generate go run golang.org/x/tools/cmd/stringer -type=Pill

type Pill int

const (
	Placebo Pill = iota
	Ibuprofen
	Paracetamol
)

func main() {
	fmt.Printf("For headaches, take %v\n", Ibuprofen)
	fmt.Printf("For a fever, take %v\n", Paracetamol)
}

EOD
$ go generate .
$ go run .
For headaches, take Ibuprofen
For a fever, take Paracetamol
