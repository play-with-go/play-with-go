---
layout: post
title:  "Tutorial: Get started with Go"
excerpt: "You've completed the Go tour, so what next? This guide gives a brief introduction to Go programming"
difficulty: Beginner
category: Start here
---

_This tutorial is based on the official ["Getting started"](https://golang.org/doc/tutorial/getting-started.html)
tutorial._

In this tutorial we present a brief introduction to Go programming. You will:

* Write some simple "Hello, world" code
* Use the `go` command to run your code
* Use the Go package discovery site to find packages you can use in your own code
* Call functions of an external module

### Prerequisites

You should already have completed:

* [The Go Tour](https://tour.golang.org/)
* [An introduction to play-with-go.dev guides](/intro-to-play-with-go-dev/)

This guide is running using:

<!--step: goversion-->

### Write some code

As with all play-with-go.dev guides, we start in our home directory:

<!--step: pwd_home-->

Create a hello directory for your first Go source code:

<!--step: mkdir_hello-->

Create the file `<!--ref: hello_go-->` in `<!--ref: hello_dir-->`:

<!--step: create_hello-->

This is your first `.go` file! In this code you:

* Declare a `main` package (a package is a way to group related code and concepts).
* Import the popular [`fmt`](https://golang.org/pkg/fmt/) package, which contains functions for formatting text,
  including printing to the console. This package is one of the [standard library](https://golang.org/pkg/) packages you
  got when you installed Go.
* Implement a `main` function to print a message to the console. A `main` function executes by default when you run code
  in the file.

Run your code to see the greeting:

<!--step: run_hello-->

### Call code in an external package

When you want your code to do something that might have been implemented by someone else, you can look for a package
that has the functionality you need.

Let's make your printed message a little more interesting by using a function from an another package.

1. Visit [pkg.go.dev](https://pkg.go.dev) and [search for a "quote" package](https://pkg.go.dev/search?q=quote).
1. Locate and click the `<!--ref: quote-->` package in search results (if you see `<!--ref: quote-->/v3`, ignore it for now).
1. On the **Doc** tab, under **Index**, note the list of functions you can call from your code. You will use the `Go`
   function.
1. At the top of this page, note that package quote is included in the `<!--ref: quote-->` module
1. On the **Versions** tab, note the list of available versions of the `<!--ref: quote-->` module.

Packages are published in modules -- like `<!--ref: quote-->` -- where others can use them. Modules are improved with new
versions over time, and you can upgrade your code to use the improved versions. You can use
[pkg.go.dev](https://pkg.go.dev) to discover published modules whose packages have functions you can use in your own
code.

_Modules can contain multiple packackages. In the case of the the `<!--ref: quote-->` module, it contains just one package:
`<!--ref: quote-->`._

Let's import the `<!--ref: quote-->` package and add a call to its `Go` function:

<!--step: update_hello-->

To import packages from another module, your code must belong to a module. Go modules are identified by a `go.mod` file
in a directory. A `go.mod` file lists the specific modules and versions providing those packages. That file stays with
your code, including in your source code repository. We refer to `<!--ref: hellomod-->` as the current development
module.

To create a module and its `go.mod` file, run the `<!--ref: cmdgo.modinit-->` command, giving it the name of the module your
code will be in (here, just use `<!--ref: hellomod-->`):

<!--step: gomodinit-->

Our `main` package now belongs to the `<!--ref: hellomod-->` module.

We need to declare a dependency on the `<!--ref: quote-->` module, specifically version `<!--ref: quotev-->`:

<!--step: gogetquote-->

[`go get`](https://golang.org/cmd/go/#hdr-Add_dependencies_to_current_module_and_install_them) resolves and adds
dependencies to the current development module, `<!--ref: hellomod-->` in our case.

Re-run your code to see the message generated by the function you're calling.

<!--step: run_hello_again-->

Notice that your code calls the Go function, printing a clever message about communication.

### Write more code

With this quick introduction, you learned some of the basics. To write some more code with another tutorial, take a look at [Create a Go module](/create-a-go-module).

