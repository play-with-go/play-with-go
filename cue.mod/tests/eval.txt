# Verify that a simple eval works as expect

# eval
cue eval ./...

# Compare vs golden files
cmp stdout $WORK/stdout.golden

-- stdout.golden --
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
// ---
"2018-10-19-go-fundamentals": {
    Delims: ["{{{", "}}}"]
    Presteps: [{
        Package: "github.com/play-with-go/gitea"
        Path:    "/newuser"
        Args: {
            Repos: [{
                Pattern: "greetings"
                Private: false
                Var:     "GREETINGS"
            }, {
                Pattern: "hello"
                Private: false
                Var:     "HELLO"
            }]
        }
    }]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }]
    Scenarios: [{
        Name:        "go115"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2019-10-15-get-started-with-go": {
    Delims: ["{{{", "}}}"]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }]
    Scenarios: [{
        Name:        "go115"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-08-13-installing-go": {
    Delims: ["{{{", "}}}"]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/installgo1.15.8@sha256:0e480b658f50b85b8eb40c426022d572709a93f6e0a7fe65475bea50ad172c5f"
            }
        }
    }]
    Scenarios: [{
        Name:        "go115"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-09-01-basic-go-modules-example": {
    Delims: ["{{{", "}}}"]
    Presteps: [{
        Package: "github.com/play-with-go/gitea"
        Path:    "/newuser"
        Args: {
            Repos: [{
                Pattern: "mod1"
                Private: false
                Var:     "REPO1"
            }]
        }
    }]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }]
    Scenarios: [{
        Name:        "go115"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-10-07-intro-to-play-with-go-dev": {
    Delims: ["{{{", "}}}"]
    Presteps: [{
        Package: "github.com/play-with-go/gitea"
        Path:    "/newuser"
        Args: {
            Repos: [{
                Pattern: "hello"
                Private: false
                Var:     "REPO1"
            }]
        }
    }]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }]
    Scenarios: [{
        Name:        "go115"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-11-05-tools-as-dependencies": {
    Delims: ["{{{", "}}}"]
    Presteps: [{
        Package: "github.com/play-with-go/gitea"
        Path:    "/newuser"
        Args: {
            Repos: [{
                Pattern: "painkiller"
                Private: false
                Var:     "PAINKILLER"
            }]
        }
    }]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }]
    Scenarios: [{
        Name:        "go115"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-11-08-retract-module-versions": {
    Delims: ["{{{", "}}}"]
    Presteps: [{
        Package: "github.com/play-with-go/gitea"
        Path:    "/newuser"
        Args: {
            Repos: [{
                Pattern: "proverb"
                Private: false
                Var:     "PROVERB"
            }]
        }
    }]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go116: {
                Image: "playwithgo/go1.16@sha256:3ae1950433998a2be8c8ce3b1cb6479e6541f1e32443447a24085cfe09e2c391"
            }
        }
    }]
    Scenarios: [{
        Name:        "go116"
        Description: "Go 1.16"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-11-09-installing-go-programs-directly": {
    Delims: ["{{{", "}}}"]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go116: {
                Image: "playwithgo/go1.16@sha256:3ae1950433998a2be8c8ce3b1cb6479e6541f1e32443447a24085cfe09e2c391"
            }
        }
    }]
    Scenarios: [{
        Name:        "go116"
        Description: "Go 1.16"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-11-09-using-staticcheck": {
    Delims: ["{{{", "}}}"]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }]
    Scenarios: [{
        Name:        "go115"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-11-12-working-with-private-modules": {
    Delims: ["{{{", "}}}"]
    Presteps: [{
        Package: "github.com/play-with-go/gitea"
        Path:    "/newuser"
        Args: {
            Repos: [{
                Pattern: "public"
                Private: false
                Var:     "PUBLIC"
            }, {
                Pattern: "private"
                Private: true
                Var:     "PRIVATE"
            }]
        }
    }]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }]
    Scenarios: [{
        Name:        "go115"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-11-19-major-version-repository-structure": {
    Delims: ["{{{", "}}}"]
    Presteps: [{
        Package: "github.com/play-with-go/gitea"
        Path:    "/newuser"
        Args: {
            Repos: [{
                Pattern: "branch"
                Private: false
                Var:     "BRANCH"
            }, {
                Pattern: "subdir"
                Private: false
                Var:     "SUBDIR"
            }]
        }
    }]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }]
    Scenarios: [{
        Name:        "go115"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2021-05-02-build-flags-backwards-compatibility": {
    Delims: ["{{{", "}}}"]
    Presteps: [{
        Package: "github.com/play-with-go/gitea"
        Path:    "/newuser"
        Args: {
            Repos: [{
                Pattern: "public"
                Private: false
                Var:     "PUBLIC"
            }]
        }
    }]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15_1.16@sha256:38ee32afdd785e5f1d9e63033ce5d64cbd098207ed6506669105db97c2dbe9a1"
            }
        }
    }]
    Scenarios: [{
        Name:        "go115"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2021-05-06-gosheffield-demo": {
    Delims: ["{{{", "}}}"]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }]
    Scenarios: [{
        Name:        "go115"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Var:     "GREETINGS"
            Pattern: "greetings"
            Private: false
        }, {
            Var:     "HELLO"
            Pattern: "hello"
            Private: false
        }]
    }
}]
Defs: {
    username:          "{{{.GITEA_USERNAME}}}"
    greetings:         "greetings"
    greetings_vcs:     "https://{{{.GREETINGS}}}.git"
    greetings_mod:     "{{{.GREETINGS}}}"
    greetings_dir:     "/home/gopher/greetings"
    greetings_go:      "greetings.go"
    greetings_test_go: "greetings_test.go"
    hello:             "hello"
    hello_vcs:         "https://{{{.HELLO}}}.git"
    hello_mod:         "{{{.HELLO}}}"
    hello_dir:         "/home/gopher/hello"
    hello_go:          "hello.go"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    greeting_log_prefix: "greetings: "
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go115: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }
}
Steps: {
    goversion: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go version"
        InformationOnly: false
        Terminal:        string
    }
    pwd_home: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "pwd"
        InformationOnly: false
        Terminal:        string
    }
    mkdir_greetings: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir /home/gopher/greetings
            cd /home/gopher/greetings
            """
        InformationOnly: false
        Terminal:        string
    }
    gomodinit_greetings: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go mod init {{{.GREETINGS}}}"
        InformationOnly: false
        Terminal:        string
    }
    cat_gomodgreetings: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "cat go.mod"
        InformationOnly: false
        Terminal:        string
    }
    create_greetingsgo: {
        Target:   "/home/gopher/greetings/greetings.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package greetings

            import "fmt"

            // Hello returns a greeting for the named person.
            func Hello(name string) string {
            \t// Return a greeting that embeds the name in a message.
            \tmessage := fmt.Sprintf("Hi, %v. Welcome!", name)
            \treturn message
            }

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    create_greetingsgo_long: {
        Target:   "/home/gopher/greetings/greetings.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package greetings

            import "fmt"

            // Hello returns a greeting for the named person.
            func Hello(name string) string {
            \t// Return a greeting that embeds the name in a message.
            \tvar message string
            \tmessage = fmt.Sprintf("Hi, %v. Welcome!", name)
            \treturn message
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import "fmt"

                // Hello returns a greeting for the named person.
                func Hello(name string) string {
                \t// Return a greeting that embeds the name in a message.
                \tmessage := fmt.Sprintf("Hi, %v. Welcome!", name)
                \treturn message
                }

                """
        }
        Terminal: string
    }
    greetings_gitinit: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git init -q
            git remote add origin https://{{{.GREETINGS}}}.git
            """
        InformationOnly: false
        Terminal:        string
    }
    greetings_gitadd: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git add go.mod greetings.go
            git commit -q -m 'Initial commit'
            """
        InformationOnly: false
        Terminal:        string
    }
    greetings_check_porcelain: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    greetings_gitpush: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "git push -q origin main"
        InformationOnly: false
        Terminal:        string
    }
    mkdir_hello: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir /home/gopher/hello
            cd /home/gopher/hello
            """
        InformationOnly: false
        Terminal:        string
    }
    gomodinit_hello: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go mod init {{{.HELLO}}}"
        InformationOnly: false
        Terminal:        string
    }
    goget_greetings: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go get {{{.GREETINGS}}}"
        InformationOnly: false
        Terminal:        string
    }
    golist_greetings: {
        Name:            string
        StepType:        1
        Source:          "go list -m -f {{.Version}} {{{.GREETINGS}}}"
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Terminal:        string
    }
    create_hellogo: {
        Target:   "/home/gopher/hello/hello.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t"fmt"

            \t"{{{.GREETINGS}}}"
            )

            func main() {
            \t// Get a greeting message and print it.
            \tmessage := greetings.Hello("Gladys")
            \tfmt.Println(message)
            }

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    buildrun_hello: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            go build
            ./hello
            """
        InformationOnly: false
        Terminal:        string
    }
    cd_greetings: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "cd /home/gopher/greetings"
        InformationOnly: false
        Terminal:        string
    }
    update_greetings_go: {
        Target:   "/home/gopher/greetings/greetings.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn "", errors.New("empty name")
            \t}

            \t// If a name was received, return a value that embeds the name
            \t// in a greeting message.
            \tmessage := fmt.Sprintf("Hi, %v. Welcome!", name)
            \treturn message, nil
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import "fmt"

                // Hello returns a greeting for the named person.
                func Hello(name string) string {
                \t// Return a greeting that embeds the name in a message.
                \tvar message string
                \tmessage = fmt.Sprintf("Hi, %v. Welcome!", name)
                \treturn message
                }

                """
        }
        Terminal: string
    }
    commit_greetings_error_handling: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git add greetings.go
            git commit -q -m 'Added error handling'
            """
        InformationOnly: false
        Terminal:        string
    }
    greetings_check_error_handling_porcelain: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    greetings_error_commit: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "greetings_error_commit=$(git rev-parse HEAD)"
        InformationOnly: false
        Terminal:        string
    }
    echo_greetings_error_commit: {
        Name:            string
        StepType:        1
        Source:          "git rev-parse HEAD"
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Terminal:        string
    }
    republish_greetings: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "git push -q origin main"
        InformationOnly: false
        Terminal:        string
    }
    cd_hello: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "cd /home/gopher/hello"
        InformationOnly: false
        Terminal:        string
    }
    get_latest_greetings: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go get {{{.GREETINGS}}}@$greetings_error_commit"
        InformationOnly: false
        Terminal:        string
    }
    golist_latest_greetings: {
        Name:            string
        StepType:        1
        Source:          "go list -m -f {{.Version}} {{{.GREETINGS}}}"
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Terminal:        string
    }
    update_hello_go_error: {
        Target:   "/home/gopher/hello/hello.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t"fmt"
            \t"log"

            \t"{{{.GREETINGS}}}"
            )

            func main() {
            \t// Set properties of the predefined Logger, including
            \t// the log entry prefix and a flag to disable printing
            \t// the time, source file, and line number.
            \tlog.SetPrefix("greetings: ")
            \tlog.SetFlags(0)

            \t// Request a greeting message.
            \tmessage, err := greetings.Hello("")
            \t// If an error was returned, print it to the console and
            \t// exit the program.
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}

            \t// If no error was returned, print the returned message
            \t// to the console.
            \tfmt.Println(message)
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import (
                \t"fmt"

                \t"{{{.GREETINGS}}}"
                )

                func main() {
                \t// Get a greeting message and print it.
                \tmessage := greetings.Hello("Gladys")
                \tfmt.Println(message)
                }

                """
        }
        Terminal: string
    }
    run_hello_error: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "! go run hello.go"
        InformationOnly: false
        Terminal:        string
    }
    cd_greetings_random: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "cd /home/gopher/greetings"
        InformationOnly: false
        Terminal:        string
    }
    update_greetings_go_random: {
        Target:   "/home/gopher/greetings/greetings.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            \t"math/rand"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn name, errors.New("empty name")
            \t}
            \t// Create a message using a random format.
            \tmessage := fmt.Sprintf(randomFormat(), name)
            \treturn message, nil
            }

            // init sets initial values for variables used in the function.
            func init() {
            \t// For truly random greetings, import "time" and replace the call
            \t// to rand.Seed with:
            \t//
            \t// rand.Seed(time.Now().UnixNano())
            \t//
            \t// Calling rand.Seed with a constant value means that we always
            \t// generate the same pseudo-random sequence.
            \trand.Seed(1)
            }

            // randomFormat returns one of a set of greeting messages. The returned
            // message is selected at random.
            func randomFormat() string {
            \t// A slice of message formats.
            \tformats := []string{
            \t\t"Hi, %v. Welcome!",
            \t\t"Great to see you, %v!",
            \t\t"Hail, %v! Well met!",
            \t}

            \t// Return one of the message formats selected at random.
            \treturn formats[rand.Intn(len(formats))]
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import "fmt"

                // Hello returns a greeting for the named person.
                func Hello(name string) string {
                \t// Return a greeting that embeds the name in a message.
                \tmessage := fmt.Sprintf("Hi, %v. Welcome!", name)
                \treturn message
                }

                """
        }
        Terminal: string
    }
    greeings_commit_random: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git add greetings.go
            git commit -q -m 'Added random format'
            """
        InformationOnly: false
        Terminal:        string
    }
    greetings_check_random_porcelain: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    greetings_random_commit: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "greetings_random_commit=$(git rev-parse HEAD)"
        InformationOnly: false
        Terminal:        string
    }
    greetings_echo_random_commit: {
        Name:            string
        StepType:        1
        Source:          "git rev-parse HEAD"
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Terminal:        string
    }
    greetings_publish_random: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "git push -q origin main"
        InformationOnly: false
        Terminal:        string
    }
    hello_use_random: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            cd /home/gopher/hello
            go get {{{.GREETINGS}}}@$greetings_random_commit
            """
        InformationOnly: false
        Terminal:        string
    }
    hello_golist_random_greetings: {
        Name:            string
        StepType:        1
        Source:          "go list -m -f {{.Version}} {{{.GREETINGS}}}"
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Terminal:        string
    }
    hello_go_readd_gladys: {
        Target:   "/home/gopher/hello/hello.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t"fmt"
            \t"log"

            \t"{{{.GREETINGS}}}"
            )

            func main() {
            \t// Set properties of the predefined Logger, including
            \t// the log entry prefix and a flag to disable printing
            \t// the time, source file, and line number.
            \tlog.SetPrefix("greetings: ")
            \tlog.SetFlags(0)

            \t// Request a greeting message.
            \tmessage, err := greetings.Hello("Gladys")
            \t// If an error was returned, print it to the console and
            \t// exit the program.
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}

            \t// If no error was returned, print the returned message
            \t// to the console.
            \tfmt.Println(message)
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import (
                \t"fmt"
                \t"log"

                \t"{{{.GREETINGS}}}"
                )

                func main() {
                \t// Set properties of the predefined Logger, including
                \t// the log entry prefix and a flag to disable printing
                \t// the time, source file, and line number.
                \tlog.SetPrefix("greetings: ")
                \tlog.SetFlags(0)

                \t// Request a greeting message.
                \tmessage, err := greetings.Hello("")
                \t// If an error was returned, print it to the console and
                \t// exit the program.
                \tif err != nil {
                \t\tlog.Fatal(err)
                \t}

                \t// If no error was returned, print the returned message
                \t// to the console.
                \tfmt.Println(message)
                }

                """
        }
        Terminal: string
    }
    hello_run_random: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            go run hello.go
            go run hello.go
            """
        InformationOnly: false
        Terminal:        string
    }
    greetings_start_multiple: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "cd /home/gopher/greetings"
        InformationOnly: false
        Terminal:        string
    }
    greetings_go_multiple_people: {
        Target:   "/home/gopher/greetings/greetings.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            \t"math/rand"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn name, errors.New("empty name")
            \t}
            \t// Create a message using a random format.
            \tmessage := fmt.Sprintf(randomFormat(), name)
            \treturn message, nil
            }

            // Hellos returns a map that associates each of the named people
            // with a greeting message.
            func Hellos(names []string) (map[string]string, error) {
            \t// A map to associate names with messages.
            \tmessages := make(map[string]string)
            \t// Loop through the received slice of names, calling
            \t// the Hello function to get a message for each name.
            \tfor _, name := range names {
            \t\tmessage, err := Hello(name)
            \t\tif err != nil {
            \t\t\treturn nil, err
            \t\t}
            \t\t// In the map, associate the retrieved message with
            \t\t// the name.
            \t\tmessages[name] = message
            \t}
            \treturn messages, nil
            }

            // init sets initial values for variables used in the function.
            func init() {
            \t// For truly random greetings, import "time" and replace the call
            \t// to rand.Seed with:
            \t//
            \t// rand.Seed(time.Now().UnixNano())
            \t//
            \t// Calling rand.Seed with a constant value means that we always
            \t// generate the same pseudo-random sequence.
            \trand.Seed(1)
            }

            // randomFormat returns one of a set of greeting messages. The returned
            // message is selected at random.
            func randomFormat() string {
            \t// A slice of message formats.
            \tformats := []string{
            \t\t"Hi, %v. Welcome!",
            \t\t"Great to see you, %v!",
            \t\t"Hail, %v! Well met!",
            \t}

            \t// Return one of the message formats selected at random.
            \treturn formats[rand.Intn(len(formats))]
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import (
                \t"errors"
                \t"fmt"
                \t"math/rand"
                )

                // Hello returns a greeting for the named person.
                func Hello(name string) (string, error) {
                \t// If no name was given, return an error with a message.
                \tif name == "" {
                \t\treturn name, errors.New("empty name")
                \t}
                \t// Create a message using a random format.
                \tmessage := fmt.Sprintf(randomFormat(), name)
                \treturn message, nil
                }

                // init sets initial values for variables used in the function.
                func init() {
                \t// For truly random greetings, import "time" and replace the call
                \t// to rand.Seed with:
                \t//
                \t// rand.Seed(time.Now().UnixNano())
                \t//
                \t// Calling rand.Seed with a constant value means that we always
                \t// generate the same pseudo-random sequence.
                \trand.Seed(1)
                }

                // randomFormat returns one of a set of greeting messages. The returned
                // message is selected at random.
                func randomFormat() string {
                \t// A slice of message formats.
                \tformats := []string{
                \t\t"Hi, %v. Welcome!",
                \t\t"Great to see you, %v!",
                \t\t"Hail, %v! Well met!",
                \t}

                \t// Return one of the message formats selected at random.
                \treturn formats[rand.Intn(len(formats))]
                }

                """
        }
        Terminal: string
    }
    hello_use_multiple: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "cd /home/gopher/hello"
        InformationOnly: false
        Terminal:        string
    }
    hello_replace_greetings: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go mod edit -replace {{{.GREETINGS}}}=/home/gopher/greetings"
        InformationOnly: false
        Terminal:        string
    }
    hello_cat_go_mod_replace: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "cat go.mod"
        InformationOnly: false
        Terminal:        string
    }
    hello_go_call_multiple: {
        Target:   "/home/gopher/hello/hello.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t"fmt"
            \t"log"

            \t"{{{.GREETINGS}}}"
            )

            func main() {
            \t// Set properties of the predefined Logger, including
            \t// the log entry prefix and a flag to disable printing
            \t// the time, source file, and line number.
            \tlog.SetPrefix("greetings: ")
            \tlog.SetFlags(0)

            \t// A slice of names.
            \tnames := []string{"Gladys", "Samantha", "Darrin"}

            \t// Request greeting messages for the names.
            \tmessages, err := greetings.Hellos(names)
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}
            \t// If no error was returned, print the returned map of
            \t// messages to the console.
            \tfmt.Println(messages)
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import (
                \t"fmt"
                \t"log"

                \t"{{{.GREETINGS}}}"
                )

                func main() {
                \t// Set properties of the predefined Logger, including
                \t// the log entry prefix and a flag to disable printing
                \t// the time, source file, and line number.
                \tlog.SetPrefix("greetings: ")
                \tlog.SetFlags(0)

                \t// Request a greeting message.
                \tmessage, err := greetings.Hello("Gladys")
                \t// If an error was returned, print it to the console and
                \t// exit the program.
                \tif err != nil {
                \t\tlog.Fatal(err)
                \t}

                \t// If no error was returned, print the returned message
                \t// to the console.
                \tfmt.Println(message)
                }

                """
        }
        Terminal: string
    }
    hello_run_multiple: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go run hello.go"
        InformationOnly: false
        Terminal:        string
    }
    greetings_return_to_write_test: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "cd /home/gopher/greetings"
        InformationOnly: false
        Terminal:        string
    }
    greetings_create_greetings_test_go: {
        Target:   "/home/gopher/greetings/greetings_test.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package greetings

            import (
            \t"regexp"
            \t"testing"
            )

            // TestHelloName calls greetings.Hello with a name, checking
            // for a valid return value.
            func TestHelloName(t *testing.T) {
            \tname := "Gladys"
            \twant := regexp.MustCompile(`\\b` + name + `\\b`)
            \tmsg, err := Hello(name)
            \tif !want.MatchString(msg) || err != nil {
            \t\tt.Fatalf(`Hello("Gladys") = %q, %v, want match for %#q, <nil>`, msg, err, want)
            \t}
            }

            // TestHelloEmpty calls greetings.Hello with an empty string,
            // checking for an error.
            func TestHelloEmpty(t *testing.T) {
            \tmsg, err := Hello("")
            \tif msg != "" || err == nil {
            \t\tt.Fatalf(`Hello("") = %q, %v, want "", error`, msg, err)
            \t}
            }

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    greetings_run_tests: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            go test
            go test -v
            """
        InformationOnly: false
        Terminal:        string
    }
    greetings_go_break: {
        Target:   "/home/gopher/greetings/greetings.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            \t"math/rand"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn name, errors.New("empty name")
            \t}
            \t// Create a message using a random format.
            \t// message := fmt.Sprintf(randomFormat(), name)
            \tmessage := fmt.Sprint(randomFormat())
            \treturn message, nil
            }

            // Hellos returns a map that associates each of the named people
            // with a greeting message.
            func Hellos(names []string) (map[string]string, error) {
            \t// A map to associate names with messages.
            \tmessages := make(map[string]string)
            \t// Loop through the received slice of names, calling
            \t// the Hello function to get a message for each name.
            \tfor _, name := range names {
            \t\tmessage, err := Hello(name)
            \t\tif err != nil {
            \t\t\treturn nil, err
            \t\t}
            \t\t// In the map, associate the retrieved message with
            \t\t// the name.
            \t\tmessages[name] = message
            \t}
            \treturn messages, nil
            }

            // init sets initial values for variables used in the function.
            func init() {
            \t// For truly random greetings, import "time" and replace the call
            \t// to rand.Seed with:
            \t//
            \t// rand.Seed(time.Now().UnixNano())
            \t//
            \t// Calling rand.Seed with a constant value means that we always
            \t// generate the same pseudo-random sequence.
            \trand.Seed(1)
            }

            // randomFormat returns one of a set of greeting messages. The returned
            // message is selected at random.
            func randomFormat() string {
            \t// A slice of message formats.
            \tformats := []string{
            \t\t"Hi, %v. Welcome!",
            \t\t"Great to see you, %v!",
            \t\t"Hail, %v! Well met!",
            \t}

            \t// Return one of the message formats selected at random.
            \treturn formats[rand.Intn(len(formats))]
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import (
                \t"errors"
                \t"fmt"
                \t"math/rand"
                )

                // Hello returns a greeting for the named person.
                func Hello(name string) (string, error) {
                \t// If no name was given, return an error with a message.
                \tif name == "" {
                \t\treturn name, errors.New("empty name")
                \t}
                \t// Create a message using a random format.
                \tmessage := fmt.Sprintf(randomFormat(), name)
                \treturn message, nil
                }

                // Hellos returns a map that associates each of the named people
                // with a greeting message.
                func Hellos(names []string) (map[string]string, error) {
                \t// A map to associate names with messages.
                \tmessages := make(map[string]string)
                \t// Loop through the received slice of names, calling
                \t// the Hello function to get a message for each name.
                \tfor _, name := range names {
                \t\tmessage, err := Hello(name)
                \t\tif err != nil {
                \t\t\treturn nil, err
                \t\t}
                \t\t// In the map, associate the retrieved message with
                \t\t// the name.
                \t\tmessages[name] = message
                \t}
                \treturn messages, nil
                }

                // init sets initial values for variables used in the function.
                func init() {
                \t// For truly random greetings, import "time" and replace the call
                \t// to rand.Seed with:
                \t//
                \t// rand.Seed(time.Now().UnixNano())
                \t//
                \t// Calling rand.Seed with a constant value means that we always
                \t// generate the same pseudo-random sequence.
                \trand.Seed(1)
                }

                // randomFormat returns one of a set of greeting messages. The returned
                // message is selected at random.
                func randomFormat() string {
                \t// A slice of message formats.
                \tformats := []string{
                \t\t"Hi, %v. Welcome!",
                \t\t"Great to see you, %v!",
                \t\t"Hail, %v! Well met!",
                \t}

                \t// Return one of the message formats selected at random.
                \treturn formats[rand.Intn(len(formats))]
                }

                """
        }
        Terminal: string
    }
    greetings_run_tests_fail: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "! go test"
        InformationOnly: false
        Terminal:        string
    }
    greetings_go_restore: {
        Target:   "/home/gopher/greetings/greetings.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            \t"math/rand"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn name, errors.New("empty name")
            \t}
            \t// Create a message using a random format.
            \tmessage := fmt.Sprintf(randomFormat(), name)
            \treturn message, nil
            }

            // Hellos returns a map that associates each of the named people
            // with a greeting message.
            func Hellos(names []string) (map[string]string, error) {
            \t// A map to associate names with messages.
            \tmessages := make(map[string]string)
            \t// Loop through the received slice of names, calling
            \t// the Hello function to get a message for each name.
            \tfor _, name := range names {
            \t\tmessage, err := Hello(name)
            \t\tif err != nil {
            \t\t\treturn nil, err
            \t\t}
            \t\t// In the map, associate the retrieved message with
            \t\t// the name.
            \t\tmessages[name] = message
            \t}
            \treturn messages, nil
            }

            // init sets initial values for variables used in the function.
            func init() {
            \t// For truly random greetings, import "time" and replace the call
            \t// to rand.Seed with:
            \t//
            \t// rand.Seed(time.Now().UnixNano())
            \t//
            \t// Calling rand.Seed with a constant value means that we always
            \t// generate the same pseudo-random sequence.
            \trand.Seed(1)
            }

            // randomFormat returns one of a set of greeting messages. The returned
            // message is selected at random.
            func randomFormat() string {
            \t// A slice of message formats.
            \tformats := []string{
            \t\t"Hi, %v. Welcome!",
            \t\t"Great to see you, %v!",
            \t\t"Hail, %v! Well met!",
            \t}

            \t// Return one of the message formats selected at random.
            \treturn formats[rand.Intn(len(formats))]
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import (
                \t"errors"
                \t"fmt"
                \t"math/rand"
                )

                // Hello returns a greeting for the named person.
                func Hello(name string) (string, error) {
                \t// If no name was given, return an error with a message.
                \tif name == "" {
                \t\treturn name, errors.New("empty name")
                \t}
                \t// Create a message using a random format.
                \t// message := fmt.Sprintf(randomFormat(), name)
                \tmessage := fmt.Sprint(randomFormat())
                \treturn message, nil
                }

                // Hellos returns a map that associates each of the named people
                // with a greeting message.
                func Hellos(names []string) (map[string]string, error) {
                \t// A map to associate names with messages.
                \tmessages := make(map[string]string)
                \t// Loop through the received slice of names, calling
                \t// the Hello function to get a message for each name.
                \tfor _, name := range names {
                \t\tmessage, err := Hello(name)
                \t\tif err != nil {
                \t\t\treturn nil, err
                \t\t}
                \t\t// In the map, associate the retrieved message with
                \t\t// the name.
                \t\tmessages[name] = message
                \t}
                \treturn messages, nil
                }

                // init sets initial values for variables used in the function.
                func init() {
                \t// For truly random greetings, import "time" and replace the call
                \t// to rand.Seed with:
                \t//
                \t// rand.Seed(time.Now().UnixNano())
                \t//
                \t// Calling rand.Seed with a constant value means that we always
                \t// generate the same pseudo-random sequence.
                \trand.Seed(1)
                }

                // randomFormat returns one of a set of greeting messages. The returned
                // message is selected at random.
                func randomFormat() string {
                \t// A slice of message formats.
                \tformats := []string{
                \t\t"Hi, %v. Welcome!",
                \t\t"Great to see you, %v!",
                \t\t"Hail, %v! Well met!",
                \t}

                \t// Return one of the message formats selected at random.
                \treturn formats[rand.Intn(len(formats))]
                }

                """
        }
        Terminal: string
    }
    greetings_check_tests_pass: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go test"
        InformationOnly: false
        Terminal:        string
    }
    hello_cd_for_install: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "cd /home/gopher/hello"
        InformationOnly: false
        Terminal:        string
    }
    hello_go_list_target: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go list -f '{{.Target}}'"
        InformationOnly: false
        Terminal:        string
    }
    hello_add_gopath_bin_path: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            goinstalldir="$(dirname "$(go list -f '{{.Target}}')")"
            export PATH="$goinstalldir:$PATH"
            """
        InformationOnly: false
        Terminal:        string
    }
    hello_go_install: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go install"
        InformationOnly: false
        Terminal:        string
    }
    hello_run_by_name: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "hello"
        InformationOnly: false
        Terminal:        string
    }
}
// ---
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Pattern: "greetings"
            Private: false
            Var:     "GREETINGS"
        }, {
            Pattern: "hello"
            Private: false
            Var:     "HELLO"
        }]
    }
    Version: """
        {
          "Path": "github.com/play-with-go/gitea/cmd/gitea",
          "Main": {
            "Path": "github.com/play-with-go/gitea",
            "Version": "v0.0.0-20210430163339-b27dc21b6036",
            "Sum": "h1:7wJ+VvtJk2GU9XtFGDeVwO6ohT8l5nu5h9A6YDCec+U=",
            "Replace": null
          },
          "Deps": [
            {
              "Path": "code.gitea.io/sdk/gitea",
              "Version": "v0.13.1",
              "Sum": "h1:Y7bpH2iO6Q0KhhMJfjP/LZ0AmiYITeRQlCD8b0oYqhk=",
              "Replace": null
            },
            {
              "Path": "cuelang.org/go",
              "Version": "v0.3.2",
              "Sum": "h1:/Am5yFDwqnaEi+g942OPM1M4/qtfVSm49wtkQbeh5Z4=",
              "Replace": null
            },
            {
              "Path": "github.com/cockroachdb/apd/v2",
              "Version": "v2.0.1",
              "Sum": "h1:y1Rh3tEU89D+7Tgbw+lp52T6p/GJLpDmNvr10UWqLTE=",
              "Replace": null
            },
            {
              "Path": "github.com/emicklei/proto",
              "Version": "v1.6.15",
              "Sum": "h1:XbpwxmuOPrdES97FrSfpyy67SSCV/wBIKXqgJzh6hNw=",
              "Replace": null
            },
            {
              "Path": "github.com/hashicorp/go-version",
              "Version": "v1.2.0",
              "Sum": "h1:3vNe/fWF5CBgRIguda1meWhsZHy3m8gCJ5wx+dIzX/E=",
              "Replace": null
            },
            {
              "Path": "github.com/mpvl/unique",
              "Version": "v0.0.0-20150818121801-cbe035fff7de",
              "Sum": "h1:D5x39vF5KCwKQaw+OC9ZPiLVHXz3UFw2+psEX+gYcto=",
              "Replace": null
            },
            {
              "Path": "github.com/pkg/errors",
              "Version": "v0.8.1",
              "Sum": "h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=",
              "Replace": null
            },
            {
              "Path": "github.com/play-with-go/preguide",
              "Version": "v0.0.2-0.20210430163307-e5ab271ba2e9",
              "Sum": "h1:dpSLI117TKb8MdLknsUYbQjKJpP6jzBYpfKKVszCZNI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/crypto",
              "Version": "v0.0.0-20200622213623-75b288015ac9",
              "Sum": "h1:psW17arqaxU48Z5kZ0CQnkZWQJsqcURM6tKiBApRjXI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/net",
              "Version": "v0.0.0-20201021035429-f5854403a974",
              "Sum": "h1:IX6qOQeG5uLjB/hjjwjedwfjND0hgjPMMyO1RoIXQNI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/text",
              "Version": "v0.3.3",
              "Sum": "h1:cokOdA+Jmi5PJGXLlLllQSgYigAEfHXJAERHVMaCc2k=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/xerrors",
              "Version": "v0.0.0-20200804184101-5ec99f83aff1",
              "Sum": "h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/retry.v1",
              "Version": "v1.0.3",
              "Sum": "h1:a9CArYczAVv6Qs6VGoLMio99GEs7kY9UzSF9+LD+iGs=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/yaml.v3",
              "Version": "v3.0.0-20200121175148-a6ecf24a6d71",
              "Sum": "h1:Xe2gvTZUJpsvOWUnvmL/tmhVBZUmHSvLbMjRj6NUUKo=",
              "Replace": null
            }
          ]
        }
        """
    Variables: ["GITEA_USERNAME", "GITEA_PRIV_KEY", "GITEA_PUB_KEY", "GITEA_KEYSCAN", "GREETINGS", "HELLO"]
}]
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go115: {
            Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
        }
    }
}]
Scenarios: [{
    Name:        "go115"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
FilenameComment: false
Steps: {
    goversion: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "goversion"
        Order:           0
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go version"
            ExitCode: 0
            Output: """
                go version go1.15.8 linux/amd64

                """
            ComparisonOutput: """
                go version go1.15.8 linux/amd64

                """
        }]
    }
    pwd_home: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "pwd_home"
        Order:           1
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "pwd"
            ExitCode: 0
            Output: """
                /home/gopher

                """
            ComparisonOutput: """
                /home/gopher

                """
        }]
    }
    mkdir_greetings: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "mkdir_greetings"
        Order:           2
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir /home/gopher/greetings"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd /home/gopher/greetings"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    gomodinit_greetings: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gomodinit_greetings"
        Order:           3
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go mod init {{{.GREETINGS}}}"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module {{{.GREETINGS}}}

                """
            ComparisonOutput: """
                go: creating new go.mod: module {{{.GREETINGS}}}

                """
        }]
    }
    cat_gomodgreetings: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "cat_gomodgreetings"
        Order:           4
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "cat go.mod"
            ExitCode: 0
            Output: """
                module {{{.GREETINGS}}}

                go 1.15

                """
            ComparisonOutput: """
                module {{{.GREETINGS}}}

                go 1.15

                """
        }]
    }
    create_greetingsgo: {
        StepType: 2
        Name:     "create_greetingsgo"
        Order:    5
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package greetings

            import "fmt"

            // Hello returns a greeting for the named person.
            func Hello(name string) string {
            \t// Return a greeting that embeds the name in a message.
            \tmessage := fmt.Sprintf("Hi, %v. Welcome!", name)
            \treturn message
            }

            """
        Target: "/home/gopher/greetings/greetings.go"
    }
    create_greetingsgo_long: {
        StepType: 2
        Name:     "create_greetingsgo_long"
        Order:    6
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import "fmt"

                // Hello returns a greeting for the named person.
                func Hello(name string) string {
                \t// Return a greeting that embeds the name in a message.
                \tmessage := fmt.Sprintf("Hi, %v. Welcome!", name)
                \treturn message
                }

                """
        }
        Source: """
            package greetings

            import "fmt"

            // Hello returns a greeting for the named person.
            func Hello(name string) string {
            \t// Return a greeting that embeds the name in a message.
            \tvar message string
            \tmessage = fmt.Sprintf("Hi, %v. Welcome!", name)
            \treturn message
            }

            """
        Target: "/home/gopher/greetings/greetings.go"
    }
    greetings_gitinit: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "greetings_gitinit"
        Order:           7
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git init -q"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git remote add origin https://{{{.GREETINGS}}}.git"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    greetings_gitadd: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "greetings_gitadd"
        Order:           8
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git add go.mod greetings.go"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m 'Initial commit'"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    greetings_check_porcelain: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "greetings_check_porcelain"
        Order:           9
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    greetings_gitpush: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "greetings_gitpush"
        Order:           10
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    mkdir_hello: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "mkdir_hello"
        Order:           11
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir /home/gopher/hello"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd /home/gopher/hello"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    gomodinit_hello: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gomodinit_hello"
        Order:           12
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go mod init {{{.HELLO}}}"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module {{{.HELLO}}}

                """
            ComparisonOutput: """
                go: creating new go.mod: module {{{.HELLO}}}

                """
        }]
    }
    goget_greetings: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "goget_greetings"
        Order:           13
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go get {{{.GREETINGS}}}"
            ExitCode: 0
            Output: """
                go: downloading {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345
                go: {{{.GREETINGS}}} upgrade => v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """

                go: downloading {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345
                go: {{{.GREETINGS}}} upgrade => v0.0.0-20060102150405-abcedf12345
                """
        }]
    }
    golist_greetings: {
        StepType:        1
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Name:            "golist_greetings"
        Order:           14
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go list -m -f {{.Version}} {{{.GREETINGS}}}"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """
                v0.0.0-20060102150405-abcedf12345

                """
        }]
    }
    create_hellogo: {
        StepType: 2
        Name:     "create_hellogo"
        Order:    15
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import (
            \t"fmt"

            \t"{{{.GREETINGS}}}"
            )

            func main() {
            \t// Get a greeting message and print it.
            \tmessage := greetings.Hello("Gladys")
            \tfmt.Println(message)
            }

            """
        Target: "/home/gopher/hello/hello.go"
    }
    buildrun_hello: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "buildrun_hello"
        Order:           16
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "go build"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "./hello"
            ExitCode: 0
            Output: """
                Hi, Gladys. Welcome!

                """
            ComparisonOutput: """
                Hi, Gladys. Welcome!

                """
        }]
    }
    cd_greetings: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "cd_greetings"
        Order:           17
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/greetings"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    update_greetings_go: {
        StepType: 2
        Name:     "update_greetings_go"
        Order:    18
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import "fmt"

                // Hello returns a greeting for the named person.
                func Hello(name string) string {
                \t// Return a greeting that embeds the name in a message.
                \tvar message string
                \tmessage = fmt.Sprintf("Hi, %v. Welcome!", name)
                \treturn message
                }

                """
        }
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn "", errors.New("empty name")
            \t}

            \t// If a name was received, return a value that embeds the name
            \t// in a greeting message.
            \tmessage := fmt.Sprintf("Hi, %v. Welcome!", name)
            \treturn message, nil
            }

            """
        Target: "/home/gopher/greetings/greetings.go"
    }
    commit_greetings_error_handling: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "commit_greetings_error_handling"
        Order:           19
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git add greetings.go"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m 'Added error handling'"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    greetings_check_error_handling_porcelain: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "greetings_check_error_handling_porcelain"
        Order:           20
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    greetings_error_commit: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "greetings_error_commit"
        Order:           21
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "greetings_error_commit=$(git rev-parse HEAD)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    echo_greetings_error_commit: {
        StepType:        1
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Name:            "echo_greetings_error_commit"
        Order:           22
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "git rev-parse HEAD"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """
                v0.0.0-20060102150405-abcedf12345

                """
        }]
    }
    republish_greetings: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "republish_greetings"
        Order:           23
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    cd_hello: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "cd_hello"
        Order:           24
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/hello"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    get_latest_greetings: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "get_latest_greetings"
        Order:           25
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go get {{{.GREETINGS}}}@$greetings_error_commit"
            ExitCode: 0
            Output: """
                go: {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345 => v0.0.0-20060102150405-abcedf12345
                go: downloading {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """

                go: downloading {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345
                go: {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345 => v0.0.0-20060102150405-abcedf12345
                """
        }]
    }
    golist_latest_greetings: {
        StepType:        1
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Name:            "golist_latest_greetings"
        Order:           26
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go list -m -f {{.Version}} {{{.GREETINGS}}}"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """
                v0.0.0-20060102150405-abcedf12345

                """
        }]
    }
    update_hello_go_error: {
        StepType: 2
        Name:     "update_hello_go_error"
        Order:    27
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import (
                \t"fmt"

                \t"{{{.GREETINGS}}}"
                )

                func main() {
                \t// Get a greeting message and print it.
                \tmessage := greetings.Hello("Gladys")
                \tfmt.Println(message)
                }

                """
        }
        Source: """
            package main

            import (
            \t"fmt"
            \t"log"

            \t"{{{.GREETINGS}}}"
            )

            func main() {
            \t// Set properties of the predefined Logger, including
            \t// the log entry prefix and a flag to disable printing
            \t// the time, source file, and line number.
            \tlog.SetPrefix("greetings: ")
            \tlog.SetFlags(0)

            \t// Request a greeting message.
            \tmessage, err := greetings.Hello("")
            \t// If an error was returned, print it to the console and
            \t// exit the program.
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}

            \t// If no error was returned, print the returned message
            \t// to the console.
            \tfmt.Println(message)
            }

            """
        Target: "/home/gopher/hello/hello.go"
    }
    run_hello_error: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "run_hello_error"
        Order:           28
        Terminal:        "term1"
        Stmts: [{
            Negated:  true
            CmdStr:   "go run hello.go"
            ExitCode: 1
            Output: """
                greetings: empty name
                exit status 1

                """
            ComparisonOutput: """
                greetings: empty name
                exit status 1

                """
        }]
    }
    cd_greetings_random: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "cd_greetings_random"
        Order:           29
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/greetings"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    update_greetings_go_random: {
        StepType: 2
        Name:     "update_greetings_go_random"
        Order:    30
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import "fmt"

                // Hello returns a greeting for the named person.
                func Hello(name string) string {
                \t// Return a greeting that embeds the name in a message.
                \tmessage := fmt.Sprintf("Hi, %v. Welcome!", name)
                \treturn message
                }

                """
        }
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            \t"math/rand"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn name, errors.New("empty name")
            \t}
            \t// Create a message using a random format.
            \tmessage := fmt.Sprintf(randomFormat(), name)
            \treturn message, nil
            }

            // init sets initial values for variables used in the function.
            func init() {
            \t// For truly random greetings, import "time" and replace the call
            \t// to rand.Seed with:
            \t//
            \t// rand.Seed(time.Now().UnixNano())
            \t//
            \t// Calling rand.Seed with a constant value means that we always
            \t// generate the same pseudo-random sequence.
            \trand.Seed(1)
            }

            // randomFormat returns one of a set of greeting messages. The returned
            // message is selected at random.
            func randomFormat() string {
            \t// A slice of message formats.
            \tformats := []string{
            \t\t"Hi, %v. Welcome!",
            \t\t"Great to see you, %v!",
            \t\t"Hail, %v! Well met!",
            \t}

            \t// Return one of the message formats selected at random.
            \treturn formats[rand.Intn(len(formats))]
            }

            """
        Target: "/home/gopher/greetings/greetings.go"
    }
    greeings_commit_random: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "greeings_commit_random"
        Order:           31
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git add greetings.go"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m 'Added random format'"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    greetings_check_random_porcelain: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "greetings_check_random_porcelain"
        Order:           32
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    greetings_random_commit: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "greetings_random_commit"
        Order:           33
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "greetings_random_commit=$(git rev-parse HEAD)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    greetings_echo_random_commit: {
        StepType:        1
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Name:            "greetings_echo_random_commit"
        Order:           34
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "git rev-parse HEAD"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """
                v0.0.0-20060102150405-abcedf12345

                """
        }]
    }
    greetings_publish_random: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "greetings_publish_random"
        Order:           35
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    hello_use_random: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "hello_use_random"
        Order:           36
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/hello"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "go get {{{.GREETINGS}}}@$greetings_random_commit"
            ExitCode: 0
            Output: """
                go: {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345 => v0.0.0-20060102150405-abcedf12345
                go: downloading {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """

                go: downloading {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345
                go: {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345 => v0.0.0-20060102150405-abcedf12345
                """
        }]
    }
    hello_golist_random_greetings: {
        StepType:        1
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Name:            "hello_golist_random_greetings"
        Order:           37
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go list -m -f {{.Version}} {{{.GREETINGS}}}"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """
                v0.0.0-20060102150405-abcedf12345

                """
        }]
    }
    hello_go_readd_gladys: {
        StepType: 2
        Name:     "hello_go_readd_gladys"
        Order:    38
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import (
                \t"fmt"
                \t"log"

                \t"{{{.GREETINGS}}}"
                )

                func main() {
                \t// Set properties of the predefined Logger, including
                \t// the log entry prefix and a flag to disable printing
                \t// the time, source file, and line number.
                \tlog.SetPrefix("greetings: ")
                \tlog.SetFlags(0)

                \t// Request a greeting message.
                \tmessage, err := greetings.Hello("")
                \t// If an error was returned, print it to the console and
                \t// exit the program.
                \tif err != nil {
                \t\tlog.Fatal(err)
                \t}

                \t// If no error was returned, print the returned message
                \t// to the console.
                \tfmt.Println(message)
                }

                """
        }
        Source: """
            package main

            import (
            \t"fmt"
            \t"log"

            \t"{{{.GREETINGS}}}"
            )

            func main() {
            \t// Set properties of the predefined Logger, including
            \t// the log entry prefix and a flag to disable printing
            \t// the time, source file, and line number.
            \tlog.SetPrefix("greetings: ")
            \tlog.SetFlags(0)

            \t// Request a greeting message.
            \tmessage, err := greetings.Hello("Gladys")
            \t// If an error was returned, print it to the console and
            \t// exit the program.
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}

            \t// If no error was returned, print the returned message
            \t// to the console.
            \tfmt.Println(message)
            }

            """
        Target: "/home/gopher/hello/hello.go"
    }
    hello_run_random: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "hello_run_random"
        Order:           39
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go run hello.go"
            ExitCode: 0
            Output: """
                Hail, Gladys! Well met!

                """
            ComparisonOutput: """
                Hail, Gladys! Well met!

                """
        }, {
            Negated:  false
            CmdStr:   "go run hello.go"
            ExitCode: 0
            Output: """
                Hail, Gladys! Well met!

                """
            ComparisonOutput: """
                Hail, Gladys! Well met!

                """
        }]
    }
    greetings_start_multiple: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "greetings_start_multiple"
        Order:           40
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/greetings"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    greetings_go_multiple_people: {
        StepType: 2
        Name:     "greetings_go_multiple_people"
        Order:    41
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import (
                \t"errors"
                \t"fmt"
                \t"math/rand"
                )

                // Hello returns a greeting for the named person.
                func Hello(name string) (string, error) {
                \t// If no name was given, return an error with a message.
                \tif name == "" {
                \t\treturn name, errors.New("empty name")
                \t}
                \t// Create a message using a random format.
                \tmessage := fmt.Sprintf(randomFormat(), name)
                \treturn message, nil
                }

                // init sets initial values for variables used in the function.
                func init() {
                \t// For truly random greetings, import "time" and replace the call
                \t// to rand.Seed with:
                \t//
                \t// rand.Seed(time.Now().UnixNano())
                \t//
                \t// Calling rand.Seed with a constant value means that we always
                \t// generate the same pseudo-random sequence.
                \trand.Seed(1)
                }

                // randomFormat returns one of a set of greeting messages. The returned
                // message is selected at random.
                func randomFormat() string {
                \t// A slice of message formats.
                \tformats := []string{
                \t\t"Hi, %v. Welcome!",
                \t\t"Great to see you, %v!",
                \t\t"Hail, %v! Well met!",
                \t}

                \t// Return one of the message formats selected at random.
                \treturn formats[rand.Intn(len(formats))]
                }

                """
        }
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            \t"math/rand"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn name, errors.New("empty name")
            \t}
            \t// Create a message using a random format.
            \tmessage := fmt.Sprintf(randomFormat(), name)
            \treturn message, nil
            }

            // Hellos returns a map that associates each of the named people
            // with a greeting message.
            func Hellos(names []string) (map[string]string, error) {
            \t// A map to associate names with messages.
            \tmessages := make(map[string]string)
            \t// Loop through the received slice of names, calling
            \t// the Hello function to get a message for each name.
            \tfor _, name := range names {
            \t\tmessage, err := Hello(name)
            \t\tif err != nil {
            \t\t\treturn nil, err
            \t\t}
            \t\t// In the map, associate the retrieved message with
            \t\t// the name.
            \t\tmessages[name] = message
            \t}
            \treturn messages, nil
            }

            // init sets initial values for variables used in the function.
            func init() {
            \t// For truly random greetings, import "time" and replace the call
            \t// to rand.Seed with:
            \t//
            \t// rand.Seed(time.Now().UnixNano())
            \t//
            \t// Calling rand.Seed with a constant value means that we always
            \t// generate the same pseudo-random sequence.
            \trand.Seed(1)
            }

            // randomFormat returns one of a set of greeting messages. The returned
            // message is selected at random.
            func randomFormat() string {
            \t// A slice of message formats.
            \tformats := []string{
            \t\t"Hi, %v. Welcome!",
            \t\t"Great to see you, %v!",
            \t\t"Hail, %v! Well met!",
            \t}

            \t// Return one of the message formats selected at random.
            \treturn formats[rand.Intn(len(formats))]
            }

            """
        Target: "/home/gopher/greetings/greetings.go"
    }
    hello_use_multiple: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "hello_use_multiple"
        Order:           42
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/hello"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    hello_replace_greetings: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "hello_replace_greetings"
        Order:           43
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "go mod edit -replace {{{.GREETINGS}}}=/home/gopher/greetings"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    hello_cat_go_mod_replace: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "hello_cat_go_mod_replace"
        Order:           44
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "cat go.mod"
            ExitCode: 0
            Output: """
                module {{{.HELLO}}}

                go 1.15

                require {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345

                replace {{{.GREETINGS}}} => /home/gopher/greetings

                """
            ComparisonOutput: """
                module {{{.HELLO}}}

                go 1.15

                require {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345

                replace {{{.GREETINGS}}} => /home/gopher/greetings

                """
        }]
    }
    hello_go_call_multiple: {
        StepType: 2
        Name:     "hello_go_call_multiple"
        Order:    45
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import (
                \t"fmt"
                \t"log"

                \t"{{{.GREETINGS}}}"
                )

                func main() {
                \t// Set properties of the predefined Logger, including
                \t// the log entry prefix and a flag to disable printing
                \t// the time, source file, and line number.
                \tlog.SetPrefix("greetings: ")
                \tlog.SetFlags(0)

                \t// Request a greeting message.
                \tmessage, err := greetings.Hello("Gladys")
                \t// If an error was returned, print it to the console and
                \t// exit the program.
                \tif err != nil {
                \t\tlog.Fatal(err)
                \t}

                \t// If no error was returned, print the returned message
                \t// to the console.
                \tfmt.Println(message)
                }

                """
        }
        Source: """
            package main

            import (
            \t"fmt"
            \t"log"

            \t"{{{.GREETINGS}}}"
            )

            func main() {
            \t// Set properties of the predefined Logger, including
            \t// the log entry prefix and a flag to disable printing
            \t// the time, source file, and line number.
            \tlog.SetPrefix("greetings: ")
            \tlog.SetFlags(0)

            \t// A slice of names.
            \tnames := []string{"Gladys", "Samantha", "Darrin"}

            \t// Request greeting messages for the names.
            \tmessages, err := greetings.Hellos(names)
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}
            \t// If no error was returned, print the returned map of
            \t// messages to the console.
            \tfmt.Println(messages)
            }

            """
        Target: "/home/gopher/hello/hello.go"
    }
    hello_run_multiple: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "hello_run_multiple"
        Order:           46
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go run hello.go"
            ExitCode: 0
            Output: """
                map[Darrin:Hail, Darrin! Well met! Gladys:Hail, Gladys! Well met! Samantha:Hi, Samantha. Welcome!]

                """
            ComparisonOutput: """
                map[Darrin:Hail, Darrin! Well met! Gladys:Hail, Gladys! Well met! Samantha:Hi, Samantha. Welcome!]

                """
        }]
    }
    greetings_return_to_write_test: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "greetings_return_to_write_test"
        Order:           47
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/greetings"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    greetings_create_greetings_test_go: {
        StepType: 2
        Name:     "greetings_create_greetings_test_go"
        Order:    48
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package greetings

            import (
            \t"regexp"
            \t"testing"
            )

            // TestHelloName calls greetings.Hello with a name, checking
            // for a valid return value.
            func TestHelloName(t *testing.T) {
            \tname := "Gladys"
            \twant := regexp.MustCompile(`\\b` + name + `\\b`)
            \tmsg, err := Hello(name)
            \tif !want.MatchString(msg) || err != nil {
            \t\tt.Fatalf(`Hello("Gladys") = %q, %v, want match for %#q, <nil>`, msg, err, want)
            \t}
            }

            // TestHelloEmpty calls greetings.Hello with an empty string,
            // checking for an error.
            func TestHelloEmpty(t *testing.T) {
            \tmsg, err := Hello("")
            \tif msg != "" || err == nil {
            \t\tt.Fatalf(`Hello("") = %q, %v, want "", error`, msg, err)
            \t}
            }

            """
        Target: "/home/gopher/greetings/greetings_test.go"
    }
    greetings_run_tests: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "greetings_run_tests"
        Order:           49
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go test"
            ExitCode: 0
            Output: """
                PASS
                ok  \t{{{.GREETINGS}}}\t0.002s

                """
            ComparisonOutput: """
                PASS
                ok  \t{{{.GREETINGS}}}\tN.NNs

                """
        }, {
            Negated:  false
            CmdStr:   "go test -v"
            ExitCode: 0
            Output: """
                === RUN   TestHelloName
                --- PASS: TestHelloName (0.00s)
                === RUN   TestHelloEmpty
                --- PASS: TestHelloEmpty (0.00s)
                PASS
                ok  \t{{{.GREETINGS}}}\t0.002s

                """
            ComparisonOutput: """
                === RUN   TestHelloName
                --- PASS: TestHelloName (N.NNs)
                === RUN   TestHelloEmpty
                --- PASS: TestHelloEmpty (N.NNs)
                PASS
                ok  \t{{{.GREETINGS}}}\tN.NNs

                """
        }]
    }
    greetings_go_break: {
        StepType: 2
        Name:     "greetings_go_break"
        Order:    50
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import (
                \t"errors"
                \t"fmt"
                \t"math/rand"
                )

                // Hello returns a greeting for the named person.
                func Hello(name string) (string, error) {
                \t// If no name was given, return an error with a message.
                \tif name == "" {
                \t\treturn name, errors.New("empty name")
                \t}
                \t// Create a message using a random format.
                \tmessage := fmt.Sprintf(randomFormat(), name)
                \treturn message, nil
                }

                // Hellos returns a map that associates each of the named people
                // with a greeting message.
                func Hellos(names []string) (map[string]string, error) {
                \t// A map to associate names with messages.
                \tmessages := make(map[string]string)
                \t// Loop through the received slice of names, calling
                \t// the Hello function to get a message for each name.
                \tfor _, name := range names {
                \t\tmessage, err := Hello(name)
                \t\tif err != nil {
                \t\t\treturn nil, err
                \t\t}
                \t\t// In the map, associate the retrieved message with
                \t\t// the name.
                \t\tmessages[name] = message
                \t}
                \treturn messages, nil
                }

                // init sets initial values for variables used in the function.
                func init() {
                \t// For truly random greetings, import "time" and replace the call
                \t// to rand.Seed with:
                \t//
                \t// rand.Seed(time.Now().UnixNano())
                \t//
                \t// Calling rand.Seed with a constant value means that we always
                \t// generate the same pseudo-random sequence.
                \trand.Seed(1)
                }

                // randomFormat returns one of a set of greeting messages. The returned
                // message is selected at random.
                func randomFormat() string {
                \t// A slice of message formats.
                \tformats := []string{
                \t\t"Hi, %v. Welcome!",
                \t\t"Great to see you, %v!",
                \t\t"Hail, %v! Well met!",
                \t}

                \t// Return one of the message formats selected at random.
                \treturn formats[rand.Intn(len(formats))]
                }

                """
        }
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            \t"math/rand"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn name, errors.New("empty name")
            \t}
            \t// Create a message using a random format.
            \t// message := fmt.Sprintf(randomFormat(), name)
            \tmessage := fmt.Sprint(randomFormat())
            \treturn message, nil
            }

            // Hellos returns a map that associates each of the named people
            // with a greeting message.
            func Hellos(names []string) (map[string]string, error) {
            \t// A map to associate names with messages.
            \tmessages := make(map[string]string)
            \t// Loop through the received slice of names, calling
            \t// the Hello function to get a message for each name.
            \tfor _, name := range names {
            \t\tmessage, err := Hello(name)
            \t\tif err != nil {
            \t\t\treturn nil, err
            \t\t}
            \t\t// In the map, associate the retrieved message with
            \t\t// the name.
            \t\tmessages[name] = message
            \t}
            \treturn messages, nil
            }

            // init sets initial values for variables used in the function.
            func init() {
            \t// For truly random greetings, import "time" and replace the call
            \t// to rand.Seed with:
            \t//
            \t// rand.Seed(time.Now().UnixNano())
            \t//
            \t// Calling rand.Seed with a constant value means that we always
            \t// generate the same pseudo-random sequence.
            \trand.Seed(1)
            }

            // randomFormat returns one of a set of greeting messages. The returned
            // message is selected at random.
            func randomFormat() string {
            \t// A slice of message formats.
            \tformats := []string{
            \t\t"Hi, %v. Welcome!",
            \t\t"Great to see you, %v!",
            \t\t"Hail, %v! Well met!",
            \t}

            \t// Return one of the message formats selected at random.
            \treturn formats[rand.Intn(len(formats))]
            }

            """
        Target: "/home/gopher/greetings/greetings.go"
    }
    greetings_run_tests_fail: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "greetings_run_tests_fail"
        Order:           51
        Terminal:        "term1"
        Stmts: [{
            Negated:  true
            CmdStr:   "go test"
            ExitCode: 1
            Output: """
                --- FAIL: TestHelloName (0.00s)
                    greetings_test.go:15: Hello("Gladys") = "Hail, %v! Well met!", <nil>, want match for `\\bGladys\\b`, <nil>
                FAIL
                exit status 1
                FAIL\t{{{.GREETINGS}}}\t0.002s

                """
            ComparisonOutput: """
                --- FAIL: TestHelloName (N.NNs)
                    greetings_test.go:15: Hello("Gladys") = "Hail, %v! Well met!", <nil>, want match for `\\bGladys\\b`, <nil>
                FAIL
                exit status 1
                FAIL\t{{{.GREETINGS}}}\tN.NNs

                """
        }]
    }
    greetings_go_restore: {
        StepType: 2
        Name:     "greetings_go_restore"
        Order:    52
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import (
                \t"errors"
                \t"fmt"
                \t"math/rand"
                )

                // Hello returns a greeting for the named person.
                func Hello(name string) (string, error) {
                \t// If no name was given, return an error with a message.
                \tif name == "" {
                \t\treturn name, errors.New("empty name")
                \t}
                \t// Create a message using a random format.
                \t// message := fmt.Sprintf(randomFormat(), name)
                \tmessage := fmt.Sprint(randomFormat())
                \treturn message, nil
                }

                // Hellos returns a map that associates each of the named people
                // with a greeting message.
                func Hellos(names []string) (map[string]string, error) {
                \t// A map to associate names with messages.
                \tmessages := make(map[string]string)
                \t// Loop through the received slice of names, calling
                \t// the Hello function to get a message for each name.
                \tfor _, name := range names {
                \t\tmessage, err := Hello(name)
                \t\tif err != nil {
                \t\t\treturn nil, err
                \t\t}
                \t\t// In the map, associate the retrieved message with
                \t\t// the name.
                \t\tmessages[name] = message
                \t}
                \treturn messages, nil
                }

                // init sets initial values for variables used in the function.
                func init() {
                \t// For truly random greetings, import "time" and replace the call
                \t// to rand.Seed with:
                \t//
                \t// rand.Seed(time.Now().UnixNano())
                \t//
                \t// Calling rand.Seed with a constant value means that we always
                \t// generate the same pseudo-random sequence.
                \trand.Seed(1)
                }

                // randomFormat returns one of a set of greeting messages. The returned
                // message is selected at random.
                func randomFormat() string {
                \t// A slice of message formats.
                \tformats := []string{
                \t\t"Hi, %v. Welcome!",
                \t\t"Great to see you, %v!",
                \t\t"Hail, %v! Well met!",
                \t}

                \t// Return one of the message formats selected at random.
                \treturn formats[rand.Intn(len(formats))]
                }

                """
        }
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            \t"math/rand"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn name, errors.New("empty name")
            \t}
            \t// Create a message using a random format.
            \tmessage := fmt.Sprintf(randomFormat(), name)
            \treturn message, nil
            }

            // Hellos returns a map that associates each of the named people
            // with a greeting message.
            func Hellos(names []string) (map[string]string, error) {
            \t// A map to associate names with messages.
            \tmessages := make(map[string]string)
            \t// Loop through the received slice of names, calling
            \t// the Hello function to get a message for each name.
            \tfor _, name := range names {
            \t\tmessage, err := Hello(name)
            \t\tif err != nil {
            \t\t\treturn nil, err
            \t\t}
            \t\t// In the map, associate the retrieved message with
            \t\t// the name.
            \t\tmessages[name] = message
            \t}
            \treturn messages, nil
            }

            // init sets initial values for variables used in the function.
            func init() {
            \t// For truly random greetings, import "time" and replace the call
            \t// to rand.Seed with:
            \t//
            \t// rand.Seed(time.Now().UnixNano())
            \t//
            \t// Calling rand.Seed with a constant value means that we always
            \t// generate the same pseudo-random sequence.
            \trand.Seed(1)
            }

            // randomFormat returns one of a set of greeting messages. The returned
            // message is selected at random.
            func randomFormat() string {
            \t// A slice of message formats.
            \tformats := []string{
            \t\t"Hi, %v. Welcome!",
            \t\t"Great to see you, %v!",
            \t\t"Hail, %v! Well met!",
            \t}

            \t// Return one of the message formats selected at random.
            \treturn formats[rand.Intn(len(formats))]
            }

            """
        Target: "/home/gopher/greetings/greetings.go"
    }
    greetings_check_tests_pass: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "greetings_check_tests_pass"
        Order:           53
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go test"
            ExitCode: 0
            Output: """
                PASS
                ok  \t{{{.GREETINGS}}}\t0.002s

                """
            ComparisonOutput: """
                PASS
                ok  \t{{{.GREETINGS}}}\tN.NNs

                """
        }]
    }
    hello_cd_for_install: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "hello_cd_for_install"
        Order:           54
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/hello"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    hello_go_list_target: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "hello_go_list_target"
        Order:           55
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go list -f '{{.Target}}'"
            ExitCode: 0
            Output: """
                /home/gopher/go/bin/hello

                """
            ComparisonOutput: """
                /home/gopher/go/bin/hello

                """
        }]
    }
    hello_add_gopath_bin_path: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "hello_add_gopath_bin_path"
        Order:           56
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "goinstalldir=\"$(dirname \"$(go list -f '{{.Target}}')\")\""
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "export PATH=\"$goinstalldir:$PATH\""
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    hello_go_install: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "hello_go_install"
        Order:           57
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "go install"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    hello_run_by_name: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "hello_run_by_name"
        Order:           58
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "hello"
            ExitCode: 0
            Output: """
                map[Darrin:Hail, Darrin! Well met! Gladys:Hail, Gladys! Well met! Samantha:Hi, Samantha. Welcome!]

                """
            ComparisonOutput: """
                map[Darrin:Hail, Darrin! Well met! Gladys:Hail, Gladys! Well met! Samantha:Hi, Samantha. Welcome!]

                """
        }]
    }
}
Hash: "f03b169fd33f353c3a304a089a25ca252eb60b22491fb186bf0ab26dcc8f5be2"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Defs: {
    quote:     "rsc.io/quote"
    quotev:    "v1.5.2"
    hello_dir: "/home/gopher/hello"
    hello_go:  "hello.go"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    hellomod: "hello"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go115: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }
}
Steps: {
    goversion: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go version"
        InformationOnly: false
        Terminal:        string
    }
    pwd_home: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "pwd"
        InformationOnly: false
        Terminal:        string
    }
    mkdir_hello: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir /home/gopher/hello
            cd /home/gopher/hello
            """
        InformationOnly: false
        Terminal:        string
    }
    create_hello: {
        Target:   "/home/gopher/hello/hello.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package main

            import "fmt"

            func main() {
            \tfmt.Println("Hello, World!")
            }

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    run_hello: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go run hello.go"
        InformationOnly: false
        Terminal:        string
    }
    update_hello: {
        Target:   "/home/gopher/hello/hello.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package main

            import "fmt"

            import "rsc.io/quote"

            func main() {
            \tfmt.Println(quote.Go())
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                func main() {
                \tfmt.Println("Hello, World!")
                }

                """
        }
        Terminal: string
    }
    gomodinit: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go mod init hello"
        InformationOnly: false
        Terminal:        string
    }
    gogetquote: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go get rsc.io/quote@v1.5.2"
        InformationOnly: false
        Terminal:        string
    }
    run_hello_again: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go run hello.go"
        InformationOnly: false
        Terminal:        string
    }
}
// ---
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go115: {
            Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
        }
    }
}]
Scenarios: [{
    Name:        "go115"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
FilenameComment: false
Steps: {
    goversion: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "goversion"
        Order:           0
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go version"
            ExitCode: 0
            Output: """
                go version go1.15.8 linux/amd64

                """
            ComparisonOutput: """
                go version go1.15.8 linux/amd64

                """
        }]
    }
    pwd_home: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "pwd_home"
        Order:           1
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "pwd"
            ExitCode: 0
            Output: """
                /home/gopher

                """
            ComparisonOutput: """
                /home/gopher

                """
        }]
    }
    mkdir_hello: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "mkdir_hello"
        Order:           2
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir /home/gopher/hello"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd /home/gopher/hello"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    create_hello: {
        StepType: 2
        Name:     "create_hello"
        Order:    3
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import "fmt"

            func main() {
            \tfmt.Println("Hello, World!")
            }

            """
        Target: "/home/gopher/hello/hello.go"
    }
    run_hello: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "run_hello"
        Order:           4
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go run hello.go"
            ExitCode: 0
            Output: """
                Hello, World!

                """
            ComparisonOutput: """
                Hello, World!

                """
        }]
    }
    update_hello: {
        StepType: 2
        Name:     "update_hello"
        Order:    5
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                func main() {
                \tfmt.Println("Hello, World!")
                }

                """
        }
        Source: """
            package main

            import "fmt"

            import "rsc.io/quote"

            func main() {
            \tfmt.Println(quote.Go())
            }

            """
        Target: "/home/gopher/hello/hello.go"
    }
    gomodinit: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gomodinit"
        Order:           6
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go mod init hello"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module hello

                """
            ComparisonOutput: """
                go: creating new go.mod: module hello

                """
        }]
    }
    gogetquote: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gogetquote"
        Order:           7
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go get rsc.io/quote@v1.5.2"
            ExitCode: 0
            Output: """
                go: downloading rsc.io/quote v1.5.2
                go: downloading rsc.io/sampler v1.3.0
                go: downloading golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c

                """
            ComparisonOutput: """

                go: downloading golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
                go: downloading rsc.io/quote v1.5.2
                go: downloading rsc.io/sampler v1.3.0
                """
        }]
    }
    run_hello_again: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "run_hello_again"
        Order:           8
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go run hello.go"
            ExitCode: 0
            Output: """
                Don't communicate by sharing memory, share memory by communicating.

                """
            ComparisonOutput: """
                Don't communicate by sharing memory, share memory by communicating.

                """
        }]
    }
}
Hash: "3db46577b49d5da4b393494f27f1cc918e686d72be4f70f0a521c67af6c745ab"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Defs: {
    go_help_env: "go help env"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go115: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/installgo1.15.8@sha256:0e480b658f50b85b8eb40c426022d572709a93f6e0a7fe65475bea50ad172c5f"
            }
        }
    }
}
Steps: {
    start_dir: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "pwd"
        InformationOnly: false
        Terminal:        string
    }
    download_go: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "wget -q  https://golang.org/dl/go1.15.8.linux-amd64.tar.gz"
        InformationOnly: false
        Terminal:        string
    }
    install_go: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "sudo tar -C /usr/local -xzf go1.15.8.linux-amd64.tar.gz"
        InformationOnly: false
        Terminal:        string
    }
    add_install_to_path: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "echo export PATH=\"/usr/local/go/bin:$PATH\" >> $HOME/.profile"
        InformationOnly: false
        Terminal:        string
    }
    source_profile: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "source $HOME/.profile"
        InformationOnly: false
        Terminal:        string
    }
    go_version: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go version"
        InformationOnly: false
        Terminal:        string
    }
    go_env: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go env"
        InformationOnly: false
        Terminal:        string
    }
    go_env_gobin: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go env GOBIN"
        InformationOnly: false
        Terminal:        string
    }
    go_env_set_gobin: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go env -w GOBIN=/path/to/my/gobin"
        InformationOnly: false
        Terminal:        string
    }
    go_env_check_gobin: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go env GOBIN"
        InformationOnly: false
        Terminal:        string
    }
    go_env_env: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go env GOENV"
        InformationOnly: false
        Terminal:        string
    }
    go_env_unset_gobin: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go env -w GOBIN="
        InformationOnly: false
        Terminal:        string
    }
    go_env_check_gobin_again: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go env GOBIN"
        InformationOnly: false
        Terminal:        string
    }
    go_help_env: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go help env"
        InformationOnly: true
        Terminal:        string
    }
    gobin_not_set: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go env GOBIN"
        InformationOnly: false
        Terminal:        string
    }
    add_gobin_bin_to_path: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "echo export PATH=\"$(go env GOPATH)/bin:$PATH\" >> $HOME/.profile"
        InformationOnly: false
        Terminal:        string
    }
    source_profile_again: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "source $HOME/.profile"
        InformationOnly: false
        Terminal:        string
    }
    echo_path: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "echo $PATH"
        InformationOnly: false
        Terminal:        string
    }
}
// ---
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go115: {
            Image: "playwithgo/installgo1.15.8@sha256:0e480b658f50b85b8eb40c426022d572709a93f6e0a7fe65475bea50ad172c5f"
        }
    }
}]
Scenarios: [{
    Name:        "go115"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
FilenameComment: false
Steps: {
    start_dir: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "start_dir"
        Order:           0
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "pwd"
            ExitCode: 0
            Output: """
                /home/gopher

                """
            ComparisonOutput: """
                /home/gopher

                """
        }]
    }
    download_go: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "download_go"
        Order:           1
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "wget -q https://golang.org/dl/go1.15.8.linux-amd64.tar.gz"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    install_go: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "install_go"
        Order:           2
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "sudo tar -C /usr/local -xzf go1.15.8.linux-amd64.tar.gz"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    add_install_to_path: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "add_install_to_path"
        Order:           3
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "echo export PATH=\"/usr/local/go/bin:$PATH\" >>$HOME/.profile"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    source_profile: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "source_profile"
        Order:           4
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "source $HOME/.profile"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    go_version: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go_version"
        Order:           5
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go version"
            ExitCode: 0
            Output: """
                go version go1.15.8 linux/amd64

                """
            ComparisonOutput: """
                go version go1.15.8 linux/amd64

                """
        }]
    }
    go_env: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go_env"
        Order:           6
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go env"
            ExitCode: 0
            Output: """
                GO111MODULE=""
                GOARCH="amd64"
                GOBIN=""
                GOCACHE="/home/gopher/.cache/go-build"
                GOENV="/home/gopher/.config/go/env"
                GOEXE=""
                GOFLAGS=""
                GOHOSTARCH="amd64"
                GOHOSTOS="linux"
                GOINSECURE=""
                GOMODCACHE="/home/gopher/go/pkg/mod"
                GONOPROXY=""
                GONOSUMDB=""
                GOOS="linux"
                GOPATH="/home/gopher/go"
                GOPRIVATE=""
                GOPROXY="https://proxy.golang.org,direct"
                GOROOT="/usr/local/go"
                GOSUMDB="sum.golang.org"
                GOTMPDIR=""
                GOTOOLDIR="/usr/local/go/pkg/tool/linux_amd64"
                GCCGO="gccgo"
                AR="ar"
                CC="gcc"
                CXX="g++"
                CGO_ENABLED="1"
                GOMOD=""
                CGO_CFLAGS="-g -O2"
                CGO_CPPFLAGS=""
                CGO_CXXFLAGS="-g -O2"
                CGO_FFLAGS="-g -O2"
                CGO_LDFLAGS="-g -O2"
                PKG_CONFIG="pkg-config"
                GOGCCFLAGS="-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build -gno-record-gcc-switches"

                """
            ComparisonOutput: """
                GO111MODULE=""
                GOARCH="amd64"
                GOBIN=""
                GOCACHE="/home/gopher/.cache/go-build"
                GOENV="/home/gopher/.config/go/env"
                GOEXE=""
                GOFLAGS=""
                GOHOSTARCH="amd64"
                GOHOSTOS="linux"
                GOINSECURE=""
                GOMODCACHE="/home/gopher/go/pkg/mod"
                GONOPROXY=""
                GONOSUMDB=""
                GOOS="linux"
                GOPATH="/home/gopher/go"
                GOPRIVATE=""
                GOPROXY="https://proxy.golang.org,direct"
                GOROOT="/usr/local/go"
                GOSUMDB="sum.golang.org"
                GOTMPDIR=""
                GOTOOLDIR="/usr/local/go/pkg/tool/linux_amd64"
                GCCGO="gccgo"
                AR="ar"
                CC="gcc"
                CXX="g++"
                CGO_ENABLED="1"
                GOMOD=""
                CGO_CFLAGS="-g -O2"
                CGO_CPPFLAGS=""
                CGO_CXXFLAGS="-g -O2"
                CGO_FFLAGS="-g -O2"
                CGO_LDFLAGS="-g -O2"
                PKG_CONFIG="pkg-config"
                GOGCCFLAGS="-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build -gno-record-gcc-switches"

                """
        }]
    }
    go_env_gobin: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go_env_gobin"
        Order:           7
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go env GOBIN"
            ExitCode: 0
            Output: """


                """
            ComparisonOutput: """


                """
        }]
    }
    go_env_set_gobin: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go_env_set_gobin"
        Order:           8
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "go env -w GOBIN=/path/to/my/gobin"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    go_env_check_gobin: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go_env_check_gobin"
        Order:           9
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go env GOBIN"
            ExitCode: 0
            Output: """
                /path/to/my/gobin

                """
            ComparisonOutput: """
                /path/to/my/gobin

                """
        }]
    }
    go_env_env: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go_env_env"
        Order:           10
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go env GOENV"
            ExitCode: 0
            Output: """
                /home/gopher/.config/go/env

                """
            ComparisonOutput: """
                /home/gopher/.config/go/env

                """
        }]
    }
    go_env_unset_gobin: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go_env_unset_gobin"
        Order:           11
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "go env -w GOBIN="
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    go_env_check_gobin_again: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go_env_check_gobin_again"
        Order:           12
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go env GOBIN"
            ExitCode: 0
            Output: """


                """
            ComparisonOutput: """


                """
        }]
    }
    go_help_env: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "go_help_env"
        Order:           13
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go help env"
            ExitCode: 0
            Output: """
                usage: go env [-json] [-u] [-w] [var ...]

                Env prints Go environment information.

                By default env prints information as a shell script
                (on Windows, a batch file). If one or more variable
                names is given as arguments, env prints the value of
                each named variable on its own line.

                The -json flag prints the environment in JSON format
                instead of as a shell script.

                The -u flag requires one or more arguments and unsets
                the default setting for the named environment variables,
                if one has been set with 'go env -w'.

                The -w flag requires one or more arguments of the
                form NAME=VALUE and changes the default settings
                of the named environment variables to the given values.

                For more about environment variables, see 'go help environment'.

                """
            ComparisonOutput: """
                usage: go env [-json] [-u] [-w] [var ...]

                Env prints Go environment information.

                By default env prints information as a shell script
                (on Windows, a batch file). If one or more variable
                names is given as arguments, env prints the value of
                each named variable on its own line.

                The -json flag prints the environment in JSON format
                instead of as a shell script.

                The -u flag requires one or more arguments and unsets
                the default setting for the named environment variables,
                if one has been set with 'go env -w'.

                The -w flag requires one or more arguments of the
                form NAME=VALUE and changes the default settings
                of the named environment variables to the given values.

                For more about environment variables, see 'go help environment'.

                """
        }]
    }
    gobin_not_set: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gobin_not_set"
        Order:           14
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go env GOBIN"
            ExitCode: 0
            Output: """


                """
            ComparisonOutput: """


                """
        }]
    }
    add_gobin_bin_to_path: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "add_gobin_bin_to_path"
        Order:           15
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "echo export PATH=\"$(go env GOPATH)/bin:$PATH\" >>$HOME/.profile"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    source_profile_again: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "source_profile_again"
        Order:           16
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "source $HOME/.profile"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    echo_path: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "echo_path"
        Order:           17
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "echo $PATH"
            ExitCode: 0
            Output: """
                /home/gopher/go/bin:/usr/local/go/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games

                """
            ComparisonOutput: """
                /home/gopher/go/bin:/usr/local/go/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games

                """
        }]
    }
}
Hash: "aab06b00b9299e35c44b248d49de9524478656259d2377cb44f6a88f5dd35651"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Defs: {
    mod1_name: "mod1"
    mod1_path: "{{{.REPO1}}}"
    mod1_dir:  "/home/gopher/mod1"
    mod2_name: "mod2"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    mod2_dir: "/home/gopher/mod2"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Var:     "REPO1"
            Pattern: "mod1"
            Private: false
        }]
    }
}]
Scenarios: {
    go115: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }
}
Steps: {
    create_module: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir /home/gopher/mod1
            cd /home/gopher/mod1
            git init -q
            git remote add origin https://{{{.REPO1}}}.git
            go mod init {{{.REPO1}}}
            """
        InformationOnly: false
        Terminal:        string
    }
    create_readme: {
        Target:   "/home/gopher/mod1/README.md"
        Language: "md"
        Name:     string
        StepType: 3
        Source:   "## `{{{.REPO1}}}`"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    create_main: {
        Target:   "/home/gopher/mod1/main.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package main

            import "fmt"

            func main() {
            \tfmt.Println("Hello, world!")
            }

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    commit_and_push: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git add go.mod README.md main.go
            git commit -q -m "Initial commit"
            git push -q origin main
            """
        InformationOnly: false
        Terminal:        string
    }
    check_porcelain: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    use_module: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir /home/gopher/mod2
            cd /home/gopher/mod2
            go mod init mod.com
            go get {{{.REPO1}}}
            go run {{{.REPO1}}}
            """
        InformationOnly: false
        Terminal:        string
    }
    mod1_pseudoversion: {
        Name:            string
        StepType:        1
        Source:          "go list -m -f {{.Version}} {{{.REPO1}}}"
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Terminal:        string
    }
}
// ---
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Pattern: "mod1"
            Private: false
            Var:     "REPO1"
        }]
    }
    Version: """
        {
          "Path": "github.com/play-with-go/gitea/cmd/gitea",
          "Main": {
            "Path": "github.com/play-with-go/gitea",
            "Version": "v0.0.0-20210430163339-b27dc21b6036",
            "Sum": "h1:7wJ+VvtJk2GU9XtFGDeVwO6ohT8l5nu5h9A6YDCec+U=",
            "Replace": null
          },
          "Deps": [
            {
              "Path": "code.gitea.io/sdk/gitea",
              "Version": "v0.13.1",
              "Sum": "h1:Y7bpH2iO6Q0KhhMJfjP/LZ0AmiYITeRQlCD8b0oYqhk=",
              "Replace": null
            },
            {
              "Path": "cuelang.org/go",
              "Version": "v0.3.2",
              "Sum": "h1:/Am5yFDwqnaEi+g942OPM1M4/qtfVSm49wtkQbeh5Z4=",
              "Replace": null
            },
            {
              "Path": "github.com/cockroachdb/apd/v2",
              "Version": "v2.0.1",
              "Sum": "h1:y1Rh3tEU89D+7Tgbw+lp52T6p/GJLpDmNvr10UWqLTE=",
              "Replace": null
            },
            {
              "Path": "github.com/emicklei/proto",
              "Version": "v1.6.15",
              "Sum": "h1:XbpwxmuOPrdES97FrSfpyy67SSCV/wBIKXqgJzh6hNw=",
              "Replace": null
            },
            {
              "Path": "github.com/hashicorp/go-version",
              "Version": "v1.2.0",
              "Sum": "h1:3vNe/fWF5CBgRIguda1meWhsZHy3m8gCJ5wx+dIzX/E=",
              "Replace": null
            },
            {
              "Path": "github.com/mpvl/unique",
              "Version": "v0.0.0-20150818121801-cbe035fff7de",
              "Sum": "h1:D5x39vF5KCwKQaw+OC9ZPiLVHXz3UFw2+psEX+gYcto=",
              "Replace": null
            },
            {
              "Path": "github.com/pkg/errors",
              "Version": "v0.8.1",
              "Sum": "h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=",
              "Replace": null
            },
            {
              "Path": "github.com/play-with-go/preguide",
              "Version": "v0.0.2-0.20210430163307-e5ab271ba2e9",
              "Sum": "h1:dpSLI117TKb8MdLknsUYbQjKJpP6jzBYpfKKVszCZNI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/crypto",
              "Version": "v0.0.0-20200622213623-75b288015ac9",
              "Sum": "h1:psW17arqaxU48Z5kZ0CQnkZWQJsqcURM6tKiBApRjXI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/net",
              "Version": "v0.0.0-20201021035429-f5854403a974",
              "Sum": "h1:IX6qOQeG5uLjB/hjjwjedwfjND0hgjPMMyO1RoIXQNI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/text",
              "Version": "v0.3.3",
              "Sum": "h1:cokOdA+Jmi5PJGXLlLllQSgYigAEfHXJAERHVMaCc2k=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/xerrors",
              "Version": "v0.0.0-20200804184101-5ec99f83aff1",
              "Sum": "h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/retry.v1",
              "Version": "v1.0.3",
              "Sum": "h1:a9CArYczAVv6Qs6VGoLMio99GEs7kY9UzSF9+LD+iGs=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/yaml.v3",
              "Version": "v3.0.0-20200121175148-a6ecf24a6d71",
              "Sum": "h1:Xe2gvTZUJpsvOWUnvmL/tmhVBZUmHSvLbMjRj6NUUKo=",
              "Replace": null
            }
          ]
        }
        """
    Variables: ["GITEA_USERNAME", "GITEA_PRIV_KEY", "GITEA_PUB_KEY", "GITEA_KEYSCAN", "REPO1"]
}]
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go115: {
            Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
        }
    }
}]
Scenarios: [{
    Name:        "go115"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
FilenameComment: false
Steps: {
    create_module: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "create_module"
        Order:           0
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir /home/gopher/mod1"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd /home/gopher/mod1"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git init -q"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git remote add origin https://{{{.REPO1}}}.git"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "go mod init {{{.REPO1}}}"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module {{{.REPO1}}}

                """
            ComparisonOutput: """
                go: creating new go.mod: module {{{.REPO1}}}

                """
        }]
    }
    create_readme: {
        StepType: 2
        Name:     "create_readme"
        Order:    1
        Terminal: "term1"
        Language: "md"
        Renderer: {
            RendererType: 1
        }
        Source: "## `{{{.REPO1}}}`"
        Target: "/home/gopher/mod1/README.md"
    }
    create_main: {
        StepType: 2
        Name:     "create_main"
        Order:    2
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import "fmt"

            func main() {
            \tfmt.Println("Hello, world!")
            }

            """
        Target: "/home/gopher/mod1/main.go"
    }
    commit_and_push: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "commit_and_push"
        Order:           3
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git add go.mod README.md main.go"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m \"Initial commit\""
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    check_porcelain: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "check_porcelain"
        Order:           4
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    use_module: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "use_module"
        Order:           5
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir /home/gopher/mod2"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd /home/gopher/mod2"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "go mod init mod.com"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module mod.com

                """
            ComparisonOutput: """
                go: creating new go.mod: module mod.com

                """
        }, {
            Negated:  false
            CmdStr:   "go get {{{.REPO1}}}"
            ExitCode: 0
            Output: """
                go: downloading {{{.REPO1}}} v0.0.0-20060102150405-abcedf12345
                go: {{{.REPO1}}} upgrade => v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """

                go: downloading {{{.REPO1}}} v0.0.0-20060102150405-abcedf12345
                go: {{{.REPO1}}} upgrade => v0.0.0-20060102150405-abcedf12345
                """
        }, {
            Negated:  false
            CmdStr:   "go run {{{.REPO1}}}"
            ExitCode: 0
            Output: """
                Hello, world!

                """
            ComparisonOutput: """
                Hello, world!

                """
        }]
    }
    mod1_pseudoversion: {
        StepType:        1
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Name:            "mod1_pseudoversion"
        Order:           6
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go list -m -f {{.Version}} {{{.REPO1}}}"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """
                v0.0.0-20060102150405-abcedf12345

                """
        }]
    }
}
Hash: "fec91c046cdac0a318c1e7b6851a977220fcf345146306b5bef71d72115abad6"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Defs: {
    modname:     "hello"
    fullmodpath: "{{{.REPO1}}}"
    vcsurl:      "https://{{{.REPO1}}}.git"
    readme:      "README.md"
    readmepath:  "/home/gopher/hello/README.md"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    username: "{{{.GITEA_USERNAME}}}"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Var:     "REPO1"
            Pattern: "hello"
            Private: false
        }]
    }
}]
Scenarios: {
    go115: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }
}
Steps: {
    whoami: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            whoami
            pwd
            """
        InformationOnly: false
        Terminal:        string
    }
    echo_hello: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "echo '*** !!! CLICK ME !!! ***'"
        InformationOnly: false
        Terminal:        string
    }
    multiple_commands: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir hello
            cd hello
            """
        InformationOnly: false
        Terminal:        string
    }
    upload_readme: {
        Target:   "/home/gopher/hello/README.md"
        Language: "md"
        Name:     string
        StepType: 3
        Source: """
            This is README.md.

            Hello, gopher!

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    upload_readme_again: {
        Target:   "/home/gopher/hello/README.md"
        Language: "md"
        Name:     string
        StepType: 3
        Source: """
            This is README.md.

            Hello, gopher!

            We made a change!

            """
        Renderer: {
            RendererType: 3
            Pre: """
                This is README.md.

                Hello, gopher!

                """
        }
        Terminal: string
    }
    cat_readme: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "cat README.md"
        InformationOnly: false
        Terminal:        string
    }
    gitinit: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git init -q
            git remote add origin https://{{{.REPO1}}}.git
            """
        InformationOnly: false
        Terminal:        string
    }
    gitadd: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git add README.md
            git commit -q -m 'Initial commit'
            """
        InformationOnly: false
        Terminal:        string
    }
    gitpush: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "git push -q origin main"
        InformationOnly: false
        Terminal:        string
    }
}
// ---
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Pattern: "hello"
            Private: false
            Var:     "REPO1"
        }]
    }
    Version: """
        {
          "Path": "github.com/play-with-go/gitea/cmd/gitea",
          "Main": {
            "Path": "github.com/play-with-go/gitea",
            "Version": "v0.0.0-20210430163339-b27dc21b6036",
            "Sum": "h1:7wJ+VvtJk2GU9XtFGDeVwO6ohT8l5nu5h9A6YDCec+U=",
            "Replace": null
          },
          "Deps": [
            {
              "Path": "code.gitea.io/sdk/gitea",
              "Version": "v0.13.1",
              "Sum": "h1:Y7bpH2iO6Q0KhhMJfjP/LZ0AmiYITeRQlCD8b0oYqhk=",
              "Replace": null
            },
            {
              "Path": "cuelang.org/go",
              "Version": "v0.3.2",
              "Sum": "h1:/Am5yFDwqnaEi+g942OPM1M4/qtfVSm49wtkQbeh5Z4=",
              "Replace": null
            },
            {
              "Path": "github.com/cockroachdb/apd/v2",
              "Version": "v2.0.1",
              "Sum": "h1:y1Rh3tEU89D+7Tgbw+lp52T6p/GJLpDmNvr10UWqLTE=",
              "Replace": null
            },
            {
              "Path": "github.com/emicklei/proto",
              "Version": "v1.6.15",
              "Sum": "h1:XbpwxmuOPrdES97FrSfpyy67SSCV/wBIKXqgJzh6hNw=",
              "Replace": null
            },
            {
              "Path": "github.com/hashicorp/go-version",
              "Version": "v1.2.0",
              "Sum": "h1:3vNe/fWF5CBgRIguda1meWhsZHy3m8gCJ5wx+dIzX/E=",
              "Replace": null
            },
            {
              "Path": "github.com/mpvl/unique",
              "Version": "v0.0.0-20150818121801-cbe035fff7de",
              "Sum": "h1:D5x39vF5KCwKQaw+OC9ZPiLVHXz3UFw2+psEX+gYcto=",
              "Replace": null
            },
            {
              "Path": "github.com/pkg/errors",
              "Version": "v0.8.1",
              "Sum": "h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=",
              "Replace": null
            },
            {
              "Path": "github.com/play-with-go/preguide",
              "Version": "v0.0.2-0.20210430163307-e5ab271ba2e9",
              "Sum": "h1:dpSLI117TKb8MdLknsUYbQjKJpP6jzBYpfKKVszCZNI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/crypto",
              "Version": "v0.0.0-20200622213623-75b288015ac9",
              "Sum": "h1:psW17arqaxU48Z5kZ0CQnkZWQJsqcURM6tKiBApRjXI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/net",
              "Version": "v0.0.0-20201021035429-f5854403a974",
              "Sum": "h1:IX6qOQeG5uLjB/hjjwjedwfjND0hgjPMMyO1RoIXQNI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/text",
              "Version": "v0.3.3",
              "Sum": "h1:cokOdA+Jmi5PJGXLlLllQSgYigAEfHXJAERHVMaCc2k=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/xerrors",
              "Version": "v0.0.0-20200804184101-5ec99f83aff1",
              "Sum": "h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/retry.v1",
              "Version": "v1.0.3",
              "Sum": "h1:a9CArYczAVv6Qs6VGoLMio99GEs7kY9UzSF9+LD+iGs=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/yaml.v3",
              "Version": "v3.0.0-20200121175148-a6ecf24a6d71",
              "Sum": "h1:Xe2gvTZUJpsvOWUnvmL/tmhVBZUmHSvLbMjRj6NUUKo=",
              "Replace": null
            }
          ]
        }
        """
    Variables: ["GITEA_USERNAME", "GITEA_PRIV_KEY", "GITEA_PUB_KEY", "GITEA_KEYSCAN", "REPO1"]
}]
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go115: {
            Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
        }
    }
}]
Scenarios: [{
    Name:        "go115"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
FilenameComment: false
Steps: {
    whoami: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "whoami"
        Order:           0
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "whoami"
            ExitCode: 0
            Output: """
                gopher

                """
            ComparisonOutput: """
                gopher

                """
        }, {
            Negated:  false
            CmdStr:   "pwd"
            ExitCode: 0
            Output: """
                /home/gopher

                """
            ComparisonOutput: """
                /home/gopher

                """
        }]
    }
    echo_hello: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "echo_hello"
        Order:           1
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "echo '*** !!! CLICK ME !!! ***'"
            ExitCode: 0
            Output: """
                *** !!! CLICK ME !!! ***

                """
            ComparisonOutput: """
                *** !!! CLICK ME !!! ***

                """
        }]
    }
    multiple_commands: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "multiple_commands"
        Order:           2
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir hello"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd hello"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    upload_readme: {
        StepType: 2
        Name:     "upload_readme"
        Order:    3
        Terminal: "term1"
        Language: "md"
        Renderer: {
            RendererType: 1
        }
        Source: """
            This is README.md.

            Hello, gopher!

            """
        Target: "/home/gopher/hello/README.md"
    }
    upload_readme_again: {
        StepType: 2
        Name:     "upload_readme_again"
        Order:    4
        Terminal: "term1"
        Language: "md"
        Renderer: {
            RendererType: 3
            Pre: """
                This is README.md.

                Hello, gopher!

                """
        }
        Source: """
            This is README.md.

            Hello, gopher!

            We made a change!

            """
        Target: "/home/gopher/hello/README.md"
    }
    cat_readme: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "cat_readme"
        Order:           5
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "cat README.md"
            ExitCode: 0
            Output: """
                This is README.md.

                Hello, gopher!

                We made a change!


                """
            ComparisonOutput: """
                This is README.md.

                Hello, gopher!

                We made a change!


                """
        }]
    }
    gitinit: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gitinit"
        Order:           6
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git init -q"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git remote add origin https://{{{.REPO1}}}.git"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    gitadd: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gitadd"
        Order:           7
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git add README.md"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m 'Initial commit'"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    gitpush: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gitpush"
        Order:           8
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
}
Hash: "9f0f595ba284f0ff90687c7b0b0958fae584f37d6bd132057de028c9b7ba34bc"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Var:     "PAINKILLER"
            Pattern: "painkiller"
            Private: false
        }]
    }
}]
Defs: {
    painkiller:       "painkiller"
    painkiller_vcs:   "https://{{{.PAINKILLER}}}.git"
    painkiller_mod:   "{{{.PAINKILLER}}}"
    painkiller_dir:   "/home/gopher/painkiller"
    painkiller_go:    "painkiller.go"
    tools_constraint: "tools"
    tools_go:         "tools.go"
    pilltype:         "Pill"
    stringer:         "stringer"
    stringer_pkg:     "golang.org/x/tools/cmd/stringer"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    stringer_type_flag: "-type"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go115: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }
}
Steps: {
    goversion: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go version"
        InformationOnly: false
        Terminal:        string
    }
    painkiller_go_mod_init: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir painkiller
            cd painkiller
            go mod init painkiller
            """
        InformationOnly: false
        Terminal:        string
    }
    basic_app: {
        Target:   "/home/gopher/painkiller/painkiller.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package main

            import "fmt"

            type Pill int

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            }

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    painkiller_run_basic: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go run ."
        InformationOnly: false
        Terminal:        string
    }
    manual_string: {
        Target:   "/home/gopher/painkiller/painkiller.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package main

            import "fmt"

            type Pill int

            func (p Pill) String() string {
            \tswitch p {
            \tcase Placebo:
            \t\treturn "Placebo"
            \tcase Ibuprofen:
            \t\treturn "Ibuprofen"
            \tdefault:
            \t\tpanic(fmt.Errorf("unknown Pill value %v", p))
            \t}
            }

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                type Pill int

                const (
                \tPlacebo Pill = iota
                \tIbuprofen
                )

                func main() {
                \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
                }

                """
        }
        Terminal: string
    }
    painkiller_run_manual_string: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go run ."
        InformationOnly: false
        Terminal:        string
    }
    painkiller_remove_hand_written_string: {
        Target:   "/home/gopher/painkiller/painkiller.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package main

            import "fmt"

            type Pill int

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                type Pill int

                func (p Pill) String() string {
                \tswitch p {
                \tcase Placebo:
                \t\treturn "Placebo"
                \tcase Ibuprofen:
                \t\treturn "Ibuprofen"
                \tdefault:
                \t\tpanic(fmt.Errorf("unknown Pill value %v", p))
                \t}
                }

                const (
                \tPlacebo Pill = iota
                \tIbuprofen
                )

                func main() {
                \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
                }

                """
        }
        Terminal: string
    }
    tools_go_initial: {
        Target:   "/home/gopher/painkiller/tools.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            // +build tools

            package tools

            import (
            \t_ "golang.org/x/tools/cmd/stringer"
            )

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    stringer_go_get: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go get golang.org/x/tools/cmd/stringer@v0.0.0-20201105220310-78b158585360"
        InformationOnly: false
        Terminal:        string
    }
    painkiller_cat_go_mod: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "cat go.mod"
        InformationOnly: false
        Terminal:        string
    }
    painkiller_go_mod_tidy: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go mod tidy"
        InformationOnly: false
        Terminal:        string
    }
    stringer_help: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go run golang.org/x/tools/cmd/stringer -help"
        InformationOnly: false
        Terminal:        string
    }
    stringer_run_by_hand: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go run golang.org/x/tools/cmd/stringer -type Pill"
        InformationOnly: false
        Terminal:        string
    }
    stringer_ls_output: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "ls"
        InformationOnly: false
        Terminal:        string
    }
    stringer_cat_generated: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "cat pill_string.go"
        InformationOnly: false
        Terminal:        string
    }
    painkiller_check_stringer: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go run ."
        InformationOnly: false
        Terminal:        string
    }
    painkiller_add_gogenerate_directive: {
        Target:   "/home/gopher/painkiller/painkiller.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package main

            import "fmt"

            //go:generate go run golang.org/x/tools/cmd/stringer -type=Pill

            type Pill int

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                type Pill int

                const (
                \tPlacebo Pill = iota
                \tIbuprofen
                )

                func main() {
                \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
                }

                """
        }
        Terminal: string
    }
    painkiller_gogenerate: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go generate ."
        InformationOnly: false
        Terminal:        string
    }
    painkiller_add_fever_advice: {
        Target:   "/home/gopher/painkiller/painkiller.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package main

            import "fmt"

            //go:generate go run golang.org/x/tools/cmd/stringer -type=Pill

            type Pill int

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            \tParacetamol
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            \tfmt.Printf("For a fever, take %v\\n", Paracetamol)
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                //go:generate go run golang.org/x/tools/cmd/stringer -type=Pill

                type Pill int

                const (
                \tPlacebo Pill = iota
                \tIbuprofen
                )

                func main() {
                \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
                }

                """
        }
        Terminal: string
    }
    painkiller_gogenerate_again: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go generate ."
        InformationOnly: false
        Terminal:        string
    }
    painkiller_check_fever_advice: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go run ."
        InformationOnly: false
        Terminal:        string
    }
}
// ---
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Pattern: "painkiller"
            Private: false
            Var:     "PAINKILLER"
        }]
    }
    Version: """
        {
          "Path": "github.com/play-with-go/gitea/cmd/gitea",
          "Main": {
            "Path": "github.com/play-with-go/gitea",
            "Version": "v0.0.0-20210430163339-b27dc21b6036",
            "Sum": "h1:7wJ+VvtJk2GU9XtFGDeVwO6ohT8l5nu5h9A6YDCec+U=",
            "Replace": null
          },
          "Deps": [
            {
              "Path": "code.gitea.io/sdk/gitea",
              "Version": "v0.13.1",
              "Sum": "h1:Y7bpH2iO6Q0KhhMJfjP/LZ0AmiYITeRQlCD8b0oYqhk=",
              "Replace": null
            },
            {
              "Path": "cuelang.org/go",
              "Version": "v0.3.2",
              "Sum": "h1:/Am5yFDwqnaEi+g942OPM1M4/qtfVSm49wtkQbeh5Z4=",
              "Replace": null
            },
            {
              "Path": "github.com/cockroachdb/apd/v2",
              "Version": "v2.0.1",
              "Sum": "h1:y1Rh3tEU89D+7Tgbw+lp52T6p/GJLpDmNvr10UWqLTE=",
              "Replace": null
            },
            {
              "Path": "github.com/emicklei/proto",
              "Version": "v1.6.15",
              "Sum": "h1:XbpwxmuOPrdES97FrSfpyy67SSCV/wBIKXqgJzh6hNw=",
              "Replace": null
            },
            {
              "Path": "github.com/hashicorp/go-version",
              "Version": "v1.2.0",
              "Sum": "h1:3vNe/fWF5CBgRIguda1meWhsZHy3m8gCJ5wx+dIzX/E=",
              "Replace": null
            },
            {
              "Path": "github.com/mpvl/unique",
              "Version": "v0.0.0-20150818121801-cbe035fff7de",
              "Sum": "h1:D5x39vF5KCwKQaw+OC9ZPiLVHXz3UFw2+psEX+gYcto=",
              "Replace": null
            },
            {
              "Path": "github.com/pkg/errors",
              "Version": "v0.8.1",
              "Sum": "h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=",
              "Replace": null
            },
            {
              "Path": "github.com/play-with-go/preguide",
              "Version": "v0.0.2-0.20210430163307-e5ab271ba2e9",
              "Sum": "h1:dpSLI117TKb8MdLknsUYbQjKJpP6jzBYpfKKVszCZNI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/crypto",
              "Version": "v0.0.0-20200622213623-75b288015ac9",
              "Sum": "h1:psW17arqaxU48Z5kZ0CQnkZWQJsqcURM6tKiBApRjXI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/net",
              "Version": "v0.0.0-20201021035429-f5854403a974",
              "Sum": "h1:IX6qOQeG5uLjB/hjjwjedwfjND0hgjPMMyO1RoIXQNI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/text",
              "Version": "v0.3.3",
              "Sum": "h1:cokOdA+Jmi5PJGXLlLllQSgYigAEfHXJAERHVMaCc2k=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/xerrors",
              "Version": "v0.0.0-20200804184101-5ec99f83aff1",
              "Sum": "h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/retry.v1",
              "Version": "v1.0.3",
              "Sum": "h1:a9CArYczAVv6Qs6VGoLMio99GEs7kY9UzSF9+LD+iGs=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/yaml.v3",
              "Version": "v3.0.0-20200121175148-a6ecf24a6d71",
              "Sum": "h1:Xe2gvTZUJpsvOWUnvmL/tmhVBZUmHSvLbMjRj6NUUKo=",
              "Replace": null
            }
          ]
        }
        """
    Variables: ["GITEA_USERNAME", "GITEA_PRIV_KEY", "GITEA_PUB_KEY", "GITEA_KEYSCAN", "PAINKILLER"]
}]
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go115: {
            Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
        }
    }
}]
Scenarios: [{
    Name:        "go115"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
FilenameComment: false
Steps: {
    goversion: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "goversion"
        Order:           0
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go version"
            ExitCode: 0
            Output: """
                go version go1.15.8 linux/amd64

                """
            ComparisonOutput: """
                go version go1.15.8 linux/amd64

                """
        }]
    }
    painkiller_go_mod_init: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "painkiller_go_mod_init"
        Order:           1
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir painkiller"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd painkiller"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "go mod init painkiller"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module painkiller

                """
            ComparisonOutput: """
                go: creating new go.mod: module painkiller

                """
        }]
    }
    basic_app: {
        StepType: 2
        Name:     "basic_app"
        Order:    2
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import "fmt"

            type Pill int

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            }

            """
        Target: "/home/gopher/painkiller/painkiller.go"
    }
    painkiller_run_basic: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "painkiller_run_basic"
        Order:           3
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                For headaches, take 1

                """
            ComparisonOutput: """
                For headaches, take 1

                """
        }]
    }
    manual_string: {
        StepType: 2
        Name:     "manual_string"
        Order:    4
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                type Pill int

                const (
                \tPlacebo Pill = iota
                \tIbuprofen
                )

                func main() {
                \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
                }

                """
        }
        Source: """
            package main

            import "fmt"

            type Pill int

            func (p Pill) String() string {
            \tswitch p {
            \tcase Placebo:
            \t\treturn "Placebo"
            \tcase Ibuprofen:
            \t\treturn "Ibuprofen"
            \tdefault:
            \t\tpanic(fmt.Errorf("unknown Pill value %v", p))
            \t}
            }

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            }

            """
        Target: "/home/gopher/painkiller/painkiller.go"
    }
    painkiller_run_manual_string: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "painkiller_run_manual_string"
        Order:           5
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                For headaches, take Ibuprofen

                """
            ComparisonOutput: """
                For headaches, take Ibuprofen

                """
        }]
    }
    painkiller_remove_hand_written_string: {
        StepType: 2
        Name:     "painkiller_remove_hand_written_string"
        Order:    6
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                type Pill int

                func (p Pill) String() string {
                \tswitch p {
                \tcase Placebo:
                \t\treturn "Placebo"
                \tcase Ibuprofen:
                \t\treturn "Ibuprofen"
                \tdefault:
                \t\tpanic(fmt.Errorf("unknown Pill value %v", p))
                \t}
                }

                const (
                \tPlacebo Pill = iota
                \tIbuprofen
                )

                func main() {
                \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
                }

                """
        }
        Source: """
            package main

            import "fmt"

            type Pill int

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            }

            """
        Target: "/home/gopher/painkiller/painkiller.go"
    }
    tools_go_initial: {
        StepType: 2
        Name:     "tools_go_initial"
        Order:    7
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // +build tools

            package tools

            import (
            \t_ "golang.org/x/tools/cmd/stringer"
            )

            """
        Target: "/home/gopher/painkiller/tools.go"
    }
    stringer_go_get: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "stringer_go_get"
        Order:           8
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go get golang.org/x/tools/cmd/stringer@v0.0.0-20201105220310-78b158585360"
            ExitCode: 0
            Output: """
                go: downloading golang.org/x/tools v0.0.0-20201105220310-78b158585360
                go: found golang.org/x/tools/cmd/stringer in golang.org/x/tools v0.0.0-20201105220310-78b158585360
                go: downloading golang.org/x/mod v0.3.0
                go: downloading golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1

                """
            ComparisonOutput: """

                go: downloading golang.org/x/mod v0.3.0
                go: downloading golang.org/x/tools v0.0.0-20201105220310-78b158585360
                go: downloading golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1
                go: found golang.org/x/tools/cmd/stringer in golang.org/x/tools v0.0.0-20201105220310-78b158585360
                """
        }]
    }
    painkiller_cat_go_mod: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "painkiller_cat_go_mod"
        Order:           9
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "cat go.mod"
            ExitCode: 0
            Output: """
                module painkiller

                go 1.15

                require golang.org/x/tools v0.0.0-20201105220310-78b158585360 // indirect

                """
            ComparisonOutput: """
                module painkiller

                go 1.15

                require golang.org/x/tools v0.0.0-20201105220310-78b158585360 // indirect

                """
        }]
    }
    painkiller_go_mod_tidy: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "painkiller_go_mod_tidy"
        Order:           10
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "go mod tidy"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    stringer_help: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "stringer_help"
        Order:           11
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go run golang.org/x/tools/cmd/stringer -help"
            ExitCode: 0
            Output: """
                Usage of stringer:
                \tstringer [flags] -type T [directory]
                \tstringer [flags] -type T files... # Must be a single package
                For more information, see:
                \thttps://pkg.go.dev/golang.org/x/tools/cmd/stringer
                Flags:
                  -linecomment
                    \tuse line comment text as printed text when present
                  -output string
                    \toutput file name; default srcdir/<type>_string.go
                  -tags string
                    \tcomma-separated list of build tags to apply
                  -trimprefix prefix
                    \ttrim the prefix from the generated constant names
                  -type string
                    \tcomma-separated list of type names; must be set

                """
            ComparisonOutput: """
                Usage of stringer:
                \tstringer [flags] -type T [directory]
                \tstringer [flags] -type T files... # Must be a single package
                For more information, see:
                \thttps://pkg.go.dev/golang.org/x/tools/cmd/stringer
                Flags:
                  -linecomment
                    \tuse line comment text as printed text when present
                  -output string
                    \toutput file name; default srcdir/<type>_string.go
                  -tags string
                    \tcomma-separated list of build tags to apply
                  -trimprefix prefix
                    \ttrim the prefix from the generated constant names
                  -type string
                    \tcomma-separated list of type names; must be set

                """
        }]
    }
    stringer_run_by_hand: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "stringer_run_by_hand"
        Order:           12
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "go run golang.org/x/tools/cmd/stringer -type Pill"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    stringer_ls_output: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "stringer_ls_output"
        Order:           13
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "ls"
            ExitCode: 0
            Output: """
                go.mod\tgo.sum\tpainkiller.go  pill_string.go  tools.go

                """
            ComparisonOutput: """
                go.mod\tgo.sum\tpainkiller.go  pill_string.go  tools.go

                """
        }]
    }
    stringer_cat_generated: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "stringer_cat_generated"
        Order:           14
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "cat pill_string.go"
            ExitCode: 0
            Output: """
                // Code generated by "stringer -type Pill"; DO NOT EDIT.

                package main

                import "strconv"

                func _() {
                \t// An "invalid array index" compiler error signifies that the constant values have changed.
                \t// Re-run the stringer command to generate them again.
                \tvar x [1]struct{}
                \t_ = x[Placebo-0]
                \t_ = x[Ibuprofen-1]
                }

                const _Pill_name = "PlaceboIbuprofen"

                var _Pill_index = [...]uint8{0, 7, 16}

                func (i Pill) String() string {
                \tif i < 0 || i >= Pill(len(_Pill_index)-1) {
                \t\treturn "Pill(" + strconv.FormatInt(int64(i), 10) + ")"
                \t}
                \treturn _Pill_name[_Pill_index[i]:_Pill_index[i+1]]
                }

                """
            ComparisonOutput: """
                // Code generated by "stringer -type Pill"; DO NOT EDIT.

                package main

                import "strconv"

                func _() {
                \t// An "invalid array index" compiler error signifies that the constant values have changed.
                \t// Re-run the stringer command to generate them again.
                \tvar x [1]struct{}
                \t_ = x[Placebo-0]
                \t_ = x[Ibuprofen-1]
                }

                const _Pill_name = "PlaceboIbuprofen"

                var _Pill_index = [...]uint8{0, 7, 16}

                func (i Pill) String() string {
                \tif i < 0 || i >= Pill(len(_Pill_index)-1) {
                \t\treturn "Pill(" + strconv.FormatInt(int64(i), 10) + ")"
                \t}
                \treturn _Pill_name[_Pill_index[i]:_Pill_index[i+1]]
                }

                """
        }]
    }
    painkiller_check_stringer: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "painkiller_check_stringer"
        Order:           15
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                For headaches, take Ibuprofen

                """
            ComparisonOutput: """
                For headaches, take Ibuprofen

                """
        }]
    }
    painkiller_add_gogenerate_directive: {
        StepType: 2
        Name:     "painkiller_add_gogenerate_directive"
        Order:    16
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                type Pill int

                const (
                \tPlacebo Pill = iota
                \tIbuprofen
                )

                func main() {
                \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
                }

                """
        }
        Source: """
            package main

            import "fmt"

            //go:generate go run golang.org/x/tools/cmd/stringer -type=Pill

            type Pill int

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            }

            """
        Target: "/home/gopher/painkiller/painkiller.go"
    }
    painkiller_gogenerate: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "painkiller_gogenerate"
        Order:           17
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "go generate ."
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    painkiller_add_fever_advice: {
        StepType: 2
        Name:     "painkiller_add_fever_advice"
        Order:    18
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                //go:generate go run golang.org/x/tools/cmd/stringer -type=Pill

                type Pill int

                const (
                \tPlacebo Pill = iota
                \tIbuprofen
                )

                func main() {
                \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
                }

                """
        }
        Source: """
            package main

            import "fmt"

            //go:generate go run golang.org/x/tools/cmd/stringer -type=Pill

            type Pill int

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            \tParacetamol
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            \tfmt.Printf("For a fever, take %v\\n", Paracetamol)
            }

            """
        Target: "/home/gopher/painkiller/painkiller.go"
    }
    painkiller_gogenerate_again: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "painkiller_gogenerate_again"
        Order:           19
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "go generate ."
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    painkiller_check_fever_advice: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "painkiller_check_fever_advice"
        Order:           20
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                For headaches, take Ibuprofen
                For a fever, take Paracetamol

                """
            ComparisonOutput: """
                For headaches, take Ibuprofen
                For a fever, take Paracetamol

                """
        }]
    }
}
Hash: "57184c48fdc9e2a45c3a259c47db415a1626dd0002162e8629aca8102c5ac627"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Var:     "PROVERB"
            Pattern: "proverb"
            Private: false
        }]
    }
}]
Defs: {
    proverb:      "proverb"
    proverb_vcs:  "https://{{{.PROVERB}}}.git"
    proverb_mod:  "{{{.PROVERB}}}"
    proverb_dir:  "/home/gopher/proverb"
    proverb_go:   "proverb.go"
    proverb_v010: "v0.1.0"
    proverb_v020: "v0.2.0"
    proverb_v030: "v0.3.0"
    proverb_v040: "v0.4.0"
    proverb_v100: "v1.0.0"
    proverb_v101: "v1.0.1"
    proverb_v102: "v1.0.2"
    gopher:       "gopher"
    gopher_mod:   "gopher"
    gopher_dir:   "/home/gopher/gopher"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    gopher_go: "gopher.go"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go116: {
        Name:        string
        Description: "Go 1.16"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go116: {
                Image: "playwithgo/go1.16@sha256:3ae1950433998a2be8c8ce3b1cb6479e6541f1e32443447a24085cfe09e2c391"
            }
        }
    }
}
Steps: {
    goversion: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go version"
        InformationOnly: false
        Terminal:        string
    }
    proverb_create: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir /home/gopher/proverb
            cd /home/gopher/proverb
            git init -q
            git remote add origin https://{{{.PROVERB}}}.git
            go mod init {{{.PROVERB}}}
            """
        InformationOnly: false
        Terminal:        string
    }
    proverb_go_initial: {
        Target:   "/home/gopher/proverb/proverb.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package proverb

            // Go returns a Go proverb
            func Go() string {
            \treturn "Don't communicate by sharing memory, share memory by communicating."
            }

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    proverb_initial_commit: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git add -A
            git commit -q -m "Initial commit"
            git push -q origin main
            """
        InformationOnly: false
        Terminal:        string
    }
    proverb_check_initial_porcelain: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    proverb_tag_v010: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git tag v0.1.0
            git push -q origin v0.1.0
            """
        InformationOnly: false
        Terminal:        string
    }
    gopher_create: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir /home/gopher/gopher
            cd /home/gopher/gopher
            go mod init gopher
            """
        InformationOnly: false
        Terminal:        string
    }
    gopher_go_initial: {
        Target:   "/home/gopher/gopher/gopher.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t"fmt"

            \t"{{{.PROVERB}}}"
            )

            func main() {
            \tfmt.Println(proverb.Go())
            }

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    gopher_add_dep_proverb_v010: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go get {{{.PROVERB}}}@v0.1.0"
        InformationOnly: false
        Terminal:        string
    }
    gopher_run_initial: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go run ."
        InformationOnly: false
        Terminal:        string
    }
    proverb_cd_concurrency_change: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "cd /home/gopher/proverb"
        InformationOnly: false
        Terminal:        string
    }
    proverb_go_concurrency: {
        Target:   "/home/gopher/proverb/proverb.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package proverb

            // Go returns a Go proverb
            func Go() string {
            \treturn "Concurrency is parallelism."
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package proverb

                // Go returns a Go proverb
                func Go() string {
                \treturn "Don't communicate by sharing memory, share memory by communicating."
                }

                """
        }
        Terminal: string
    }
    proverb_concurrency_commit: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git add -A
            git commit -q -m "Switch Go proverb to something more famous"
            git push -q origin main
            """
        InformationOnly: false
        Terminal:        string
    }
    proverb_check_concurrency_porcelain: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    proverb_tag_v020: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git tag v0.2.0
            git push -q origin v0.2.0
            """
        InformationOnly: false
        Terminal:        string
    }
    gopher_use_v020: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            cd /home/gopher/gopher
            go get {{{.PROVERB}}}@v0.2.0
            go run .
            """
        InformationOnly: false
        Terminal:        string
    }
    proverb_return_to_retract_v020: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "cd /home/gopher/proverb"
        InformationOnly: false
        Terminal:        string
    }
    proverb_retract_v020: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go mod edit -retract=v0.2.0"
        InformationOnly: false
        Terminal:        string
    }
    proverb_cat_v020_retract: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "cat go.mod"
        InformationOnly: false
        Terminal:        string
    }
    proverb_comment_retraction: {
        Target:   "/home/gopher/proverb/go.mod"
        Name:     string
        StepType: 3
        Language: "go.mod"
        Source: """
            module {{{.PROVERB}}}

            go 1.16

            // Go proverb was totally wrong
            retract v0.2.0

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    proverb_go_fix_concurrency_bug: {
        Target:   "/home/gopher/proverb/proverb.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package proverb

            // Go returns a Go proverb
            func Go() string {
            \treturn "Concurrency is not parallelism."
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package proverb

                // Go returns a Go proverb
                func Go() string {
                \treturn "Concurrency is parallelism."
                }

                """
        }
        Terminal: string
    }
    proverb_tag_v030: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git add -A
            git commit -q -m "Fix severe error in Go proverb"
            git push -q origin main
            git tag v0.3.0
            git push -q origin v0.3.0
            """
        InformationOnly: false
        Terminal:        string
    }
    proverb_check_v030_porcelain: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    gopher_use_v030: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            cd /home/gopher/gopher
            go get {{{.PROVERB}}}@v0.3.0
            """
        InformationOnly: false
        Terminal:        string
    }
    gopher_run_v030: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go run ."
        InformationOnly: false
        Terminal:        string
    }
    gopher_sleep_on_proxy: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "sleep 1m"
        InformationOnly: false
        Terminal:        string
    }
    gopher_list_proverb: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go list -m -versions {{{.PROVERB}}}"
        InformationOnly: false
        Terminal:        string
    }
    gopher_list_proverb_retracted: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go list -m -versions -retracted {{{.PROVERB}}}"
        InformationOnly: false
        Terminal:        string
    }
    gopher_use_retracted_v020: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go get {{{.PROVERB}}}@v0.2.0"
        InformationOnly: false
        Terminal:        string
    }
    gopher_run_retracted_v020: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go run ."
        InformationOnly: false
        Terminal:        string
    }
    gopher_list_versions: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go list -m -u all"
        InformationOnly: false
        Terminal:        string
    }
    gopher_use_latest_unretracted: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go get {{{.PROVERB}}}@latest"
        InformationOnly: false
        Terminal:        string
    }
    proverb_return_life: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "cd /home/gopher/proverb"
        InformationOnly: false
        Terminal:        string
    }
    proverb_go_life_advice: {
        Target:   "/home/gopher/proverb/proverb.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package proverb

            // Go returns a Go proverb
            func Go() string {
            \treturn "Concurrency is not parallelism."
            }

            // Life returns a proverb useful for day-to-day living
            func Life() string {
            \treturn "A bird in the hand is worth two in the bush."
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package proverb

                // Go returns a Go proverb
                func Go() string {
                \treturn "Concurrency is not parallelism."
                }

                """
        }
        Terminal: string
    }
    proverb_life_commit: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git add -A
            git commit -q -m "Add Life() proverb"
            git push -q origin main
            """
        InformationOnly: false
        Terminal:        string
    }
    proverb_check_v100_porcelain: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    proverb_tag_v100: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git tag v1.0.0
            git push -q origin v1.0.0
            """
        InformationOnly: false
        Terminal:        string
    }
    proverb_tag_v040: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git tag v0.4.0
            git push -q origin v0.4.0
            """
        InformationOnly: false
        Terminal:        string
    }
    proverb_retract_v100: {
        Target:   "/home/gopher/proverb/go.mod"
        Name:     string
        StepType: 3
        Language: "go.mod"
        Source: """
            module {{{.PROVERB}}}

            go 1.16

            retract (
            \t// Go proverb was totally wrong
            \tv0.2.0

            \t// Published v1 too early
            \t[v1.0.0, v1.0.1]
            )

            """
        Renderer: {
            RendererType: 3
            Pre: """
                module {{{.PROVERB}}}

                go 1.16

                // Go proverb was totally wrong
                retract v0.2.0

                """
        }
        Terminal: string
    }
    proverb_tag_v101: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git add -A
            git commit -q -m "Retract [v1.0.0, v1.0.1]"
            git push -q origin main
            git tag v1.0.1
            git push -q origin v1.0.1
            """
        InformationOnly: false
        Terminal:        string
    }
    proverb_check_v101_porcelain: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    gopher_cd_use_v100: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "cd /home/gopher/gopher"
        InformationOnly: false
        Terminal:        string
    }
    temp_get_v101: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            (
            \tcd $(mktemp -d)
            \texport GOPATH=$(mktemp -d)
            \tgo mod init mod.com
            \tgo get -x {{{.PROVERB}}}@v0.4.0
            \tgo get -x {{{.PROVERB}}}@v1.0.0
            \tgo get -x {{{.PROVERB}}}@v1.0.1
            \tsleep 1m
            ) > /dev/null 2>&1
            """
        InformationOnly: true
        Terminal:        string
    }
    gopher_use_v101: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            go get {{{.PROVERB}}}@v1.0.0
            go get {{{.PROVERB}}}@v1.0.1
            go get {{{.PROVERB}}}@v0.4.0
            """
        InformationOnly: false
        Terminal:        string
    }
    gopher_sleep_on_proxy_again: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "sleep 1m"
        InformationOnly: false
        Terminal:        string
    }
    gopher_list_proverb_v101_retracted: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go list -m -versions -retracted {{{.PROVERB}}}"
        InformationOnly: false
        Terminal:        string
    }
    gopher_list_proverb_v101_nonretracted: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go list -m -versions {{{.PROVERB}}}"
        InformationOnly: false
        Terminal:        string
    }
    gopher_go_update_life_proverb: {
        Target:   "/home/gopher/gopher/gopher.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t"fmt"

            \t"{{{.PROVERB}}}"
            )

            func main() {
            \tfmt.Printf("Go proverb: %v\\n", proverb.Go())
            \tfmt.Printf("Life advice: %v\\n", proverb.Life())
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import (
                \t"fmt"

                \t"{{{.PROVERB}}}"
                )

                func main() {
                \tfmt.Println(proverb.Go())
                }

                """
        }
        Terminal: string
    }
    gopher_run_life_proverb: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go run ."
        InformationOnly: false
        Terminal:        string
    }
}
// ---
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Pattern: "proverb"
            Private: false
            Var:     "PROVERB"
        }]
    }
    Version: """
        {
          "Path": "github.com/play-with-go/gitea/cmd/gitea",
          "Main": {
            "Path": "github.com/play-with-go/gitea",
            "Version": "v0.0.0-20210430163339-b27dc21b6036",
            "Sum": "h1:7wJ+VvtJk2GU9XtFGDeVwO6ohT8l5nu5h9A6YDCec+U=",
            "Replace": null
          },
          "Deps": [
            {
              "Path": "code.gitea.io/sdk/gitea",
              "Version": "v0.13.1",
              "Sum": "h1:Y7bpH2iO6Q0KhhMJfjP/LZ0AmiYITeRQlCD8b0oYqhk=",
              "Replace": null
            },
            {
              "Path": "cuelang.org/go",
              "Version": "v0.3.2",
              "Sum": "h1:/Am5yFDwqnaEi+g942OPM1M4/qtfVSm49wtkQbeh5Z4=",
              "Replace": null
            },
            {
              "Path": "github.com/cockroachdb/apd/v2",
              "Version": "v2.0.1",
              "Sum": "h1:y1Rh3tEU89D+7Tgbw+lp52T6p/GJLpDmNvr10UWqLTE=",
              "Replace": null
            },
            {
              "Path": "github.com/emicklei/proto",
              "Version": "v1.6.15",
              "Sum": "h1:XbpwxmuOPrdES97FrSfpyy67SSCV/wBIKXqgJzh6hNw=",
              "Replace": null
            },
            {
              "Path": "github.com/hashicorp/go-version",
              "Version": "v1.2.0",
              "Sum": "h1:3vNe/fWF5CBgRIguda1meWhsZHy3m8gCJ5wx+dIzX/E=",
              "Replace": null
            },
            {
              "Path": "github.com/mpvl/unique",
              "Version": "v0.0.0-20150818121801-cbe035fff7de",
              "Sum": "h1:D5x39vF5KCwKQaw+OC9ZPiLVHXz3UFw2+psEX+gYcto=",
              "Replace": null
            },
            {
              "Path": "github.com/pkg/errors",
              "Version": "v0.8.1",
              "Sum": "h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=",
              "Replace": null
            },
            {
              "Path": "github.com/play-with-go/preguide",
              "Version": "v0.0.2-0.20210430163307-e5ab271ba2e9",
              "Sum": "h1:dpSLI117TKb8MdLknsUYbQjKJpP6jzBYpfKKVszCZNI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/crypto",
              "Version": "v0.0.0-20200622213623-75b288015ac9",
              "Sum": "h1:psW17arqaxU48Z5kZ0CQnkZWQJsqcURM6tKiBApRjXI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/net",
              "Version": "v0.0.0-20201021035429-f5854403a974",
              "Sum": "h1:IX6qOQeG5uLjB/hjjwjedwfjND0hgjPMMyO1RoIXQNI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/text",
              "Version": "v0.3.3",
              "Sum": "h1:cokOdA+Jmi5PJGXLlLllQSgYigAEfHXJAERHVMaCc2k=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/xerrors",
              "Version": "v0.0.0-20200804184101-5ec99f83aff1",
              "Sum": "h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/retry.v1",
              "Version": "v1.0.3",
              "Sum": "h1:a9CArYczAVv6Qs6VGoLMio99GEs7kY9UzSF9+LD+iGs=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/yaml.v3",
              "Version": "v3.0.0-20200121175148-a6ecf24a6d71",
              "Sum": "h1:Xe2gvTZUJpsvOWUnvmL/tmhVBZUmHSvLbMjRj6NUUKo=",
              "Replace": null
            }
          ]
        }
        """
    Variables: ["GITEA_USERNAME", "GITEA_PRIV_KEY", "GITEA_PUB_KEY", "GITEA_KEYSCAN", "PROVERB"]
}]
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go116: {
            Image: "playwithgo/go1.16@sha256:3ae1950433998a2be8c8ce3b1cb6479e6541f1e32443447a24085cfe09e2c391"
        }
    }
}]
Scenarios: [{
    Name:        "go116"
    Description: "Go 1.16"
}]
Networks: ["playwithgo_pwg"]
Env: []
FilenameComment: false
Steps: {
    goversion: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "goversion"
        Order:           0
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go version"
            ExitCode: 0
            Output: """
                go version go1.16 linux/amd64

                """
            ComparisonOutput: """
                go version go1.16 linux/amd64

                """
        }]
    }
    proverb_create: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "proverb_create"
        Order:           1
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir /home/gopher/proverb"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd /home/gopher/proverb"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git init -q"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git remote add origin https://{{{.PROVERB}}}.git"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "go mod init {{{.PROVERB}}}"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module {{{.PROVERB}}}

                """
            ComparisonOutput: """
                go: creating new go.mod: module {{{.PROVERB}}}

                """
        }]
    }
    proverb_go_initial: {
        StepType: 2
        Name:     "proverb_go_initial"
        Order:    2
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package proverb

            // Go returns a Go proverb
            func Go() string {
            \treturn "Don't communicate by sharing memory, share memory by communicating."
            }

            """
        Target: "/home/gopher/proverb/proverb.go"
    }
    proverb_initial_commit: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "proverb_initial_commit"
        Order:           3
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git add -A"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m \"Initial commit\""
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    proverb_check_initial_porcelain: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "proverb_check_initial_porcelain"
        Order:           4
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    proverb_tag_v010: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "proverb_tag_v010"
        Order:           5
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git tag v0.1.0"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin v0.1.0"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    gopher_create: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_create"
        Order:           6
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir /home/gopher/gopher"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd /home/gopher/gopher"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "go mod init gopher"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module gopher

                """
            ComparisonOutput: """
                go: creating new go.mod: module gopher

                """
        }]
    }
    gopher_go_initial: {
        StepType: 2
        Name:     "gopher_go_initial"
        Order:    7
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import (
            \t"fmt"

            \t"{{{.PROVERB}}}"
            )

            func main() {
            \tfmt.Println(proverb.Go())
            }

            """
        Target: "/home/gopher/gopher/gopher.go"
    }
    gopher_add_dep_proverb_v010: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_add_dep_proverb_v010"
        Order:           8
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go get {{{.PROVERB}}}@v0.1.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.PROVERB}}} v0.1.0
                go get: added {{{.PROVERB}}} v0.1.0

                """
            ComparisonOutput: """

                go get: added {{{.PROVERB}}} v0.1.0
                go: downloading {{{.PROVERB}}} v0.1.0
                """
        }]
    }
    gopher_run_initial: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_run_initial"
        Order:           9
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                Don't communicate by sharing memory, share memory by communicating.

                """
            ComparisonOutput: """
                Don't communicate by sharing memory, share memory by communicating.

                """
        }]
    }
    proverb_cd_concurrency_change: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "proverb_cd_concurrency_change"
        Order:           10
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/proverb"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    proverb_go_concurrency: {
        StepType: 2
        Name:     "proverb_go_concurrency"
        Order:    11
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package proverb

                // Go returns a Go proverb
                func Go() string {
                \treturn "Don't communicate by sharing memory, share memory by communicating."
                }

                """
        }
        Source: """
            package proverb

            // Go returns a Go proverb
            func Go() string {
            \treturn "Concurrency is parallelism."
            }

            """
        Target: "/home/gopher/proverb/proverb.go"
    }
    proverb_concurrency_commit: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "proverb_concurrency_commit"
        Order:           12
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git add -A"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m \"Switch Go proverb to something more famous\""
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    proverb_check_concurrency_porcelain: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "proverb_check_concurrency_porcelain"
        Order:           13
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    proverb_tag_v020: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "proverb_tag_v020"
        Order:           14
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git tag v0.2.0"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin v0.2.0"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    gopher_use_v020: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_use_v020"
        Order:           15
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/gopher"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "go get {{{.PROVERB}}}@v0.2.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.PROVERB}}} v0.2.0
                go get: upgraded {{{.PROVERB}}} v0.1.0 => v0.2.0

                """
            ComparisonOutput: """

                go get: upgraded {{{.PROVERB}}} v0.1.0 => v0.2.0
                go: downloading {{{.PROVERB}}} v0.2.0
                """
        }, {
            Negated:  false
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                Concurrency is parallelism.

                """
            ComparisonOutput: """
                Concurrency is parallelism.

                """
        }]
    }
    proverb_return_to_retract_v020: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "proverb_return_to_retract_v020"
        Order:           16
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/proverb"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    proverb_retract_v020: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "proverb_retract_v020"
        Order:           17
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "go mod edit -retract=v0.2.0"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    proverb_cat_v020_retract: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "proverb_cat_v020_retract"
        Order:           18
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "cat go.mod"
            ExitCode: 0
            Output: """
                module {{{.PROVERB}}}

                go 1.16

                retract v0.2.0

                """
            ComparisonOutput: """
                module {{{.PROVERB}}}

                go 1.16

                retract v0.2.0

                """
        }]
    }
    proverb_comment_retraction: {
        StepType: 2
        Name:     "proverb_comment_retraction"
        Order:    19
        Terminal: "term1"
        Language: "go.mod"
        Renderer: {
            RendererType: 1
        }
        Source: """
            module {{{.PROVERB}}}

            go 1.16

            // Go proverb was totally wrong
            retract v0.2.0

            """
        Target: "/home/gopher/proverb/go.mod"
    }
    proverb_go_fix_concurrency_bug: {
        StepType: 2
        Name:     "proverb_go_fix_concurrency_bug"
        Order:    20
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package proverb

                // Go returns a Go proverb
                func Go() string {
                \treturn "Concurrency is parallelism."
                }

                """
        }
        Source: """
            package proverb

            // Go returns a Go proverb
            func Go() string {
            \treturn "Concurrency is not parallelism."
            }

            """
        Target: "/home/gopher/proverb/proverb.go"
    }
    proverb_tag_v030: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "proverb_tag_v030"
        Order:           21
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git add -A"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m \"Fix severe error in Go proverb\""
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }, {
            Negated:          false
            CmdStr:           "git tag v0.3.0"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin v0.3.0"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    proverb_check_v030_porcelain: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "proverb_check_v030_porcelain"
        Order:           22
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    gopher_use_v030: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_use_v030"
        Order:           23
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/gopher"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "go get {{{.PROVERB}}}@v0.3.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.PROVERB}}} v0.3.0
                go get: upgraded {{{.PROVERB}}} v0.2.0 => v0.3.0

                """
            ComparisonOutput: """

                go get: upgraded {{{.PROVERB}}} v0.2.0 => v0.3.0
                go: downloading {{{.PROVERB}}} v0.3.0
                """
        }]
    }
    gopher_run_v030: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_run_v030"
        Order:           24
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                Concurrency is not parallelism.

                """
            ComparisonOutput: """
                Concurrency is not parallelism.

                """
        }]
    }
    gopher_sleep_on_proxy: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_sleep_on_proxy"
        Order:           25
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "sleep 1m"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    gopher_list_proverb: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_list_proverb"
        Order:           26
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go list -m -versions {{{.PROVERB}}}"
            ExitCode: 0
            Output: """
                {{{.PROVERB}}} v0.1.0 v0.3.0

                """
            ComparisonOutput: """
                {{{.PROVERB}}} v0.1.0 v0.3.0

                """
        }]
    }
    gopher_list_proverb_retracted: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_list_proverb_retracted"
        Order:           27
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go list -m -versions -retracted {{{.PROVERB}}}"
            ExitCode: 0
            Output: """
                {{{.PROVERB}}} v0.1.0 v0.2.0 v0.3.0

                """
            ComparisonOutput: """
                {{{.PROVERB}}} v0.1.0 v0.2.0 v0.3.0

                """
        }]
    }
    gopher_use_retracted_v020: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_use_retracted_v020"
        Order:           28
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go get {{{.PROVERB}}}@v0.2.0"
            ExitCode: 0
            Output: """
                go: warning: {{{.PROVERB}}}@v0.2.0: retracted by module author: Go proverb was totally wrong
                go: to switch to the latest unretracted version, run:
                \tgo get {{{.PROVERB}}}@latestgo get: downgraded {{{.PROVERB}}} v0.3.0 => v0.2.0

                """
            ComparisonOutput: """

                \tgo get {{{.PROVERB}}}@latestgo get: downgraded {{{.PROVERB}}} v0.3.0 => v0.2.0
                go: to switch to the latest unretracted version, run:
                go: warning: {{{.PROVERB}}}@v0.2.0: retracted by module author: Go proverb was totally wrong
                """
        }]
    }
    gopher_run_retracted_v020: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_run_retracted_v020"
        Order:           29
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                Concurrency is parallelism.

                """
            ComparisonOutput: """
                Concurrency is parallelism.

                """
        }]
    }
    gopher_list_versions: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_list_versions"
        Order:           30
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go list -m -u all"
            ExitCode: 0
            Output: """
                gopher
                {{{.PROVERB}}} v0.2.0 (retracted) [v0.3.0]

                """
            ComparisonOutput: """
                gopher
                {{{.PROVERB}}} v0.2.0 (retracted) [v0.3.0]

                """
        }]
    }
    gopher_use_latest_unretracted: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_use_latest_unretracted"
        Order:           31
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go get {{{.PROVERB}}}@latest"
            ExitCode: 0
            Output: """
                go get: upgraded {{{.PROVERB}}} v0.2.0 => v0.3.0

                """
            ComparisonOutput: """

                go get: upgraded {{{.PROVERB}}} v0.2.0 => v0.3.0
                """
        }]
    }
    proverb_return_life: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "proverb_return_life"
        Order:           32
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/proverb"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    proverb_go_life_advice: {
        StepType: 2
        Name:     "proverb_go_life_advice"
        Order:    33
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package proverb

                // Go returns a Go proverb
                func Go() string {
                \treturn "Concurrency is not parallelism."
                }

                """
        }
        Source: """
            package proverb

            // Go returns a Go proverb
            func Go() string {
            \treturn "Concurrency is not parallelism."
            }

            // Life returns a proverb useful for day-to-day living
            func Life() string {
            \treturn "A bird in the hand is worth two in the bush."
            }

            """
        Target: "/home/gopher/proverb/proverb.go"
    }
    proverb_life_commit: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "proverb_life_commit"
        Order:           34
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git add -A"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m \"Add Life() proverb\""
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    proverb_check_v100_porcelain: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "proverb_check_v100_porcelain"
        Order:           35
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    proverb_tag_v100: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "proverb_tag_v100"
        Order:           36
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git tag v1.0.0"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin v1.0.0"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    proverb_tag_v040: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "proverb_tag_v040"
        Order:           37
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git tag v0.4.0"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin v0.4.0"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    proverb_retract_v100: {
        StepType: 2
        Name:     "proverb_retract_v100"
        Order:    38
        Terminal: "term1"
        Language: "go.mod"
        Renderer: {
            RendererType: 3
            Pre: """
                module {{{.PROVERB}}}

                go 1.16

                // Go proverb was totally wrong
                retract v0.2.0

                """
        }
        Source: """
            module {{{.PROVERB}}}

            go 1.16

            retract (
            \t// Go proverb was totally wrong
            \tv0.2.0

            \t// Published v1 too early
            \t[v1.0.0, v1.0.1]
            )

            """
        Target: "/home/gopher/proverb/go.mod"
    }
    proverb_tag_v101: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "proverb_tag_v101"
        Order:           39
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git add -A"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m \"Retract [v1.0.0, v1.0.1]\""
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }, {
            Negated:          false
            CmdStr:           "git tag v1.0.1"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin v1.0.1"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    proverb_check_v101_porcelain: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "proverb_check_v101_porcelain"
        Order:           40
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    gopher_cd_use_v100: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_cd_use_v100"
        Order:           41
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/gopher"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    temp_get_v101: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "temp_get_v101"
        Order:           42
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "(cd $(mktemp -d); export GOPATH=$(mktemp -d); go mod init mod.com; go get -x {{{.PROVERB}}}@v0.4.0; go get -x {{{.PROVERB}}}@v1.0.0; go get -x {{{.PROVERB}}}@v1.0.1; sleep 1m) >/dev/null 2>&1"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    gopher_use_v101: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_use_v101"
        Order:           43
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go get {{{.PROVERB}}}@v1.0.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.PROVERB}}} v1.0.0
                go: warning: {{{.PROVERB}}}@v1.0.0: retracted by module author: Published v1 too early
                go: to switch to the latest unretracted version, run:
                \tgo get {{{.PROVERB}}}@latestgo get: upgraded {{{.PROVERB}}} v0.3.0 => v1.0.0

                """
            ComparisonOutput: """

                \tgo get {{{.PROVERB}}}@latestgo get: upgraded {{{.PROVERB}}} v0.3.0 => v1.0.0
                go: downloading {{{.PROVERB}}} v1.0.0
                go: to switch to the latest unretracted version, run:
                go: warning: {{{.PROVERB}}}@v1.0.0: retracted by module author: Published v1 too early
                """
        }, {
            Negated:  false
            CmdStr:   "go get {{{.PROVERB}}}@v1.0.1"
            ExitCode: 0
            Output: """
                go: downloading {{{.PROVERB}}} v1.0.1
                go: warning: {{{.PROVERB}}}@v1.0.1: retracted by module author: Published v1 too early
                go: to switch to the latest unretracted version, run:
                \tgo get {{{.PROVERB}}}@latestgo get: upgraded {{{.PROVERB}}} v1.0.0 => v1.0.1

                """
            ComparisonOutput: """

                \tgo get {{{.PROVERB}}}@latestgo get: upgraded {{{.PROVERB}}} v1.0.0 => v1.0.1
                go: downloading {{{.PROVERB}}} v1.0.1
                go: to switch to the latest unretracted version, run:
                go: warning: {{{.PROVERB}}}@v1.0.1: retracted by module author: Published v1 too early
                """
        }, {
            Negated:  false
            CmdStr:   "go get {{{.PROVERB}}}@v0.4.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.PROVERB}}} v0.4.0
                go get: downgraded {{{.PROVERB}}} v1.0.1 => v0.4.0

                """
            ComparisonOutput: """

                go get: downgraded {{{.PROVERB}}} v1.0.1 => v0.4.0
                go: downloading {{{.PROVERB}}} v0.4.0
                """
        }]
    }
    gopher_sleep_on_proxy_again: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_sleep_on_proxy_again"
        Order:           44
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "sleep 1m"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    gopher_list_proverb_v101_retracted: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_list_proverb_v101_retracted"
        Order:           45
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go list -m -versions -retracted {{{.PROVERB}}}"
            ExitCode: 0
            Output: """
                {{{.PROVERB}}} v0.1.0 v0.2.0 v0.3.0 v0.4.0 v1.0.0 v1.0.1

                """
            ComparisonOutput: """
                {{{.PROVERB}}} v0.1.0 v0.2.0 v0.3.0 v0.4.0 v1.0.0 v1.0.1

                """
        }]
    }
    gopher_list_proverb_v101_nonretracted: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_list_proverb_v101_nonretracted"
        Order:           46
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go list -m -versions {{{.PROVERB}}}"
            ExitCode: 0
            Output: """
                {{{.PROVERB}}} v0.1.0 v0.3.0 v0.4.0

                """
            ComparisonOutput: """
                {{{.PROVERB}}} v0.1.0 v0.3.0 v0.4.0

                """
        }]
    }
    gopher_go_update_life_proverb: {
        StepType: 2
        Name:     "gopher_go_update_life_proverb"
        Order:    47
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import (
                \t"fmt"

                \t"{{{.PROVERB}}}"
                )

                func main() {
                \tfmt.Println(proverb.Go())
                }

                """
        }
        Source: """
            package main

            import (
            \t"fmt"

            \t"{{{.PROVERB}}}"
            )

            func main() {
            \tfmt.Printf("Go proverb: %v\\n", proverb.Go())
            \tfmt.Printf("Life advice: %v\\n", proverb.Life())
            }

            """
        Target: "/home/gopher/gopher/gopher.go"
    }
    gopher_run_life_proverb: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_run_life_proverb"
        Order:           48
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                Go proverb: Concurrency is not parallelism.
                Life advice: A bird in the hand is worth two in the bush.

                """
            ComparisonOutput: """
                Go proverb: Concurrency is not parallelism.
                Life advice: A bird in the hand is worth two in the bush.

                """
        }]
    }
}
Hash: "68e5331fc3739dfadefe321096e50621ed3f505e11283a4599597c9033a9b384"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Defs: {
    mkcert:         "mkcert"
    mkcert_pkg:     "filippo.io/mkcert"
    mkcert_version: "v1.4.2"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    mktemp: "mktemp -d"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go116: {
        Name:        string
        Description: "Go 1.16"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go116: {
                Image: "playwithgo/go1.16@sha256:3ae1950433998a2be8c8ce3b1cb6479e6541f1e32443447a24085cfe09e2c391"
            }
        }
    }
}
Steps: {
    goversion: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go version"
        InformationOnly: false
        Terminal:        string
    }
    go115_mkcert_get: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go get filippo.io/mkcert@v1.4.2"
        InformationOnly: false
        Terminal:        string
    }
    go115_mkcert_modules_get: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "(cd $(mktemp -d); GO111MODULE=on go get filippo.io/mkcert@v1.4.2)"
        InformationOnly: false
        Terminal:        string
    }
    go116_mkcert_install: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go install filippo.io/mkcert@v1.4.2"
        InformationOnly: false
        Terminal:        string
    }
    which_mkcert: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "which mkcert"
        InformationOnly: false
        Terminal:        string
    }
    run_mkcert: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "mkcert -version"
        InformationOnly: false
        Terminal:        string
    }
    goversion_mkcert: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go version -m $(which mkcert)"
        InformationOnly: false
        Terminal:        string
    }
}
// ---
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go116: {
            Image: "playwithgo/go1.16@sha256:3ae1950433998a2be8c8ce3b1cb6479e6541f1e32443447a24085cfe09e2c391"
        }
    }
}]
Scenarios: [{
    Name:        "go116"
    Description: "Go 1.16"
}]
Networks: ["playwithgo_pwg"]
Env: []
FilenameComment: false
Steps: {
    goversion: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "goversion"
        Order:           0
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go version"
            ExitCode: 0
            Output: """
                go version go1.16 linux/amd64

                """
            ComparisonOutput: """
                go version go1.16 linux/amd64

                """
        }]
    }
    go115_mkcert_get: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go115_mkcert_get"
        Order:           1
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go get filippo.io/mkcert@v1.4.2"
            ExitCode: 0
            Output: """
                go: downloading filippo.io/mkcert v1.4.2
                go: downloading golang.org/x/net v0.0.0-20190620200207-3b0461eec859
                go: downloading golang.org/x/tools v0.0.0-20191108193012-7d206e10da11
                go: downloading honnef.co/go/tools v0.0.0-20191107024926-a9480a3ec3bc
                go: downloading howett.net/plist v0.0.0-20181124034731-591f970eefbb
                go: downloading software.sslmate.com/src/go-pkcs12 v0.0.0-20180114231543-2291e8f0f237
                go: downloading golang.org/x/text v0.3.0
                go: downloading github.com/BurntSushi/toml v0.3.1

                """
            ComparisonOutput: """

                go: downloading filippo.io/mkcert v1.4.2
                go: downloading github.com/BurntSushi/toml v0.3.1
                go: downloading golang.org/x/net v0.0.0-20190620200207-3b0461eec859
                go: downloading golang.org/x/text v0.3.0
                go: downloading golang.org/x/tools v0.0.0-20191108193012-7d206e10da11
                go: downloading honnef.co/go/tools v0.0.0-20191107024926-a9480a3ec3bc
                go: downloading howett.net/plist v0.0.0-20181124034731-591f970eefbb
                go: downloading software.sslmate.com/src/go-pkcs12 v0.0.0-20180114231543-2291e8f0f237
                """
        }]
    }
    go115_mkcert_modules_get: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go115_mkcert_modules_get"
        Order:           2
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "(cd $(mktemp -d); GO111MODULE=on go get filippo.io/mkcert@v1.4.2)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    go116_mkcert_install: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go116_mkcert_install"
        Order:           3
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "go install filippo.io/mkcert@v1.4.2"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    which_mkcert: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "which_mkcert"
        Order:           4
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "which mkcert"
            ExitCode: 0
            Output: """
                /home/gopher/go/bin/mkcert

                """
            ComparisonOutput: """
                /home/gopher/go/bin/mkcert

                """
        }]
    }
    run_mkcert: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "run_mkcert"
        Order:           5
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "mkcert -version"
            ExitCode: 0
            Output: """
                v1.4.2

                """
            ComparisonOutput: """
                v1.4.2

                """
        }]
    }
    goversion_mkcert: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "goversion_mkcert"
        Order:           6
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go version -m $(which mkcert)"
            ExitCode: 0
            Output: """
                /home/gopher/go/bin/mkcert: go1.16
                \tpath\tfilippo.io/mkcert
                \tmod\tfilippo.io/mkcert\tv1.4.2\th1:7mWofpFS4gzQS5bhE3KYBwzfceIPy2KJ4tMT31aPNeY=
                \tdep\tgolang.org/x/net\tv0.0.0-20190620200207-3b0461eec859\th1:R/3boaszxrf1GEUWTVDzSKVwLmSJpwZ1yqXm8j0v2QI=
                \tdep\tgolang.org/x/text\tv0.3.0\th1:g61tztE5qeGQ89tm6NTjjM9VPIm088od1l6aSorWRWg=
                \tdep\tsoftware.sslmate.com/src/go-pkcs12\tv0.0.0-20180114231543-2291e8f0f237\th1:iAEkCBPbRaflBgZ7o9gjVUuWuvWeV4sytFWg9o+Pj2k=

                """
            ComparisonOutput: """
                /home/gopher/go/bin/mkcert: go1.16
                \tpath\tfilippo.io/mkcert
                \tmod\tfilippo.io/mkcert\tv1.4.2\th1:7mWofpFS4gzQS5bhE3KYBwzfceIPy2KJ4tMT31aPNeY=
                \tdep\tgolang.org/x/net\tv0.0.0-20190620200207-3b0461eec859\th1:R/3boaszxrf1GEUWTVDzSKVwLmSJpwZ1yqXm8j0v2QI=
                \tdep\tgolang.org/x/text\tv0.3.0\th1:g61tztE5qeGQ89tm6NTjjM9VPIm088od1l6aSorWRWg=
                \tdep\tsoftware.sslmate.com/src/go-pkcs12\tv0.0.0-20180114231543-2291e8f0f237\th1:iAEkCBPbRaflBgZ7o9gjVUuWuvWeV4sytFWg9o+Pj2k=

                """
        }]
    }
}
Hash: "6b6b2d56d82151cb7db9bb0530183297e510ea22b22ab7eca3946b502d6d3327"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Defs: {
    staticcheck_version:      "v0.0.1-2020.1.6"
    staticcheck_conf:         "staticcheck.conf"
    staticcheck_st1000:       "ST1000"
    staticcheck_sa4018:       "SA4018"
    staticcheck_sa5009:       "SA5009"
    staticcheck_explain_flag: "-explain"
    pets:                     "pets"
    pets_dir:                 "/home/gopher/pets"
    pets_go:                  "pets.go"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    pets_mod: "pets"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go115: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }
}
Steps: {
    goversion: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go version"
        InformationOnly: false
        Terminal:        string
    }
    staticcheck_install: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "(cd $(mktemp -d); GO111MODULE=on go get honnef.co/go/tools/cmd/staticcheck@v0.0.1-2020.1.6)"
        InformationOnly: false
        Terminal:        string
    }
    staticcheck_check_on_path: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "which staticcheck"
        InformationOnly: false
        Terminal:        string
    }
    staticcheck_version: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "staticcheck -version"
        InformationOnly: false
        Terminal:        string
    }
    pets_init: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir /home/gopher/pets
            cd /home/gopher/pets
            go mod init pets
            """
        InformationOnly: false
        Terminal:        string
    }
    pets_go_initial: {
        Target:   "/home/gopher/pets/pets.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package pets

            import (
            \t"errors"
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n")
            \tdefault:
            \t\treturn errors.New(fmt.Sprintf("Cannot take %v for a walk", p.Name))
            \t}
            \treturn nil
            }

            func (self Pet) String() string {
            \treturn fmt.Sprintf("%s", self.Name)
            }

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    pets_build_initial: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go build"
        InformationOnly: false
        Terminal:        string
    }
    pets_staticcheck_initial: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "! staticcheck ."
        InformationOnly: false
        Terminal:        string
    }
    staticcheck_explain: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "staticcheck -explain SA5009"
        InformationOnly: false
        Terminal:        string
    }
    pets_go_fixed: {
        Target:   "/home/gopher/pets/pets.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package pets

                import (
                \t"errors"
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n")
                \tdefault:
                \t\treturn errors.New(fmt.Sprintf("Cannot take %v for a walk", p.Name))
                \t}
                \treturn nil
                }

                func (self Pet) String() string {
                \treturn fmt.Sprintf("%s", self.Name)
                }

                """
        }
        Terminal: string
    }
    pets_staticcheck_fixed: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "staticcheck ."
        InformationOnly: false
        Terminal:        string
    }
    staticcheck_config_initial: {
        Target:   "/home/gopher/pets/staticcheck.conf"
        Name:     string
        StepType: 3
        Language: "toml"
        Source: """
            checks = ["inherit", "ST1000"]

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    pets_staticcheck_st1000_enabled: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "! staticcheck ."
        InformationOnly: false
        Terminal:        string
    }
    pets_go_with_package_comment: {
        Target:   "/home/gopher/pets/pets.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                package pets

                import (
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Terminal: string
    }
    pets_staticcheck_st1000_fixed: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "staticcheck ."
        InformationOnly: false
        Terminal:        string
    }
    pets_go_feed: {
        Target:   "/home/gopher/pets/pets.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) Feed(food string) {
            \tfood = food
            \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                // Package pets contains useful functionality for pet owners
                package pets

                import (
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Terminal: string
    }
    pets_staticcheck_check_feed: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "! staticcheck ."
        InformationOnly: false
        Terminal:        string
    }
    pets_go_ignore_sa4018: {
        Target:   "/home/gopher/pets/pets.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) Feed(food string) {
            \t//lint:ignore SA4018 trying out line-based linter directives
            \tfood = food
            \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                // Package pets contains useful functionality for pet owners
                package pets

                import (
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) Feed(food string) {
                \tfood = food
                \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Terminal: string
    }
    pets_staticcheck_check_sa4018_ignored: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "staticcheck ."
        InformationOnly: false
        Terminal:        string
    }
    pets_go_file_ignore_sa4018: {
        Target:   "/home/gopher/pets/pets.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            //lint:file-ignore SA4018 trying out file-based linter directives

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) Feed(food string) {
            \tfood = food
            \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                // Package pets contains useful functionality for pet owners
                package pets

                import (
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) Feed(food string) {
                \t//lint:ignore SA4018 trying out line-based linter directives
                \tfood = food
                \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Terminal: string
    }
    pets_staticcheck_check_sa4018_still_ignored: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "staticcheck ."
        InformationOnly: false
        Terminal:        string
    }
    pets_go_final: {
        Target:   "/home/gopher/pets/pets.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) Feed(food string) {
            \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Renderer: {
            RendererType: 3
            Pre: """
                // Package pets contains useful functionality for pet owners
                package pets

                import (
                \t"fmt"
                )

                //lint:file-ignore SA4018 trying out file-based linter directives

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) Feed(food string) {
                \tfood = food
                \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Terminal: string
    }
    pets_staticcheck_final: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "staticcheck ."
        InformationOnly: false
        Terminal:        string
    }
}
// ---
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go115: {
            Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
        }
    }
}]
Scenarios: [{
    Name:        "go115"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
FilenameComment: false
Steps: {
    goversion: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "goversion"
        Order:           0
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go version"
            ExitCode: 0
            Output: """
                go version go1.15.8 linux/amd64

                """
            ComparisonOutput: """
                go version go1.15.8 linux/amd64

                """
        }]
    }
    staticcheck_install: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "staticcheck_install"
        Order:           1
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "(cd $(mktemp -d); GO111MODULE=on go get honnef.co/go/tools/cmd/staticcheck@v0.0.1-2020.1.6)"
            ExitCode: 0
            Output: """
                go: downloading honnef.co/go/tools v0.0.1-2020.1.6
                go: found honnef.co/go/tools/cmd/staticcheck in honnef.co/go/tools v0.0.1-2020.1.6
                go: downloading golang.org/x/tools v0.0.0-20200410194907-79a7a3126eef
                go: downloading github.com/BurntSushi/toml v0.3.1
                go: downloading golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543

                """
            ComparisonOutput: """

                go: downloading github.com/BurntSushi/toml v0.3.1
                go: downloading golang.org/x/tools v0.0.0-20200410194907-79a7a3126eef
                go: downloading golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543
                go: downloading honnef.co/go/tools v0.0.1-2020.1.6
                go: found honnef.co/go/tools/cmd/staticcheck in honnef.co/go/tools v0.0.1-2020.1.6
                """
        }]
    }
    staticcheck_check_on_path: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "staticcheck_check_on_path"
        Order:           2
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "which staticcheck"
            ExitCode: 0
            Output: """
                /home/gopher/go/bin/staticcheck

                """
            ComparisonOutput: """
                /home/gopher/go/bin/staticcheck

                """
        }]
    }
    staticcheck_version: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "staticcheck_version"
        Order:           3
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "staticcheck -version"
            ExitCode: 0
            Output: """
                staticcheck 2020.1.6

                """
            ComparisonOutput: """
                staticcheck 2020.1.6

                """
        }]
    }
    pets_init: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "pets_init"
        Order:           4
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir /home/gopher/pets"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd /home/gopher/pets"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "go mod init pets"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module pets

                """
            ComparisonOutput: """
                go: creating new go.mod: module pets

                """
        }]
    }
    pets_go_initial: {
        StepType: 2
        Name:     "pets_go_initial"
        Order:    5
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package pets

            import (
            \t"errors"
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n")
            \tdefault:
            \t\treturn errors.New(fmt.Sprintf("Cannot take %v for a walk", p.Name))
            \t}
            \treturn nil
            }

            func (self Pet) String() string {
            \treturn fmt.Sprintf("%s", self.Name)
            }

            """
        Target: "/home/gopher/pets/pets.go"
    }
    pets_build_initial: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "pets_build_initial"
        Order:           6
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "go build"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    pets_staticcheck_initial: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "pets_staticcheck_initial"
        Order:           7
        Terminal:        "term1"
        Stmts: [{
            Negated:  true
            CmdStr:   "staticcheck ."
            ExitCode: 1
            Output: """
                pets.go:23:14: Printf format %v reads arg #1, but call has only 0 args (SA5009)
                pets.go:25:10: should use fmt.Errorf(...) instead of errors.New(fmt.Sprintf(...)) (S1028)
                pets.go:30:7: receiver name should be a reflection of its identity; don't use generic names such as "this" or "self" (ST1006)
                pets.go:31:9: the argument is already a string, there's no need to use fmt.Sprintf (S1025)

                """
            ComparisonOutput: """
                pets.go:23:14: Printf format %v reads arg #1, but call has only 0 args (SA5009)
                pets.go:25:10: should use fmt.Errorf(...) instead of errors.New(fmt.Sprintf(...)) (S1028)
                pets.go:30:7: receiver name should be a reflection of its identity; don't use generic names such as "this" or "self" (ST1006)
                pets.go:31:9: the argument is already a string, there's no need to use fmt.Sprintf (S1025)

                """
        }]
    }
    staticcheck_explain: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "staticcheck_explain"
        Order:           8
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "staticcheck -explain SA5009"
            ExitCode: 0
            Output: """
                Invalid Printf call

                Available since
                    2019.2


                """
            ComparisonOutput: """
                Invalid Printf call

                Available since
                    2019.2


                """
        }]
    }
    pets_go_fixed: {
        StepType: 2
        Name:     "pets_go_fixed"
        Order:    9
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package pets

                import (
                \t"errors"
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n")
                \tdefault:
                \t\treturn errors.New(fmt.Sprintf("Cannot take %v for a walk", p.Name))
                \t}
                \treturn nil
                }

                func (self Pet) String() string {
                \treturn fmt.Sprintf("%s", self.Name)
                }

                """
        }
        Source: """
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target: "/home/gopher/pets/pets.go"
    }
    pets_staticcheck_fixed: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "pets_staticcheck_fixed"
        Order:           10
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "staticcheck ."
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    staticcheck_config_initial: {
        StepType: 2
        Name:     "staticcheck_config_initial"
        Order:    11
        Terminal: "term1"
        Language: "toml"
        Renderer: {
            RendererType: 1
        }
        Source: """
            checks = ["inherit", "ST1000"]

            """
        Target: "/home/gopher/pets/staticcheck.conf"
    }
    pets_staticcheck_st1000_enabled: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "pets_staticcheck_st1000_enabled"
        Order:           12
        Terminal:        "term1"
        Stmts: [{
            Negated:  true
            CmdStr:   "staticcheck ."
            ExitCode: 1
            Output: """
                pets.go:1:1: at least one file in a package should have a package comment (ST1000)

                """
            ComparisonOutput: """
                pets.go:1:1: at least one file in a package should have a package comment (ST1000)

                """
        }]
    }
    pets_go_with_package_comment: {
        StepType: 2
        Name:     "pets_go_with_package_comment"
        Order:    13
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package pets

                import (
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target: "/home/gopher/pets/pets.go"
    }
    pets_staticcheck_st1000_fixed: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "pets_staticcheck_st1000_fixed"
        Order:           14
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "staticcheck ."
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    pets_go_feed: {
        StepType: 2
        Name:     "pets_go_feed"
        Order:    15
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                // Package pets contains useful functionality for pet owners
                package pets

                import (
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) Feed(food string) {
            \tfood = food
            \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target: "/home/gopher/pets/pets.go"
    }
    pets_staticcheck_check_feed: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "pets_staticcheck_check_feed"
        Order:           16
        Terminal:        "term1"
        Stmts: [{
            Negated:  true
            CmdStr:   "staticcheck ."
            ExitCode: 1
            Output: """
                pets.go:31:2: self-assignment of food to food (SA4018)

                """
            ComparisonOutput: """
                pets.go:31:2: self-assignment of food to food (SA4018)

                """
        }]
    }
    pets_go_ignore_sa4018: {
        StepType: 2
        Name:     "pets_go_ignore_sa4018"
        Order:    17
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                // Package pets contains useful functionality for pet owners
                package pets

                import (
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) Feed(food string) {
                \tfood = food
                \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) Feed(food string) {
            \t//lint:ignore SA4018 trying out line-based linter directives
            \tfood = food
            \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target: "/home/gopher/pets/pets.go"
    }
    pets_staticcheck_check_sa4018_ignored: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "pets_staticcheck_check_sa4018_ignored"
        Order:           18
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "staticcheck ."
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    pets_go_file_ignore_sa4018: {
        StepType: 2
        Name:     "pets_go_file_ignore_sa4018"
        Order:    19
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                // Package pets contains useful functionality for pet owners
                package pets

                import (
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) Feed(food string) {
                \t//lint:ignore SA4018 trying out line-based linter directives
                \tfood = food
                \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            //lint:file-ignore SA4018 trying out file-based linter directives

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) Feed(food string) {
            \tfood = food
            \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target: "/home/gopher/pets/pets.go"
    }
    pets_staticcheck_check_sa4018_still_ignored: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "pets_staticcheck_check_sa4018_still_ignored"
        Order:           20
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "staticcheck ."
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    pets_go_final: {
        StepType: 2
        Name:     "pets_go_final"
        Order:    21
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                // Package pets contains useful functionality for pet owners
                package pets

                import (
                \t"fmt"
                )

                //lint:file-ignore SA4018 trying out file-based linter directives

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) Feed(food string) {
                \tfood = food
                \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) Feed(food string) {
            \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target: "/home/gopher/pets/pets.go"
    }
    pets_staticcheck_final: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "pets_staticcheck_final"
        Order:           22
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "staticcheck ."
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
}
Hash: "21ac90d602934c8e400f7aebfea65b8d6c78304d7d573ddd6184ad456e477788"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Var:     "PUBLIC"
            Pattern: "public"
            Private: false
        }, {
            Var:     "PRIVATE"
            Pattern: "private"
            Private: true
        }]
    }
}]
Defs: {
    public:         "public"
    public_vcs:     "https://{{{.PUBLIC}}}.git"
    public_mod:     "{{{.PUBLIC}}}"
    public_dir:     "/home/gopher/public"
    public_go:      "public.go"
    public_message: "Message()"
    private:        "private"
    private_vcs:    "https://{{{.PRIVATE}}}.git"
    private_mod:    "{{{.PRIVATE}}}"
    private_dir:    "/home/gopher/private"
    private_go:     "private.go"
    private_secret: "Secret()"
    gopher:         "gopher"
    gopher_vcs:     "https://gopher.git"
    gopher_mod:     "gopher"
    gopher_dir:     "/home/gopher/gopher"
    gopher_go:      "gopher.go"
    go_help_env:    "go help env"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    go_help_modprivate: "go help module-private"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go115: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }
}
Steps: {
    goversion: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go version"
        InformationOnly: false
        Terminal:        string
    }
    public_init: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir /home/gopher/public
            cd /home/gopher/public
            go mod init {{{.PUBLIC}}}
            git init -q
            git remote add origin https://{{{.PUBLIC}}}.git
            """
        InformationOnly: false
        Terminal:        string
    }
    public_go_initial: {
        Target:   "/home/gopher/public/public.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package public

            func Message() string {
            \treturn "This is a public safety announcement!"
            }

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    public_initial_commit: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git add public.go go.mod
            git commit -q -m 'Initial commit of public module'
            git push -q origin main
            """
        InformationOnly: false
        Terminal:        string
    }
    public_check_initial_porcelain: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    private_init: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir /home/gopher/private
            cd /home/gopher/private
            go mod init {{{.PRIVATE}}}
            git init -q
            git remote add origin https://{{{.PRIVATE}}}.git
            """
        InformationOnly: false
        Terminal:        string
    }
    private_go_initial: {
        Target:   "/home/gopher/private/private.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package private

            func Secret() string {
            \treturn "This is a top secret message... for your eyes only"
            }

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    private_initial_commit: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git add private.go go.mod
            git commit -q -m 'Initial commit of private module'
            git push -q origin main
            """
        InformationOnly: false
        Terminal:        string
    }
    private_check_initial_porcelain: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    gopher_init: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir /home/gopher/gopher
            cd /home/gopher/gopher
            go mod init gopher
            """
        InformationOnly: false
        Terminal:        string
    }
    gopher_go_initial: {
        Target:   "/home/gopher/gopher/gopher.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t"fmt"

            \t"{{{.PUBLIC}}}"
            \t"{{{.PRIVATE}}}"
            )

            func main() {
            \tfmt.Printf("public.Message(): %v\\n", public.Message())
            \tfmt.Printf("private.Secret(): %v\\n", private.Secret())
            }

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    go_env_check_goproxy: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go env GOPROXY"
        InformationOnly: false
        Terminal:        string
    }
    go_env_check_gosumdb: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go env GOSUMDB"
        InformationOnly: false
        Terminal:        string
    }
    go_env_check: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go help env"
        InformationOnly: true
        Terminal:        string
    }
    goproxy_proxy_only: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go env -w GOPROXY=https://proxy.golang.org"
        InformationOnly: false
        Terminal:        string
    }
    gopher_get_public_initial: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          " go get {{{.PUBLIC}}}"
        InformationOnly: false
        Terminal:        string
    }
    public_pseudo_version: {
        Name:            string
        StepType:        1
        Source:          "go list -m -f {{.Version}} {{{.PUBLIC}}}"
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Terminal:        string
    }
    gopher_get_private_initial: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "! go get {{{.PRIVATE}}}"
        InformationOnly: false
        Terminal:        string
    }
    goproxy_proxy_default: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go env -w GOPROXY="
        InformationOnly: false
        Terminal:        string
    }
    gopher_get_private_direct: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "! go get {{{.PRIVATE}}}"
        InformationOnly: false
        Terminal:        string
    }
    go_help_modprivate: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go help module-private"
        InformationOnly: true
        Terminal:        string
    }
    goprivate_set_private: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go env -w GOPRIVATE={{{.PRIVATE}}}"
        InformationOnly: false
        Terminal:        string
    }
    gopher_get_private_goprivate: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go get {{{.PRIVATE}}}"
        InformationOnly: false
        Terminal:        string
    }
    private_pseudo_version: {
        Name:            string
        StepType:        1
        Source:          "go list -m -f {{.Version}} {{{.PRIVATE}}}"
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Terminal:        string
    }
    gopher_run: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go run ."
        InformationOnly: false
        Terminal:        string
    }
}
// ---
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Pattern: "public"
            Private: false
            Var:     "PUBLIC"
        }, {
            Pattern: "private"
            Private: true
            Var:     "PRIVATE"
        }]
    }
    Version: """
        {
          "Path": "github.com/play-with-go/gitea/cmd/gitea",
          "Main": {
            "Path": "github.com/play-with-go/gitea",
            "Version": "v0.0.0-20210430163339-b27dc21b6036",
            "Sum": "h1:7wJ+VvtJk2GU9XtFGDeVwO6ohT8l5nu5h9A6YDCec+U=",
            "Replace": null
          },
          "Deps": [
            {
              "Path": "code.gitea.io/sdk/gitea",
              "Version": "v0.13.1",
              "Sum": "h1:Y7bpH2iO6Q0KhhMJfjP/LZ0AmiYITeRQlCD8b0oYqhk=",
              "Replace": null
            },
            {
              "Path": "cuelang.org/go",
              "Version": "v0.3.2",
              "Sum": "h1:/Am5yFDwqnaEi+g942OPM1M4/qtfVSm49wtkQbeh5Z4=",
              "Replace": null
            },
            {
              "Path": "github.com/cockroachdb/apd/v2",
              "Version": "v2.0.1",
              "Sum": "h1:y1Rh3tEU89D+7Tgbw+lp52T6p/GJLpDmNvr10UWqLTE=",
              "Replace": null
            },
            {
              "Path": "github.com/emicklei/proto",
              "Version": "v1.6.15",
              "Sum": "h1:XbpwxmuOPrdES97FrSfpyy67SSCV/wBIKXqgJzh6hNw=",
              "Replace": null
            },
            {
              "Path": "github.com/hashicorp/go-version",
              "Version": "v1.2.0",
              "Sum": "h1:3vNe/fWF5CBgRIguda1meWhsZHy3m8gCJ5wx+dIzX/E=",
              "Replace": null
            },
            {
              "Path": "github.com/mpvl/unique",
              "Version": "v0.0.0-20150818121801-cbe035fff7de",
              "Sum": "h1:D5x39vF5KCwKQaw+OC9ZPiLVHXz3UFw2+psEX+gYcto=",
              "Replace": null
            },
            {
              "Path": "github.com/pkg/errors",
              "Version": "v0.8.1",
              "Sum": "h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=",
              "Replace": null
            },
            {
              "Path": "github.com/play-with-go/preguide",
              "Version": "v0.0.2-0.20210430163307-e5ab271ba2e9",
              "Sum": "h1:dpSLI117TKb8MdLknsUYbQjKJpP6jzBYpfKKVszCZNI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/crypto",
              "Version": "v0.0.0-20200622213623-75b288015ac9",
              "Sum": "h1:psW17arqaxU48Z5kZ0CQnkZWQJsqcURM6tKiBApRjXI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/net",
              "Version": "v0.0.0-20201021035429-f5854403a974",
              "Sum": "h1:IX6qOQeG5uLjB/hjjwjedwfjND0hgjPMMyO1RoIXQNI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/text",
              "Version": "v0.3.3",
              "Sum": "h1:cokOdA+Jmi5PJGXLlLllQSgYigAEfHXJAERHVMaCc2k=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/xerrors",
              "Version": "v0.0.0-20200804184101-5ec99f83aff1",
              "Sum": "h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/retry.v1",
              "Version": "v1.0.3",
              "Sum": "h1:a9CArYczAVv6Qs6VGoLMio99GEs7kY9UzSF9+LD+iGs=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/yaml.v3",
              "Version": "v3.0.0-20200121175148-a6ecf24a6d71",
              "Sum": "h1:Xe2gvTZUJpsvOWUnvmL/tmhVBZUmHSvLbMjRj6NUUKo=",
              "Replace": null
            }
          ]
        }
        """
    Variables: ["GITEA_USERNAME", "GITEA_PRIV_KEY", "GITEA_PUB_KEY", "GITEA_KEYSCAN", "PUBLIC", "PRIVATE"]
}]
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go115: {
            Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
        }
    }
}]
Scenarios: [{
    Name:        "go115"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
FilenameComment: false
Steps: {
    goversion: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "goversion"
        Order:           0
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go version"
            ExitCode: 0
            Output: """
                go version go1.15.8 linux/amd64

                """
            ComparisonOutput: """
                go version go1.15.8 linux/amd64

                """
        }]
    }
    public_init: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "public_init"
        Order:           1
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir /home/gopher/public"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd /home/gopher/public"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "go mod init {{{.PUBLIC}}}"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module {{{.PUBLIC}}}

                """
            ComparisonOutput: """
                go: creating new go.mod: module {{{.PUBLIC}}}

                """
        }, {
            Negated:          false
            CmdStr:           "git init -q"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git remote add origin https://{{{.PUBLIC}}}.git"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    public_go_initial: {
        StepType: 2
        Name:     "public_go_initial"
        Order:    2
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package public

            func Message() string {
            \treturn "This is a public safety announcement!"
            }

            """
        Target: "/home/gopher/public/public.go"
    }
    public_initial_commit: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "public_initial_commit"
        Order:           3
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git add public.go go.mod"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m 'Initial commit of public module'"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    public_check_initial_porcelain: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "public_check_initial_porcelain"
        Order:           4
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    private_init: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "private_init"
        Order:           5
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir /home/gopher/private"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd /home/gopher/private"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "go mod init {{{.PRIVATE}}}"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module {{{.PRIVATE}}}

                """
            ComparisonOutput: """
                go: creating new go.mod: module {{{.PRIVATE}}}

                """
        }, {
            Negated:          false
            CmdStr:           "git init -q"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git remote add origin https://{{{.PRIVATE}}}.git"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    private_go_initial: {
        StepType: 2
        Name:     "private_go_initial"
        Order:    6
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package private

            func Secret() string {
            \treturn "This is a top secret message... for your eyes only"
            }

            """
        Target: "/home/gopher/private/private.go"
    }
    private_initial_commit: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "private_initial_commit"
        Order:           7
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git add private.go go.mod"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m 'Initial commit of private module'"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    private_check_initial_porcelain: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "private_check_initial_porcelain"
        Order:           8
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    gopher_init: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_init"
        Order:           9
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir /home/gopher/gopher"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd /home/gopher/gopher"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "go mod init gopher"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module gopher

                """
            ComparisonOutput: """
                go: creating new go.mod: module gopher

                """
        }]
    }
    gopher_go_initial: {
        StepType: 2
        Name:     "gopher_go_initial"
        Order:    10
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import (
            \t"fmt"

            \t"{{{.PUBLIC}}}"
            \t"{{{.PRIVATE}}}"
            )

            func main() {
            \tfmt.Printf("public.Message(): %v\\n", public.Message())
            \tfmt.Printf("private.Secret(): %v\\n", private.Secret())
            }

            """
        Target: "/home/gopher/gopher/gopher.go"
    }
    go_env_check_goproxy: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go_env_check_goproxy"
        Order:           11
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go env GOPROXY"
            ExitCode: 0
            Output: """
                https://proxy.golang.org,direct

                """
            ComparisonOutput: """
                https://proxy.golang.org,direct

                """
        }]
    }
    go_env_check_gosumdb: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go_env_check_gosumdb"
        Order:           12
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go env GOSUMDB"
            ExitCode: 0
            Output: """
                sum.golang.org

                """
            ComparisonOutput: """
                sum.golang.org

                """
        }]
    }
    go_env_check: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "go_env_check"
        Order:           13
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go help env"
            ExitCode: 0
            Output: """
                usage: go env [-json] [-u] [-w] [var ...]

                Env prints Go environment information.

                By default env prints information as a shell script
                (on Windows, a batch file). If one or more variable
                names is given as arguments, env prints the value of
                each named variable on its own line.

                The -json flag prints the environment in JSON format
                instead of as a shell script.

                The -u flag requires one or more arguments and unsets
                the default setting for the named environment variables,
                if one has been set with 'go env -w'.

                The -w flag requires one or more arguments of the
                form NAME=VALUE and changes the default settings
                of the named environment variables to the given values.

                For more about environment variables, see 'go help environment'.

                """
            ComparisonOutput: """
                usage: go env [-json] [-u] [-w] [var ...]

                Env prints Go environment information.

                By default env prints information as a shell script
                (on Windows, a batch file). If one or more variable
                names is given as arguments, env prints the value of
                each named variable on its own line.

                The -json flag prints the environment in JSON format
                instead of as a shell script.

                The -u flag requires one or more arguments and unsets
                the default setting for the named environment variables,
                if one has been set with 'go env -w'.

                The -w flag requires one or more arguments of the
                form NAME=VALUE and changes the default settings
                of the named environment variables to the given values.

                For more about environment variables, see 'go help environment'.

                """
        }]
    }
    goproxy_proxy_only: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "goproxy_proxy_only"
        Order:           14
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "go env -w GOPROXY=https://proxy.golang.org"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    gopher_get_public_initial: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_get_public_initial"
        Order:           15
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go get {{{.PUBLIC}}}"
            ExitCode: 0
            Output: """
                go: downloading {{{.PUBLIC}}} v0.0.0-20060102150405-abcedf12345
                go: {{{.PUBLIC}}} upgrade => v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """

                go: downloading {{{.PUBLIC}}} v0.0.0-20060102150405-abcedf12345
                go: {{{.PUBLIC}}} upgrade => v0.0.0-20060102150405-abcedf12345
                """
        }]
    }
    public_pseudo_version: {
        StepType:        1
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Name:            "public_pseudo_version"
        Order:           16
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go list -m -f {{.Version}} {{{.PUBLIC}}}"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """
                v0.0.0-20060102150405-abcedf12345

                """
        }]
    }
    gopher_get_private_initial: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_get_private_initial"
        Order:           17
        Terminal:        "term1"
        Stmts: [{
            Negated:  true
            CmdStr:   "go get {{{.PRIVATE}}}"
            ExitCode: 1
            Output: """
                go get {{{.PRIVATE}}}: module {{{.PRIVATE}}}: reading https://proxy.golang.org/{{{.PRIVATE}}}/@v/list: 410 Gone
                \tserver response:
                \tnot found: module {{{.PRIVATE}}}: git ls-remote -q origin in /tmp/gopath/pkg/mod/cache/vcs/0123456789abcdef: exit status 128:
                \t\tfatal: could not read Username for 'https://gopher.live': terminal prompts disabled
                \tConfirm the import path was entered correctly.
                \tIf this is a private repository, see https://golang.org/doc/faq#git_https for additional information.

                """
            ComparisonOutput: """

                \t\tfatal: could not read Username for 'https://gopher.live': terminal prompts disabled
                \tConfirm the import path was entered correctly.
                \tIf this is a private repository, see https://golang.org/doc/faq#git_https for additional information.
                \tnot found: module {{{.PRIVATE}}}: git ls-remote -q origin in /tmp/gopath/pkg/mod/cache/vcs/0123456789abcdef: exit status 128:
                \tserver response:
                go get {{{.PRIVATE}}}: module {{{.PRIVATE}}}: reading https://proxy.golang.org/{{{.PRIVATE}}}/@v/list: 410 Gone
                """
        }]
    }
    goproxy_proxy_default: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "goproxy_proxy_default"
        Order:           18
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "go env -w GOPROXY="
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    gopher_get_private_direct: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_get_private_direct"
        Order:           19
        Terminal:        "term1"
        Stmts: [{
            Negated:  true
            CmdStr:   "go get {{{.PRIVATE}}}"
            ExitCode: 1
            Output: """
                go: downloading {{{.PRIVATE}}} v0.0.0-20060102150405-abcedf12345
                go get {{{.PRIVATE}}}: {{{.PRIVATE}}}@v0.0.0-20060102150405-abcedf12345: verifying module: {{{.PRIVATE}}}@v0.0.0-20060102150405-abcedf12345: reading https://sum.golang.org/lookup/{{{.PRIVATE}}}@v0.0.0-20060102150405-abcedf12345: 410 Gone
                \tserver response:
                \tnot found: {{{.PRIVATE}}}@v0.0.0-20060102150405-abcedf12345: invalid version: git fetch -f origin refs/heads/*:refs/heads/* refs/tags/*:refs/tags/* in /tmp/gopath/pkg/mod/cache/vcs/0123456789abcdef: exit status 128:
                \t\tfatal: could not read Username for 'https://gopher.live': terminal prompts disabled

                """
            ComparisonOutput: """

                \t\tfatal: could not read Username for 'https://gopher.live': terminal prompts disabled
                \tnot found: {{{.PRIVATE}}}@v0.0.0-20060102150405-abcedf12345: invalid version: git fetch -f origin refs/heads/*:refs/heads/* refs/tags/*:refs/tags/* in /tmp/gopath/pkg/mod/cache/vcs/0123456789abcdef: exit status 128:
                \tserver response:
                go get {{{.PRIVATE}}}: {{{.PRIVATE}}}@v0.0.0-20060102150405-abcedf12345: verifying module: {{{.PRIVATE}}}@v0.0.0-20060102150405-abcedf12345: reading https://sum.golang.org/lookup/{{{.PRIVATE}}}@v0.0.0-20060102150405-abcedf12345: 410 Gone
                go: downloading {{{.PRIVATE}}} v0.0.0-20060102150405-abcedf12345
                """
        }]
    }
    go_help_modprivate: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "go_help_modprivate"
        Order:           20
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go help module-private"
            ExitCode: 0
            Output: """
                The go command defaults to downloading modules from the public Go module
                mirror at proxy.golang.org. It also defaults to validating downloaded modules,
                regardless of source, against the public Go checksum database at sum.golang.org.
                These defaults work well for publicly available source code.

                The GOPRIVATE environment variable controls which modules the go command
                considers to be private (not available publicly) and should therefore not use the
                proxy or checksum database. The variable is a comma-separated list of
                glob patterns (in the syntax of Go's path.Match) of module path prefixes.
                For example,

                \tGOPRIVATE=*.corp.example.com,rsc.io/private

                causes the go command to treat as private any module with a path prefix
                matching either pattern, including git.corp.example.com/xyzzy, rsc.io/private,
                and rsc.io/private/quux.

                The GOPRIVATE environment variable may be used by other tools as well to
                identify non-public modules. For example, an editor could use GOPRIVATE
                to decide whether to hyperlink a package import to a godoc.org page.

                For fine-grained control over module download and validation, the GONOPROXY
                and GONOSUMDB environment variables accept the same kind of glob list
                and override GOPRIVATE for the specific decision of whether to use the proxy
                and checksum database, respectively.

                For example, if a company ran a module proxy serving private modules,
                users would configure go using:

                \tGOPRIVATE=*.corp.example.com
                \tGOPROXY=proxy.example.com
                \tGONOPROXY=none

                This would tell the go command and other tools that modules beginning with
                a corp.example.com subdomain are private but that the company proxy should
                be used for downloading both public and private modules, because
                GONOPROXY has been set to a pattern that won't match any modules,
                overriding GOPRIVATE.

                The 'go env -w' command (see 'go help env') can be used to set these variables
                for future go command invocations.

                """
            ComparisonOutput: """
                The go command defaults to downloading modules from the public Go module
                mirror at proxy.golang.org. It also defaults to validating downloaded modules,
                regardless of source, against the public Go checksum database at sum.golang.org.
                These defaults work well for publicly available source code.

                The GOPRIVATE environment variable controls which modules the go command
                considers to be private (not available publicly) and should therefore not use the
                proxy or checksum database. The variable is a comma-separated list of
                glob patterns (in the syntax of Go's path.Match) of module path prefixes.
                For example,

                \tGOPRIVATE=*.corp.example.com,rsc.io/private

                causes the go command to treat as private any module with a path prefix
                matching either pattern, including git.corp.example.com/xyzzy, rsc.io/private,
                and rsc.io/private/quux.

                The GOPRIVATE environment variable may be used by other tools as well to
                identify non-public modules. For example, an editor could use GOPRIVATE
                to decide whether to hyperlink a package import to a godoc.org page.

                For fine-grained control over module download and validation, the GONOPROXY
                and GONOSUMDB environment variables accept the same kind of glob list
                and override GOPRIVATE for the specific decision of whether to use the proxy
                and checksum database, respectively.

                For example, if a company ran a module proxy serving private modules,
                users would configure go using:

                \tGOPRIVATE=*.corp.example.com
                \tGOPROXY=proxy.example.com
                \tGONOPROXY=none

                This would tell the go command and other tools that modules beginning with
                a corp.example.com subdomain are private but that the company proxy should
                be used for downloading both public and private modules, because
                GONOPROXY has been set to a pattern that won't match any modules,
                overriding GOPRIVATE.

                The 'go env -w' command (see 'go help env') can be used to set these variables
                for future go command invocations.

                """
        }]
    }
    goprivate_set_private: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "goprivate_set_private"
        Order:           21
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "go env -w GOPRIVATE={{{.PRIVATE}}}"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    gopher_get_private_goprivate: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_get_private_goprivate"
        Order:           22
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go get {{{.PRIVATE}}}"
            ExitCode: 0
            Output: """
                go: downloading {{{.PRIVATE}}} v0.0.0-20060102150405-abcedf12345
                go: {{{.PRIVATE}}} upgrade => v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """

                go: downloading {{{.PRIVATE}}} v0.0.0-20060102150405-abcedf12345
                go: {{{.PRIVATE}}} upgrade => v0.0.0-20060102150405-abcedf12345
                """
        }]
    }
    private_pseudo_version: {
        StepType:        1
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Name:            "private_pseudo_version"
        Order:           23
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go list -m -f {{.Version}} {{{.PRIVATE}}}"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """
                v0.0.0-20060102150405-abcedf12345

                """
        }]
    }
    gopher_run: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_run"
        Order:           24
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                public.Message(): This is a public safety announcement!
                private.Secret(): This is a top secret message... for your eyes only

                """
            ComparisonOutput: """
                public.Message(): This is a public safety announcement!
                private.Secret(): This is a top secret message... for your eyes only

                """
        }]
    }
}
Hash: "e2a26f0c743c0b836d212bde658ad23460a5b26b49651370e3366c46c097b55c"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Var:     "BRANCH"
            Pattern: "branch"
            Private: false
        }, {
            Var:     "SUBDIR"
            Pattern: "subdir"
            Private: false
        }]
    }
}]
Defs: {
    branch:      "branch"
    branch_vcs:  "https://{{{.BRANCH}}}.git"
    branch_mod:  "{{{.BRANCH}}}"
    branch_dir:  "/home/gopher/branch"
    branch_go:   "branch.go"
    subdir:      "subdir"
    subdir_vcs:  "https://{{{.SUBDIR}}}.git"
    subdir_mod:  "{{{.SUBDIR}}}"
    subdir_dir:  "/home/gopher/subdir"
    subdir_go:   "subdir.go"
    gopher:      "gopher"
    gopher_vcs:  "https://gopher.git"
    gopher_mod:  "gopher"
    gopher_dir:  "/home/gopher/gopher"
    gopher_go:   "gopher.go"
    go_help_env: "go help env"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    go_help_modsubdir: "go help module-subdir"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go115: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }
}
Steps: {
    goversion: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go version"
        InformationOnly: false
        Terminal:        string
    }
    branch_init: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir /home/gopher/branch
            cd /home/gopher/branch
            go mod init {{{.BRANCH}}}
            git init -q
            git remote add origin https://{{{.BRANCH}}}.git
            """
        InformationOnly: false
        Terminal:        string
    }
    branch_go_initial: {
        Target:   "/home/gopher/branch/branch.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            // /home/gopher/branch/branch.go

            package branch

            const Message = "branch v1"

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    branch_initial_commit: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git add branch.go go.mod
            git commit -q -m 'Initial commit of branch module'
            git tag v1.0.0
            git push -q origin main v1.0.0
            """
        InformationOnly: false
        Terminal:        string
    }
    branch_check_initial_porcelain: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    branch_create_v1_branch: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git branch main.v1
            git push -q origin main.v1
            """
        InformationOnly: false
        Terminal:        string
    }
    branch_go_mod_v2: {
        Target:   "/home/gopher/branch/go.mod"
        Name:     string
        StepType: 3
        Language: "go.mod"
        Source: """
            // /home/gopher/branch/go.mod

            module {{{.BRANCH}}}/v2

            go 1.15

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    branch_go_v2: {
        Target:   "/home/gopher/branch/branch.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            // /home/gopher/branch/branch.go

            package branch

            const Message = "branch v2"

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    branch_v2_commit: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git add branch.go go.mod
            git commit -q -m 'v2 commit of branch module'
            git tag v2.0.0
            git push -q origin main v2.0.0
            """
        InformationOnly: false
        Terminal:        string
    }
    branch_check_v2_porcelain: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    subdir_init: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir /home/gopher/subdir
            cd /home/gopher/subdir
            go mod init {{{.SUBDIR}}}
            git init -q
            git remote add origin https://{{{.SUBDIR}}}.git
            """
        InformationOnly: false
        Terminal:        string
    }
    subdir_go_initial: {
        Target:   "/home/gopher/subdir/subdir.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            // /home/gopher/subdir/subdir.go

            package subdir

            const Message = "subdir v1"

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    subdir_initial_commit: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git add subdir.go go.mod
            git commit -q -m 'Initial commit of subdir module'
            git tag v1.0.0
            git push -q origin main v1.0.0
            """
        InformationOnly: false
        Terminal:        string
    }
    subdir_check_initial_porcelain: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    subdir_create_v2_subdir: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir v2
            cp go.mod subdir.go v2
            """
        InformationOnly: false
        Terminal:        string
    }
    subdir_go_mod_v2: {
        Target:   "/home/gopher/subdir/v2/go.mod"
        Name:     string
        StepType: 3
        Language: "go.mod"
        Source: """
            // /home/gopher/subdir/v2/go.mod

            module {{{.SUBDIR}}}/v2

            go 1.15

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    subdir_go_v2: {
        Target:   "/home/gopher/subdir/v2/subdir.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            // /home/gopher/subdir/v2/subdir.go

            package subdir

            const Message = "subdir v2"

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    subdir_v2_commit: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git add v2
            git commit -q -m 'v2 commit of subdir module'
            git tag v2.0.0
            git push -q origin main v2.0.0
            """
        InformationOnly: false
        Terminal:        string
    }
    subdir_check_v2_porcelain: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    gopher_init: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir /home/gopher/gopher
            cd /home/gopher/gopher
            go mod init gopher
            """
        InformationOnly: false
        Terminal:        string
    }
    gopher_go_initial: {
        Target:   "/home/gopher/gopher/gopher.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            // /home/gopher/gopher/gopher.go

            package main

            import (
            \t"fmt"

            \tbranch "{{{.BRANCH}}}"
            \tbranch_v2 "{{{.BRANCH}}}/v2"
            \tsubdir "{{{.SUBDIR}}}"
            \tsubdir_v2 "{{{.SUBDIR}}}/v2"
            )

            func main() {
            \tfmt.Printf("branch.Message: %v\\n", branch.Message)
            \tfmt.Printf("branch/v2.Message: %v\\n", branch_v2.Message)
            \tfmt.Printf("subdir.Message: %v\\n", subdir.Message)
            \tfmt.Printf("subdir/v2.Message: %v\\n", subdir_v2.Message)
            }

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    gopher_get_deps: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            go get {{{.BRANCH}}}@v1.0.0
            go get {{{.BRANCH}}}/v2@v2.0.0
            go get {{{.SUBDIR}}}@v1.0.0
            go get {{{.SUBDIR}}}/v2@v2.0.0
            """
        InformationOnly: false
        Terminal:        string
    }
    gopher_run: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go run ."
        InformationOnly: false
        Terminal:        string
    }
}
// ---
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Pattern: "branch"
            Private: false
            Var:     "BRANCH"
        }, {
            Pattern: "subdir"
            Private: false
            Var:     "SUBDIR"
        }]
    }
    Version: """
        {
          "Path": "github.com/play-with-go/gitea/cmd/gitea",
          "Main": {
            "Path": "github.com/play-with-go/gitea",
            "Version": "v0.0.0-20210430163339-b27dc21b6036",
            "Sum": "h1:7wJ+VvtJk2GU9XtFGDeVwO6ohT8l5nu5h9A6YDCec+U=",
            "Replace": null
          },
          "Deps": [
            {
              "Path": "code.gitea.io/sdk/gitea",
              "Version": "v0.13.1",
              "Sum": "h1:Y7bpH2iO6Q0KhhMJfjP/LZ0AmiYITeRQlCD8b0oYqhk=",
              "Replace": null
            },
            {
              "Path": "cuelang.org/go",
              "Version": "v0.3.2",
              "Sum": "h1:/Am5yFDwqnaEi+g942OPM1M4/qtfVSm49wtkQbeh5Z4=",
              "Replace": null
            },
            {
              "Path": "github.com/cockroachdb/apd/v2",
              "Version": "v2.0.1",
              "Sum": "h1:y1Rh3tEU89D+7Tgbw+lp52T6p/GJLpDmNvr10UWqLTE=",
              "Replace": null
            },
            {
              "Path": "github.com/emicklei/proto",
              "Version": "v1.6.15",
              "Sum": "h1:XbpwxmuOPrdES97FrSfpyy67SSCV/wBIKXqgJzh6hNw=",
              "Replace": null
            },
            {
              "Path": "github.com/hashicorp/go-version",
              "Version": "v1.2.0",
              "Sum": "h1:3vNe/fWF5CBgRIguda1meWhsZHy3m8gCJ5wx+dIzX/E=",
              "Replace": null
            },
            {
              "Path": "github.com/mpvl/unique",
              "Version": "v0.0.0-20150818121801-cbe035fff7de",
              "Sum": "h1:D5x39vF5KCwKQaw+OC9ZPiLVHXz3UFw2+psEX+gYcto=",
              "Replace": null
            },
            {
              "Path": "github.com/pkg/errors",
              "Version": "v0.8.1",
              "Sum": "h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=",
              "Replace": null
            },
            {
              "Path": "github.com/play-with-go/preguide",
              "Version": "v0.0.2-0.20210430163307-e5ab271ba2e9",
              "Sum": "h1:dpSLI117TKb8MdLknsUYbQjKJpP6jzBYpfKKVszCZNI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/crypto",
              "Version": "v0.0.0-20200622213623-75b288015ac9",
              "Sum": "h1:psW17arqaxU48Z5kZ0CQnkZWQJsqcURM6tKiBApRjXI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/net",
              "Version": "v0.0.0-20201021035429-f5854403a974",
              "Sum": "h1:IX6qOQeG5uLjB/hjjwjedwfjND0hgjPMMyO1RoIXQNI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/text",
              "Version": "v0.3.3",
              "Sum": "h1:cokOdA+Jmi5PJGXLlLllQSgYigAEfHXJAERHVMaCc2k=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/xerrors",
              "Version": "v0.0.0-20200804184101-5ec99f83aff1",
              "Sum": "h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/retry.v1",
              "Version": "v1.0.3",
              "Sum": "h1:a9CArYczAVv6Qs6VGoLMio99GEs7kY9UzSF9+LD+iGs=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/yaml.v3",
              "Version": "v3.0.0-20200121175148-a6ecf24a6d71",
              "Sum": "h1:Xe2gvTZUJpsvOWUnvmL/tmhVBZUmHSvLbMjRj6NUUKo=",
              "Replace": null
            }
          ]
        }
        """
    Variables: ["GITEA_USERNAME", "GITEA_PRIV_KEY", "GITEA_PUB_KEY", "GITEA_KEYSCAN", "BRANCH", "SUBDIR"]
}]
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go115: {
            Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
        }
    }
}]
Scenarios: [{
    Name:        "go115"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
FilenameComment: false
Steps: {
    goversion: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "goversion"
        Order:           0
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go version"
            ExitCode: 0
            Output: """
                go version go1.15.8 linux/amd64

                """
            ComparisonOutput: """
                go version go1.15.8 linux/amd64

                """
        }]
    }
    branch_init: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "branch_init"
        Order:           1
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir /home/gopher/branch"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd /home/gopher/branch"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "go mod init {{{.BRANCH}}}"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module {{{.BRANCH}}}

                """
            ComparisonOutput: """
                go: creating new go.mod: module {{{.BRANCH}}}

                """
        }, {
            Negated:          false
            CmdStr:           "git init -q"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git remote add origin https://{{{.BRANCH}}}.git"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    branch_go_initial: {
        StepType: 2
        Name:     "branch_go_initial"
        Order:    2
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // /home/gopher/branch/branch.go

            package branch

            const Message = "branch v1"

            """
        Target: "/home/gopher/branch/branch.go"
    }
    branch_initial_commit: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "branch_initial_commit"
        Order:           3
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git add branch.go go.mod"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m 'Initial commit of branch module'"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git tag v1.0.0"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin main v1.0.0"
            ExitCode: 0
            Output: """
                remote: .. Processing 2 references        
                remote: Processed 2 references in total        

                """
            ComparisonOutput: """
                remote: .. Processing 2 references        
                remote: Processed 2 references in total        

                """
        }]
    }
    branch_check_initial_porcelain: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "branch_check_initial_porcelain"
        Order:           4
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    branch_create_v1_branch: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "branch_create_v1_branch"
        Order:           5
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git branch main.v1"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin main.v1"
            ExitCode: 0
            Output: """
                remote: 
                remote: Create a new pull request for 'main.v1':        
                remote:   https://{{{.BRANCH}}}/compare/main...main.v1        
                remote: 
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: 
                remote: Create a new pull request for 'main.v1':        
                remote:   https://{{{.BRANCH}}}/compare/main...main.v1        
                remote: 
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    branch_go_mod_v2: {
        StepType: 2
        Name:     "branch_go_mod_v2"
        Order:    6
        Terminal: "term1"
        Language: "go.mod"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // /home/gopher/branch/go.mod

            module {{{.BRANCH}}}/v2

            go 1.15

            """
        Target: "/home/gopher/branch/go.mod"
    }
    branch_go_v2: {
        StepType: 2
        Name:     "branch_go_v2"
        Order:    7
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // /home/gopher/branch/branch.go

            package branch

            const Message = "branch v2"

            """
        Target: "/home/gopher/branch/branch.go"
    }
    branch_v2_commit: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "branch_v2_commit"
        Order:           8
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git add branch.go go.mod"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m 'v2 commit of branch module'"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git tag v2.0.0"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin main v2.0.0"
            ExitCode: 0
            Output: """
                remote: .. Processing 2 references        
                remote: Processed 2 references in total        

                """
            ComparisonOutput: """
                remote: .. Processing 2 references        
                remote: Processed 2 references in total        

                """
        }]
    }
    branch_check_v2_porcelain: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "branch_check_v2_porcelain"
        Order:           9
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    subdir_init: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "subdir_init"
        Order:           10
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir /home/gopher/subdir"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd /home/gopher/subdir"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "go mod init {{{.SUBDIR}}}"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module {{{.SUBDIR}}}

                """
            ComparisonOutput: """
                go: creating new go.mod: module {{{.SUBDIR}}}

                """
        }, {
            Negated:          false
            CmdStr:           "git init -q"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git remote add origin https://{{{.SUBDIR}}}.git"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    subdir_go_initial: {
        StepType: 2
        Name:     "subdir_go_initial"
        Order:    11
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // /home/gopher/subdir/subdir.go

            package subdir

            const Message = "subdir v1"

            """
        Target: "/home/gopher/subdir/subdir.go"
    }
    subdir_initial_commit: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "subdir_initial_commit"
        Order:           12
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git add subdir.go go.mod"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m 'Initial commit of subdir module'"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git tag v1.0.0"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin main v1.0.0"
            ExitCode: 0
            Output: """
                remote: .. Processing 2 references        
                remote: Processed 2 references in total        

                """
            ComparisonOutput: """
                remote: .. Processing 2 references        
                remote: Processed 2 references in total        

                """
        }]
    }
    subdir_check_initial_porcelain: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "subdir_check_initial_porcelain"
        Order:           13
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    subdir_create_v2_subdir: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "subdir_create_v2_subdir"
        Order:           14
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir v2"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cp go.mod subdir.go v2"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    subdir_go_mod_v2: {
        StepType: 2
        Name:     "subdir_go_mod_v2"
        Order:    15
        Terminal: "term1"
        Language: "go.mod"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // /home/gopher/subdir/v2/go.mod

            module {{{.SUBDIR}}}/v2

            go 1.15

            """
        Target: "/home/gopher/subdir/v2/go.mod"
    }
    subdir_go_v2: {
        StepType: 2
        Name:     "subdir_go_v2"
        Order:    16
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // /home/gopher/subdir/v2/subdir.go

            package subdir

            const Message = "subdir v2"

            """
        Target: "/home/gopher/subdir/v2/subdir.go"
    }
    subdir_v2_commit: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "subdir_v2_commit"
        Order:           17
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git add v2"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m 'v2 commit of subdir module'"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git tag v2.0.0"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin main v2.0.0"
            ExitCode: 0
            Output: """
                remote: .. Processing 2 references        
                remote: Processed 2 references in total        

                """
            ComparisonOutput: """
                remote: .. Processing 2 references        
                remote: Processed 2 references in total        

                """
        }]
    }
    subdir_check_v2_porcelain: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "subdir_check_v2_porcelain"
        Order:           18
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    gopher_init: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_init"
        Order:           19
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir /home/gopher/gopher"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd /home/gopher/gopher"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "go mod init gopher"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module gopher

                """
            ComparisonOutput: """
                go: creating new go.mod: module gopher

                """
        }]
    }
    gopher_go_initial: {
        StepType: 2
        Name:     "gopher_go_initial"
        Order:    20
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // /home/gopher/gopher/gopher.go

            package main

            import (
            \t"fmt"

            \tbranch "{{{.BRANCH}}}"
            \tbranch_v2 "{{{.BRANCH}}}/v2"
            \tsubdir "{{{.SUBDIR}}}"
            \tsubdir_v2 "{{{.SUBDIR}}}/v2"
            )

            func main() {
            \tfmt.Printf("branch.Message: %v\\n", branch.Message)
            \tfmt.Printf("branch/v2.Message: %v\\n", branch_v2.Message)
            \tfmt.Printf("subdir.Message: %v\\n", subdir.Message)
            \tfmt.Printf("subdir/v2.Message: %v\\n", subdir_v2.Message)
            }

            """
        Target: "/home/gopher/gopher/gopher.go"
    }
    gopher_get_deps: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_get_deps"
        Order:           21
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go get {{{.BRANCH}}}@v1.0.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.BRANCH}}} v1.0.0

                """
            ComparisonOutput: """

                go: downloading {{{.BRANCH}}} v1.0.0
                """
        }, {
            Negated:  false
            CmdStr:   "go get {{{.BRANCH}}}/v2@v2.0.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.BRANCH}}}/v2 v2.0.0

                """
            ComparisonOutput: """

                go: downloading {{{.BRANCH}}}/v2 v2.0.0
                """
        }, {
            Negated:  false
            CmdStr:   "go get {{{.SUBDIR}}}@v1.0.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.SUBDIR}}} v1.0.0

                """
            ComparisonOutput: """

                go: downloading {{{.SUBDIR}}} v1.0.0
                """
        }, {
            Negated:  false
            CmdStr:   "go get {{{.SUBDIR}}}/v2@v2.0.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.SUBDIR}}}/v2 v2.0.0

                """
            ComparisonOutput: """

                go: downloading {{{.SUBDIR}}}/v2 v2.0.0
                """
        }]
    }
    gopher_run: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_run"
        Order:           22
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                branch.Message: branch v1
                branch/v2.Message: branch v2
                subdir.Message: subdir v1
                subdir/v2.Message: subdir v2

                """
            ComparisonOutput: """
                branch.Message: branch v1
                branch/v2.Message: branch v2
                subdir.Message: subdir v1
                subdir/v2.Message: subdir v2

                """
        }]
    }
}
Hash: "8ef9567dbd2ab217155604d5765fa9d19321015d41bc33452860bf698ad2c9d8"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Var:     "PUBLIC"
            Pattern: "public"
            Private: false
        }]
    }
}]
Defs: {
    go115:        "go115"
    go116:        "go116"
    public:       "public"
    public_vcs:   "https://{{{.PUBLIC}}}.git"
    public_mod:   "{{{.PUBLIC}}}"
    public_dir:   "/home/gopher/public"
    public_go:    "public.go"
    public_go116: "public_116.go"
    public_func:  "DoSomething()"
    gopher:       "gopher"
    gopher_vcs:   "https://gopher.git"
    gopher_mod:   "gopher"
    gopher_dir:   "/home/gopher/gopher"
    gopher_go:    "gopher.go"
    go_help_env:  "go help env"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    go_help_modprivate: "go help module-private"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go115: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15_1.16@sha256:38ee32afdd785e5f1d9e63033ce5d64cbd098207ed6506669105db97c2dbe9a1"
            }
        }
    }
}
Steps: {
    go115version: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go115 version"
        InformationOnly: false
        Terminal:        string
    }
    go116version: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go116 version"
        InformationOnly: false
        Terminal:        string
    }
    go115default: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "alias go=go115"
        InformationOnly: false
        Terminal:        string
    }
    public_init: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir /home/gopher/public
            cd /home/gopher/public
            go mod init {{{.PUBLIC}}}
            git init -q
            git remote add origin https://{{{.PUBLIC}}}.git
            """
        InformationOnly: false
        Terminal:        string
    }
    public_go_initial: {
        Target:   "/home/gopher/public/public.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package public

            import (
                "fmt"
                "io/ioutil"
            )

            func DoSomething() {
                fmt.Fprintf(ioutil.Discard, "This doesn't print anything")
            }
            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    public_initial_commit: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            git add public.go go.mod
            git commit -q -m 'Initial commit of public module'
            git push -q origin main
            """
        InformationOnly: false
        Terminal:        string
    }
    public_check_initial_porcelain: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    gopher_init: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            mkdir /home/gopher/gopher
            cd /home/gopher/gopher
            go mod init gopher
            """
        InformationOnly: false
        Terminal:        string
    }
    gopher_go_initial: {
        Target:   "/home/gopher/gopher/gopher.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package main

            import (

            "{{{.PUBLIC}}}"
            )

            func main() {
                public.DoSomething()
            }

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    gopher_get: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go get -d {{{.PUBLIC}}}@latest"
        InformationOnly: false
        Terminal:        string
    }
    golist_gopher_1: {
        Name:            string
        StepType:        1
        Source:          "go list -m -f {{.Version}} {{{.PUBLIC}}}"
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Terminal:        string
    }
    gopher_run: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go run ."
        InformationOnly: false
        Terminal:        string
    }
    go116default: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "alias go=go116"
        InformationOnly: false
        Terminal:        string
    }
    public_bump_discard: {
        Target:   "/home/gopher/public/public.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            package public

            import (
                "fmt"
                "io"
            )

            func DoSomething() {
                fmt.Fprintf(io.Discard, "This doesn't print anything")
            }
            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    public_bump_commit: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            cd /home/gopher/public
            git add public.go go.mod
            git commit -q -m 'Bump public to go1.16'
            git push -q origin main
            """
        InformationOnly: false
        Terminal:        string
    }
    go115default1: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "alias go=go115"
        InformationOnly: false
        Terminal:        string
    }
    gopher_update: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            cd /home/gopher/gopher
            GOPROXY=direct go get -d {{{.PUBLIC}}}@latest
            """
        InformationOnly: false
        Terminal:        string
    }
    golist_gopher_2: {
        Name:            string
        StepType:        1
        Source:          "go list -m -f {{.Version}} {{{.PUBLIC}}}"
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Terminal:        string
    }
    gopher_run_fail: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "! go run ."
        InformationOnly: false
        Terminal:        string
    }
    public_rollback_mod: {
        Target:   "/home/gopher/public/public.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            // +build !go1.16

            package public

            import (
                "fmt"
                "io/ioutil"
            )

            func DoSomething() {
                fmt.Fprintf(ioutil.Discard, "This doesn't print anything")
            }
            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    public_add_buildtag: {
        Target:   "/home/gopher/public/public_116.go"
        Language: "go"
        Name:     string
        StepType: 3
        Source: """
            // +build go.1.16

            package public

            import (
                "fmt"
                "io"
            )

            func DoSomething() {
                fmt.Fprintf(io.Discard, "This doesn't print anything")
            }
            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    public_fix_commit: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            cd /home/gopher/public
            git add public.go public_116.go go.mod
            git commit -q -m 'Fix public bump to go1.16'
            git push -q origin main
            """
        InformationOnly: false
        Terminal:        string
    }
    gopher_update_fix: {
        DoNotTrim: false
        Name:      string
        StepType:  1
        Source: """
            cd /home/gopher/gopher
            GOPROXY=direct go get -d {{{.PUBLIC}}}@latest
            """
        InformationOnly: false
        Terminal:        string
    }
    golist_gopher_3: {
        Name:            string
        StepType:        1
        Source:          "go list -m -f {{.Version}} {{{.PUBLIC}}}"
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Terminal:        string
    }
    gopher_run_fix: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "go run ."
        InformationOnly: false
        Terminal:        string
    }
}
// ---
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Pattern: "public"
            Private: false
            Var:     "PUBLIC"
        }]
    }
    Version: """
        {
          "Path": "github.com/play-with-go/gitea/cmd/gitea",
          "Main": {
            "Path": "github.com/play-with-go/gitea",
            "Version": "v0.0.0-20210430163339-b27dc21b6036",
            "Sum": "h1:7wJ+VvtJk2GU9XtFGDeVwO6ohT8l5nu5h9A6YDCec+U=",
            "Replace": null
          },
          "Deps": [
            {
              "Path": "code.gitea.io/sdk/gitea",
              "Version": "v0.13.1",
              "Sum": "h1:Y7bpH2iO6Q0KhhMJfjP/LZ0AmiYITeRQlCD8b0oYqhk=",
              "Replace": null
            },
            {
              "Path": "cuelang.org/go",
              "Version": "v0.3.2",
              "Sum": "h1:/Am5yFDwqnaEi+g942OPM1M4/qtfVSm49wtkQbeh5Z4=",
              "Replace": null
            },
            {
              "Path": "github.com/cockroachdb/apd/v2",
              "Version": "v2.0.1",
              "Sum": "h1:y1Rh3tEU89D+7Tgbw+lp52T6p/GJLpDmNvr10UWqLTE=",
              "Replace": null
            },
            {
              "Path": "github.com/emicklei/proto",
              "Version": "v1.6.15",
              "Sum": "h1:XbpwxmuOPrdES97FrSfpyy67SSCV/wBIKXqgJzh6hNw=",
              "Replace": null
            },
            {
              "Path": "github.com/hashicorp/go-version",
              "Version": "v1.2.0",
              "Sum": "h1:3vNe/fWF5CBgRIguda1meWhsZHy3m8gCJ5wx+dIzX/E=",
              "Replace": null
            },
            {
              "Path": "github.com/mpvl/unique",
              "Version": "v0.0.0-20150818121801-cbe035fff7de",
              "Sum": "h1:D5x39vF5KCwKQaw+OC9ZPiLVHXz3UFw2+psEX+gYcto=",
              "Replace": null
            },
            {
              "Path": "github.com/pkg/errors",
              "Version": "v0.8.1",
              "Sum": "h1:iURUrRGxPUNPdy5/HRSm+Yj6okJ6UtLINN0Q9M4+h3I=",
              "Replace": null
            },
            {
              "Path": "github.com/play-with-go/preguide",
              "Version": "v0.0.2-0.20210430163307-e5ab271ba2e9",
              "Sum": "h1:dpSLI117TKb8MdLknsUYbQjKJpP6jzBYpfKKVszCZNI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/crypto",
              "Version": "v0.0.0-20200622213623-75b288015ac9",
              "Sum": "h1:psW17arqaxU48Z5kZ0CQnkZWQJsqcURM6tKiBApRjXI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/net",
              "Version": "v0.0.0-20201021035429-f5854403a974",
              "Sum": "h1:IX6qOQeG5uLjB/hjjwjedwfjND0hgjPMMyO1RoIXQNI=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/text",
              "Version": "v0.3.3",
              "Sum": "h1:cokOdA+Jmi5PJGXLlLllQSgYigAEfHXJAERHVMaCc2k=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/xerrors",
              "Version": "v0.0.0-20200804184101-5ec99f83aff1",
              "Sum": "h1:go1bK/D/BFZV2I8cIQd1NKEZ+0owSTG1fDTci4IqFcE=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/retry.v1",
              "Version": "v1.0.3",
              "Sum": "h1:a9CArYczAVv6Qs6VGoLMio99GEs7kY9UzSF9+LD+iGs=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/yaml.v3",
              "Version": "v3.0.0-20200121175148-a6ecf24a6d71",
              "Sum": "h1:Xe2gvTZUJpsvOWUnvmL/tmhVBZUmHSvLbMjRj6NUUKo=",
              "Replace": null
            }
          ]
        }
        """
    Variables: ["GITEA_USERNAME", "GITEA_PRIV_KEY", "GITEA_PUB_KEY", "GITEA_KEYSCAN", "PUBLIC"]
}]
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go115: {
            Image: "playwithgo/go1.15_1.16@sha256:38ee32afdd785e5f1d9e63033ce5d64cbd098207ed6506669105db97c2dbe9a1"
        }
    }
}]
Scenarios: [{
    Name:        "go115"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
FilenameComment: false
Steps: {
    go115version: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go115version"
        Order:           0
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go115 version"
            ExitCode: 0
            Output: """
                go version go1.15.8 linux/amd64

                """
            ComparisonOutput: """
                go version go1.15.8 linux/amd64

                """
        }]
    }
    go116version: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go116version"
        Order:           1
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go116 version"
            ExitCode: 0
            Output: """
                go version go1.16.3 linux/amd64

                """
            ComparisonOutput: """
                go version go1.16.3 linux/amd64

                """
        }]
    }
    go115default: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go115default"
        Order:           2
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "alias go=go115"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    public_init: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "public_init"
        Order:           3
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir /home/gopher/public"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd /home/gopher/public"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "go mod init {{{.PUBLIC}}}"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module {{{.PUBLIC}}}

                """
            ComparisonOutput: """
                go: creating new go.mod: module {{{.PUBLIC}}}

                """
        }, {
            Negated:          false
            CmdStr:           "git init -q"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git remote add origin https://{{{.PUBLIC}}}.git"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    public_go_initial: {
        StepType: 2
        Name:     "public_go_initial"
        Order:    4
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package public

            import (
                "fmt"
                "io/ioutil"
            )

            func DoSomething() {
                fmt.Fprintf(ioutil.Discard, "This doesn't print anything")
            }
            """
        Target: "/home/gopher/public/public.go"
    }
    public_initial_commit: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "public_initial_commit"
        Order:           5
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "git add public.go go.mod"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m 'Initial commit of public module'"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    public_check_initial_porcelain: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: true
        Name:            "public_check_initial_porcelain"
        Order:           6
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    gopher_init: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_init"
        Order:           7
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "mkdir /home/gopher/gopher"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "cd /home/gopher/gopher"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "go mod init gopher"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module gopher

                """
            ComparisonOutput: """
                go: creating new go.mod: module gopher

                """
        }]
    }
    gopher_go_initial: {
        StepType: 2
        Name:     "gopher_go_initial"
        Order:    8
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import (

            "{{{.PUBLIC}}}"
            )

            func main() {
                public.DoSomething()
            }

            """
        Target: "/home/gopher/gopher/gopher.go"
    }
    gopher_get: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_get"
        Order:           9
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go get -d {{{.PUBLIC}}}@latest"
            ExitCode: 0
            Output: """
                go: downloading {{{.PUBLIC}}} v0.0.0-20060102150405-abcedf12345
                go: {{{.PUBLIC}}} latest => v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """

                go: downloading {{{.PUBLIC}}} v0.0.0-20060102150405-abcedf12345
                go: {{{.PUBLIC}}} latest => v0.0.0-20060102150405-abcedf12345
                """
        }]
    }
    golist_gopher_1: {
        StepType:        1
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Name:            "golist_gopher_1"
        Order:           10
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go list -m -f {{.Version}} {{{.PUBLIC}}}"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """
                v0.0.0-20060102150405-abcedf12345

                """
        }]
    }
    gopher_run: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_run"
        Order:           11
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "go run ."
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    go116default: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go116default"
        Order:           12
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "alias go=go116"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    public_bump_discard: {
        StepType: 2
        Name:     "public_bump_discard"
        Order:    13
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package public

            import (
                "fmt"
                "io"
            )

            func DoSomething() {
                fmt.Fprintf(io.Discard, "This doesn't print anything")
            }
            """
        Target: "/home/gopher/public/public.go"
    }
    public_bump_commit: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "public_bump_commit"
        Order:           14
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/public"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git add public.go go.mod"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m 'Bump public to go1.16'"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    go115default1: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "go115default1"
        Order:           15
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "alias go=go115"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
    gopher_update: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_update"
        Order:           16
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/gopher"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "GOPROXY=direct go get -d {{{.PUBLIC}}}@latest"
            ExitCode: 0
            Output: """
                go: {{{.PUBLIC}}} latest => v0.0.0-20060102150405-abcedf12345
                go: downloading {{{.PUBLIC}}} v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """

                go: downloading {{{.PUBLIC}}} v0.0.0-20060102150405-abcedf12345
                go: {{{.PUBLIC}}} latest => v0.0.0-20060102150405-abcedf12345
                """
        }]
    }
    golist_gopher_2: {
        StepType:        1
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Name:            "golist_gopher_2"
        Order:           17
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go list -m -f {{.Version}} {{{.PUBLIC}}}"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """
                v0.0.0-20060102150405-abcedf12345

                """
        }]
    }
    gopher_run_fail: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_run_fail"
        Order:           18
        Terminal:        "term1"
        Stmts: [{
            Negated:  true
            CmdStr:   "go run ."
            ExitCode: 2
            Output: """
                # {{{.PUBLIC}}}
                ../go/pkg/mod/{{{.PUBLIC}}}@v0.0.0-20060102150405-abcedf12345/public.go:9:17: undefined: io.Discard

                """
            ComparisonOutput: """
                # {{{.PUBLIC}}}
                ../go/pkg/mod/{{{.PUBLIC}}}@v0.0.0-20060102150405-abcedf12345/public.go:9:17: undefined: io.Discard

                """
        }]
    }
    public_rollback_mod: {
        StepType: 2
        Name:     "public_rollback_mod"
        Order:    19
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // +build !go1.16

            package public

            import (
                "fmt"
                "io/ioutil"
            )

            func DoSomething() {
                fmt.Fprintf(ioutil.Discard, "This doesn't print anything")
            }
            """
        Target: "/home/gopher/public/public.go"
    }
    public_add_buildtag: {
        StepType: 2
        Name:     "public_add_buildtag"
        Order:    20
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // +build go.1.16

            package public

            import (
                "fmt"
                "io"
            )

            func DoSomething() {
                fmt.Fprintf(io.Discard, "This doesn't print anything")
            }
            """
        Target: "/home/gopher/public/public_116.go"
    }
    public_fix_commit: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "public_fix_commit"
        Order:           21
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/public"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git add public.go public_116.go go.mod"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:          false
            CmdStr:           "git commit -q -m 'Fix public bump to go1.16'"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
            ComparisonOutput: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    gopher_update_fix: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_update_fix"
        Order:           22
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "cd /home/gopher/gopher"
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }, {
            Negated:  false
            CmdStr:   "GOPROXY=direct go get -d {{{.PUBLIC}}}@latest"
            ExitCode: 0
            Output: """
                go: {{{.PUBLIC}}} latest => v0.0.0-20060102150405-abcedf12345
                go: downloading {{{.PUBLIC}}} v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """

                go: downloading {{{.PUBLIC}}} v0.0.0-20060102150405-abcedf12345
                go: {{{.PUBLIC}}} latest => v0.0.0-20060102150405-abcedf12345
                """
        }]
    }
    golist_gopher_3: {
        StepType:        1
        RandomReplace:   "v0.0.0-20060102150405-abcedf12345"
        DoNotTrim:       false
        InformationOnly: true
        Name:            "golist_gopher_3"
        Order:           23
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "go list -m -f {{.Version}} {{{.PUBLIC}}}"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            ComparisonOutput: """
                v0.0.0-20060102150405-abcedf12345

                """
        }]
    }
    gopher_run_fix: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "gopher_run_fix"
        Order:           24
        Terminal:        "term1"
        Stmts: [{
            Negated:          false
            CmdStr:           "go run ."
            ExitCode:         0
            Output:           ""
            ComparisonOutput: ""
        }]
    }
}
Hash: "d394d1b632ff7b9ffeb462121bada6ac4ab1a4db97ee371d5d66f0b87ce5ee15"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Defs: {
    script:     "script.sh"
    scriptpath: "/home/gopher/script.sh"
}
Steps: {
    create_script: {
        Target:   "/home/gopher/script.sh"
        Language: "sh"
        Name:     string
        StepType: 3
        Source: """
            echo "Hello, world!"

            """
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    run_script: {
        DoNotTrim:       false
        Name:            string
        StepType:        1
        Source:          "bash /home/gopher/script.sh"
        InformationOnly: false
        Terminal:        string
    }
}
Scenarios: {
    go115: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go115: {
                Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
            }
        }
    }
}
// ---
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go115: {
            Image: "playwithgo/go1.15.8@sha256:7640da09d1555c4dddbba7f1b96051af2816e6542005176b749f38865ee0454c"
        }
    }
}]
Scenarios: [{
    Name:        "go115"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
FilenameComment: false
Steps: {
    create_script: {
        StepType: 2
        Name:     "create_script"
        Order:    0
        Terminal: "term1"
        Language: "sh"
        Renderer: {
            RendererType: 1
        }
        Source: """
            echo "Hello, world!"

            """
        Target: "/home/gopher/script.sh"
    }
    run_script: {
        StepType:        1
        DoNotTrim:       false
        InformationOnly: false
        Name:            "run_script"
        Order:           1
        Terminal:        "term1"
        Stmts: [{
            Negated:  false
            CmdStr:   "bash /home/gopher/script.sh"
            ExitCode: 0
            Output: """
                Hello, world!

                """
            ComparisonOutput: """
                Hello, world!

                """
        }]
    }
}
Hash: "df6a8d33103a6eb7219db145252acd608396f57af2661415838b781a4721eb7c"
Delims: ["{{{", "}}}"]
// ---
import "strings"

#workflows: [{
    file: "test.yml"
    schema: {
        name:          "Test"
        #architecture: "ARM32" | "x64" | "x86"
        #branch: [strings.MinRunes(1)]
        #configuration: string | number | {} | []
        #container:     string | {
            image: string
        }
        #defaults: {}
        #env: {}
        #event:       "check_run" | "check_suite" | "create" | "delete" | "deployment" | "deployment_status" | "fork" | "gollum" | "issue_comment" | "issues" | "label" | "member" | "milestone" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "status" | "watch" | "repository_dispatch"
        #eventObject: null | {}
        #globs: [strings.MinRunes(1)]
        #machine: "linux" | "macos" | "windows"
        #name:    =~"^[_a-zA-Z][a-zA-Z0-9_-]*$"
        #path: [strings.MinRunes(1)]
        #ref:   null | {}
        #shell: string | "bash" | "pwsh" | "python" | "sh" | "cmd" | "powershell"
        #types: [_]
        on: {
            push: {
                branches: ["main"]
                tags: ["v*"]
            }
            pull_request: {
                branches: ["**"]
            }
            schedule: [{
                cron: "0 9 * * *"
            }]
        }
        env: {
            DOCKER_HUB_USER:                    "playwithgopher"
            DOCKER_HUB_TOKEN:                   "${{ secrets.DOCKER_HUB_TOKEN }}"
            PREGUIDE_DEBUG:                     true
            PLAYWITHGODEV_CONTRIBUTOR_USER:     "playwithgopher_github"
            PLAYWITHGODEV_CONTRIBUTOR_PASSWORD: "${{ secrets.PLAYWITHGODEV_CONTRIBUTOR_PASSWORD }}"
            PLAYWITHGOPHER_GITHUB_PAT:          "${{ secrets.PLAYWITHGOPHER_GITHUB_PAT }}"
        }
        jobs: {
            test: {
                strategy: {
                    "fail-fast": false
                    matrix: {
                        go_version: ["1.16.3"]
                        os: ["ubuntu-18.04"]
                    }
                }
                "runs-on": "${{ matrix.os }}"
                steps: [{
                    name: "Checkout code"
                    uses: "actions/checkout@v2"
                }, {
                    name: "Install Go"
                    uses: "actions/setup-go@v2"
                    with: {
                        "go-version": "${{ matrix.go_version }}"
                    }
                }, {
                    name: "Pre-download specific modules"
                    run:  "go mod download github.com/play-with-go/preguide github.com/play-with-go/gitea"
                }, {
                    name: "mac CI setup"
                    run:  "./_scripts/macCISetup.sh"
                    if:   "${{ matrix.os == 'macos-latest' }}"
                }, {
                    name: "Ensure docker setup"
                    run:  "./_scripts/ensureDocker.sh"
                }, {
                    name: "Env setup"
                    run:  "./_scripts/env.sh github"
                }, {
                    name: "docker-compose build"
                    run:  "./_scripts/dc.sh build"
                }, {
                    name: "Start gitea services"
                    run:  "./_scripts/dc.sh up -d cmd_gitea"
                }, {
                    name: "Verify"
                    run:  "go mod verify"
                }, {
                    name: "Re-generate guides"
                    run:  "_scripts/generateGuides.sh"
                }, {
                    name:                "Race check re-generating guides"
                    run:                 "go run -race github.com/play-with-go/preguide/cmd/preguide gen -out ../_posts"
                    "working-directory": "./guides"
                    if:                  "${{ github.event_name == 'schedule' }}"
                }, {
                    name: "Re-generate everything else"
                    run:  "_scripts/generateEverythingElse.sh"
                }, {
                    name: "Tidy"
                    run:  "go mod tidy"
                }, {
                    name: "Verify commit is clean"
                    run:  "test -z \"$(git status --porcelain)\" || (git status; git diff; false)"
                }, {
                    name: "Run unity tests"
                    run:  "go run github.com/cue-sh/unity/cmd/unity test"
                }, {
                    name: "Verify commit is clean"
                    run:  "test -z \"$(git status --porcelain)\" || (git status; git diff; false)"
                }, {
                    name: "Publish site"
                    run:  "_scripts/publishSite.sh"
                }]
            }
        }
        #: {
            "working-directory": string
        }
    }
}, {
    file: "testmac.yml"
    schema: {
        name:          "TestMac"
        #architecture: "ARM32" | "x64" | "x86"
        #branch: [strings.MinRunes(1)]
        #configuration: string | number | {} | []
        #container:     string | {
            image: string
        }
        #defaults: {}
        #env: {}
        #event:       "check_run" | "check_suite" | "create" | "delete" | "deployment" | "deployment_status" | "fork" | "gollum" | "issue_comment" | "issues" | "label" | "member" | "milestone" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "status" | "watch" | "repository_dispatch"
        #eventObject: null | {}
        #globs: [strings.MinRunes(1)]
        #machine: "linux" | "macos" | "windows"
        #name:    =~"^[_a-zA-Z][a-zA-Z0-9_-]*$"
        #path: [strings.MinRunes(1)]
        #ref:   null | {}
        #shell: string | "bash" | "pwsh" | "python" | "sh" | "cmd" | "powershell"
        #types: [_]
        on: {
            schedule: [{
                cron: "0 9 * * *"
            }]
        }
        env: {
            DOCKER_HUB_USER:                    "playwithgopher"
            DOCKER_HUB_TOKEN:                   "${{ secrets.DOCKER_HUB_TOKEN }}"
            PREGUIDE_DEBUG:                     true
            PLAYWITHGODEV_CONTRIBUTOR_USER:     "playwithgopher_github"
            PLAYWITHGODEV_CONTRIBUTOR_PASSWORD: "${{ secrets.PLAYWITHGODEV_CONTRIBUTOR_PASSWORD }}"
            PLAYWITHGOPHER_GITHUB_PAT:          "${{ secrets.PLAYWITHGOPHER_GITHUB_PAT }}"
        }
        jobs: {
            test: {
                strategy: {
                    "fail-fast": false
                    matrix: {
                        go_version: ["1.16.3"]
                        os: ["macos-latest"]
                    }
                }
                "runs-on": "${{ matrix.os }}"
                steps: [{
                    name: "Checkout code"
                    uses: "actions/checkout@v2"
                }, {
                    name: "Install Go"
                    uses: "actions/setup-go@v2"
                    with: {
                        "go-version": "${{ matrix.go_version }}"
                    }
                }, {
                    name: "Pre-download specific modules"
                    run:  "go mod download github.com/play-with-go/preguide github.com/play-with-go/gitea"
                }, {
                    name: "mac CI setup"
                    run:  "./_scripts/macCISetup.sh"
                    if:   "${{ matrix.os == 'macos-latest' }}"
                }, {
                    name: "Ensure docker setup"
                    run:  "./_scripts/ensureDocker.sh"
                }, {
                    name: "Env setup"
                    run:  "./_scripts/env.sh github"
                }, {
                    name: "docker-compose build"
                    run:  "./_scripts/dc.sh build"
                }, {
                    name: "Start gitea services"
                    run:  "./_scripts/dc.sh up -d cmd_gitea"
                }, {
                    name: "Verify"
                    run:  "go mod verify"
                }, {
                    name: "Re-generate guides"
                    run:  "_scripts/generateGuides.sh"
                }, {
                    name:                "Race check re-generating guides"
                    run:                 "go run -race github.com/play-with-go/preguide/cmd/preguide gen -out ../_posts"
                    "working-directory": "./guides"
                    if:                  "${{ github.event_name == 'schedule' }}"
                }, {
                    name: "Re-generate everything else"
                    run:  "_scripts/generateEverythingElse.sh"
                }, {
                    name: "Tidy"
                    run:  "go mod tidy"
                }, {
                    name: "Verify commit is clean"
                    run:  "test -z \"$(git status --porcelain)\" || (git status; git diff; false)"
                }, {
                    name: "Run unity tests"
                    run:  "go run github.com/cue-sh/unity/cmd/unity test"
                }, {
                    name: "Verify commit is clean"
                    run:  "test -z \"$(git status --porcelain)\" || (git status; git diff; false)"
                }, {
                    name: "Publish site"
                    run:  "_scripts/publishSite.sh"
                }]
            }
        }
        #: {
            "working-directory": string
        }
    }
}, {
    file: "wip.yml"
    schema: {
        #architecture: "ARM32" | "x64" | "x86"
        name:          "WIP"
        #branch: [strings.MinRunes(1)]
        #configuration: string | number | {} | []
        #container:     string | {
            image: string
        }
        #defaults: {}
        #env: {}
        #event:       "check_run" | "check_suite" | "create" | "delete" | "deployment" | "deployment_status" | "fork" | "gollum" | "issue_comment" | "issues" | "label" | "member" | "milestone" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "status" | "watch" | "repository_dispatch"
        #eventObject: null | {}
        #globs: [strings.MinRunes(1)]
        #machine: "linux" | "macos" | "windows"
        #name:    =~"^[_a-zA-Z][a-zA-Z0-9_-]*$"
        #path: [strings.MinRunes(1)]
        #ref:   null | {}
        #shell: string | "bash" | "pwsh" | "python" | "sh" | "cmd" | "powershell"
        #types: [_]
        on: {
            pull_request: {
                types: ["opened", "synchronize", "reopened", "edited"]
            }
        }
        #: {
            "working-directory": string
        }
        jobs: {
            wip: {
                env: {
                    GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
                }
                "runs-on": "ubuntu-18.04"
                steps: [{
                    uses: "myitcv/wip@v1.0.0"
                    with: {
                        token: "${{ secrets.GITHUB_TOKEN }}"
                    }
                }]
            }
        }
    }
}]
#testWorkflow: {
    #architecture: "ARM32" | "x64" | "x86"
    #branch: [strings.MinRunes(1)]
    #configuration: string | number | {} | []
    #container:     string | {
        image: string
    }
    #defaults: {}
    #env: {}
    #event:       "check_run" | "check_suite" | "create" | "delete" | "deployment" | "deployment_status" | "fork" | "gollum" | "issue_comment" | "issues" | "label" | "member" | "milestone" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "status" | "watch" | "repository_dispatch"
    #eventObject: null | {}
    #globs: [strings.MinRunes(1)]
    #machine: "linux" | "macos" | "windows"
    #name:    =~"^[_a-zA-Z][a-zA-Z0-9_-]*$"
    #path: [strings.MinRunes(1)]
    #ref:   null | {}
    #shell: string | "bash" | "pwsh" | "python" | "sh" | "cmd" | "powershell"
    #types: [_]
    on: "check_run" | "check_suite" | "create" | "delete" | "deployment" | "deployment_status" | "fork" | "gollum" | "issue_comment" | "issues" | "label" | "member" | "milestone" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "status" | "watch" | "repository_dispatch" | ["check_run" | "check_suite" | "create" | "delete" | "deployment" | "deployment_status" | "fork" | "gollum" | "issue_comment" | "issues" | "label" | "member" | "milestone" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "status" | "watch" | "repository_dispatch"] | {}
    env: {
        DOCKER_HUB_USER:                    "playwithgopher"
        DOCKER_HUB_TOKEN:                   "${{ secrets.DOCKER_HUB_TOKEN }}"
        PREGUIDE_DEBUG:                     true
        PLAYWITHGODEV_CONTRIBUTOR_USER:     "playwithgopher_github"
        PLAYWITHGODEV_CONTRIBUTOR_PASSWORD: "${{ secrets.PLAYWITHGODEV_CONTRIBUTOR_PASSWORD }}"
        PLAYWITHGOPHER_GITHUB_PAT:          "${{ secrets.PLAYWITHGOPHER_GITHUB_PAT }}"
    }
    #: {
        "working-directory": string
    }
    jobs: {
        test: {
            strategy: {
                "fail-fast": false
                matrix: {
                    go_version: ["1.16.3"]
                }
            }
            "runs-on": "${{ matrix.os }}"
            steps: [{
                name: "Checkout code"
                uses: "actions/checkout@v2"
            }, {
                name: "Install Go"
                uses: "actions/setup-go@v2"
                with: {
                    "go-version": "${{ matrix.go_version }}"
                }
            }, {
                name: "Pre-download specific modules"
                run:  "go mod download github.com/play-with-go/preguide github.com/play-with-go/gitea"
            }, {
                name: "mac CI setup"
                run:  "./_scripts/macCISetup.sh"
                if:   "${{ matrix.os == 'macos-latest' }}"
            }, {
                name: "Ensure docker setup"
                run:  "./_scripts/ensureDocker.sh"
            }, {
                name: "Env setup"
                run:  "./_scripts/env.sh github"
            }, {
                name: "docker-compose build"
                run:  "./_scripts/dc.sh build"
            }, {
                name: "Start gitea services"
                run:  "./_scripts/dc.sh up -d cmd_gitea"
            }, {
                name: "Verify"
                run:  "go mod verify"
            }, {
                name: "Re-generate guides"
                run:  "_scripts/generateGuides.sh"
            }, {
                name:                "Race check re-generating guides"
                run:                 "go run -race github.com/play-with-go/preguide/cmd/preguide gen -out ../_posts"
                "working-directory": "./guides"
                if:                  "${{ github.event_name == 'schedule' }}"
            }, {
                name: "Re-generate everything else"
                run:  "_scripts/generateEverythingElse.sh"
            }, {
                name: "Tidy"
                run:  "go mod tidy"
            }, {
                name: "Verify commit is clean"
                run:  "test -z \"$(git status --porcelain)\" || (git status; git diff; false)"
            }, {
                name: "Run unity tests"
                run:  "go run github.com/cue-sh/unity/cmd/unity test"
            }, {
                name: "Verify commit is clean"
                run:  "test -z \"$(git status --porcelain)\" || (git status; git diff; false)"
            }, {
                name: "Publish site"
                run:  "_scripts/publishSite.sh"
            }]
        }
    }
}
test: {
    name:          "Test"
    #architecture: "ARM32" | "x64" | "x86"
    #branch: [strings.MinRunes(1)]
    #configuration: string | number | {} | []
    #container:     string | {
        image: string
    }
    #defaults: {}
    #env: {}
    #event:       "check_run" | "check_suite" | "create" | "delete" | "deployment" | "deployment_status" | "fork" | "gollum" | "issue_comment" | "issues" | "label" | "member" | "milestone" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "status" | "watch" | "repository_dispatch"
    #eventObject: null | {}
    #globs: [strings.MinRunes(1)]
    #machine: "linux" | "macos" | "windows"
    #name:    =~"^[_a-zA-Z][a-zA-Z0-9_-]*$"
    #path: [strings.MinRunes(1)]
    #ref:   null | {}
    #shell: string | "bash" | "pwsh" | "python" | "sh" | "cmd" | "powershell"
    #types: [_]
    on: {
        push: {
            branches: ["main"]
            tags: ["v*"]
        }
        pull_request: {
            branches: ["**"]
        }
        schedule: [{
            cron: "0 9 * * *"
        }]
    }
    env: {
        DOCKER_HUB_USER:                    "playwithgopher"
        DOCKER_HUB_TOKEN:                   "${{ secrets.DOCKER_HUB_TOKEN }}"
        PREGUIDE_DEBUG:                     true
        PLAYWITHGODEV_CONTRIBUTOR_USER:     "playwithgopher_github"
        PLAYWITHGODEV_CONTRIBUTOR_PASSWORD: "${{ secrets.PLAYWITHGODEV_CONTRIBUTOR_PASSWORD }}"
        PLAYWITHGOPHER_GITHUB_PAT:          "${{ secrets.PLAYWITHGOPHER_GITHUB_PAT }}"
    }
    jobs: {
        test: {
            strategy: {
                "fail-fast": false
                matrix: {
                    go_version: ["1.16.3"]
                    os: ["ubuntu-18.04"]
                }
            }
            "runs-on": "${{ matrix.os }}"
            steps: [{
                name: "Checkout code"
                uses: "actions/checkout@v2"
            }, {
                name: "Install Go"
                uses: "actions/setup-go@v2"
                with: {
                    "go-version": "${{ matrix.go_version }}"
                }
            }, {
                name: "Pre-download specific modules"
                run:  "go mod download github.com/play-with-go/preguide github.com/play-with-go/gitea"
            }, {
                name: "mac CI setup"
                run:  "./_scripts/macCISetup.sh"
                if:   "${{ matrix.os == 'macos-latest' }}"
            }, {
                name: "Ensure docker setup"
                run:  "./_scripts/ensureDocker.sh"
            }, {
                name: "Env setup"
                run:  "./_scripts/env.sh github"
            }, {
                name: "docker-compose build"
                run:  "./_scripts/dc.sh build"
            }, {
                name: "Start gitea services"
                run:  "./_scripts/dc.sh up -d cmd_gitea"
            }, {
                name: "Verify"
                run:  "go mod verify"
            }, {
                name: "Re-generate guides"
                run:  "_scripts/generateGuides.sh"
            }, {
                name:                "Race check re-generating guides"
                run:                 "go run -race github.com/play-with-go/preguide/cmd/preguide gen -out ../_posts"
                "working-directory": "./guides"
                if:                  "${{ github.event_name == 'schedule' }}"
            }, {
                name: "Re-generate everything else"
                run:  "_scripts/generateEverythingElse.sh"
            }, {
                name: "Tidy"
                run:  "go mod tidy"
            }, {
                name: "Verify commit is clean"
                run:  "test -z \"$(git status --porcelain)\" || (git status; git diff; false)"
            }, {
                name: "Run unity tests"
                run:  "go run github.com/cue-sh/unity/cmd/unity test"
            }, {
                name: "Verify commit is clean"
                run:  "test -z \"$(git status --porcelain)\" || (git status; git diff; false)"
            }, {
                name: "Publish site"
                run:  "_scripts/publishSite.sh"
            }]
        }
    }
    #: {
        "working-directory": string
    }
}
testmac: {
    name:          "TestMac"
    #architecture: "ARM32" | "x64" | "x86"
    #branch: [strings.MinRunes(1)]
    #configuration: string | number | {} | []
    #container:     string | {
        image: string
    }
    #defaults: {}
    #env: {}
    #event:       "check_run" | "check_suite" | "create" | "delete" | "deployment" | "deployment_status" | "fork" | "gollum" | "issue_comment" | "issues" | "label" | "member" | "milestone" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "status" | "watch" | "repository_dispatch"
    #eventObject: null | {}
    #globs: [strings.MinRunes(1)]
    #machine: "linux" | "macos" | "windows"
    #name:    =~"^[_a-zA-Z][a-zA-Z0-9_-]*$"
    #path: [strings.MinRunes(1)]
    #ref:   null | {}
    #shell: string | "bash" | "pwsh" | "python" | "sh" | "cmd" | "powershell"
    #types: [_]
    on: {
        schedule: [{
            cron: "0 9 * * *"
        }]
    }
    env: {
        DOCKER_HUB_USER:                    "playwithgopher"
        DOCKER_HUB_TOKEN:                   "${{ secrets.DOCKER_HUB_TOKEN }}"
        PREGUIDE_DEBUG:                     true
        PLAYWITHGODEV_CONTRIBUTOR_USER:     "playwithgopher_github"
        PLAYWITHGODEV_CONTRIBUTOR_PASSWORD: "${{ secrets.PLAYWITHGODEV_CONTRIBUTOR_PASSWORD }}"
        PLAYWITHGOPHER_GITHUB_PAT:          "${{ secrets.PLAYWITHGOPHER_GITHUB_PAT }}"
    }
    jobs: {
        test: {
            strategy: {
                "fail-fast": false
                matrix: {
                    go_version: ["1.16.3"]
                    os: ["macos-latest"]
                }
            }
            "runs-on": "${{ matrix.os }}"
            steps: [{
                name: "Checkout code"
                uses: "actions/checkout@v2"
            }, {
                name: "Install Go"
                uses: "actions/setup-go@v2"
                with: {
                    "go-version": "${{ matrix.go_version }}"
                }
            }, {
                name: "Pre-download specific modules"
                run:  "go mod download github.com/play-with-go/preguide github.com/play-with-go/gitea"
            }, {
                name: "mac CI setup"
                run:  "./_scripts/macCISetup.sh"
                if:   "${{ matrix.os == 'macos-latest' }}"
            }, {
                name: "Ensure docker setup"
                run:  "./_scripts/ensureDocker.sh"
            }, {
                name: "Env setup"
                run:  "./_scripts/env.sh github"
            }, {
                name: "docker-compose build"
                run:  "./_scripts/dc.sh build"
            }, {
                name: "Start gitea services"
                run:  "./_scripts/dc.sh up -d cmd_gitea"
            }, {
                name: "Verify"
                run:  "go mod verify"
            }, {
                name: "Re-generate guides"
                run:  "_scripts/generateGuides.sh"
            }, {
                name:                "Race check re-generating guides"
                run:                 "go run -race github.com/play-with-go/preguide/cmd/preguide gen -out ../_posts"
                "working-directory": "./guides"
                if:                  "${{ github.event_name == 'schedule' }}"
            }, {
                name: "Re-generate everything else"
                run:  "_scripts/generateEverythingElse.sh"
            }, {
                name: "Tidy"
                run:  "go mod tidy"
            }, {
                name: "Verify commit is clean"
                run:  "test -z \"$(git status --porcelain)\" || (git status; git diff; false)"
            }, {
                name: "Run unity tests"
                run:  "go run github.com/cue-sh/unity/cmd/unity test"
            }, {
                name: "Verify commit is clean"
                run:  "test -z \"$(git status --porcelain)\" || (git status; git diff; false)"
            }, {
                name: "Publish site"
                run:  "_scripts/publishSite.sh"
            }]
        }
    }
    #: {
        "working-directory": string
    }
}
wip: {
    #architecture: "ARM32" | "x64" | "x86"
    #branch: [strings.MinRunes(1)]
    #configuration: string | number | {} | []
    #container:     string | {
        image: string
    }
    #defaults: {}
    #env: {}
    #event:       "check_run" | "check_suite" | "create" | "delete" | "deployment" | "deployment_status" | "fork" | "gollum" | "issue_comment" | "issues" | "label" | "member" | "milestone" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "status" | "watch" | "repository_dispatch"
    #eventObject: null | {}
    #globs: [strings.MinRunes(1)]
    #machine: "linux" | "macos" | "windows"
    #name:    =~"^[_a-zA-Z][a-zA-Z0-9_-]*$"
    #path: [strings.MinRunes(1)]
    #ref:   null | {}
    #shell: string | "bash" | "pwsh" | "python" | "sh" | "cmd" | "powershell"
    #types: [_]
    name: "WIP"
    on: {
        pull_request: {
            types: ["opened", "synchronize", "reopened", "edited"]
        }
    }
    #: {
        "working-directory": string
    }
    jobs: {
        wip: {
            env: {
                GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
            }
            "runs-on": "ubuntu-18.04"
            steps: [{
                uses: "myitcv/wip@v1.0.0"
                with: {
                    token: "${{ secrets.GITHUB_TOKEN }}"
                }
            }]
        }
    }
}
