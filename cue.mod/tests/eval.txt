# Verify that a simple eval works as expect

# eval
cue eval ./...

# Compare vs golden files
cmp stdout $WORK/stdout.golden

-- stdout.golden --
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Steps: {}
// ---
"2022-09-23-london-gophers-cue": {
    Delims: ["{{{", "}}}"]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/cue_v0.4.3_go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }]
    Scenarios: [{
        Name:        "go119"
        Description: "cue v0.4.3 Go 1.19"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2021-05-06-gosheffield-demo": {
    Delims: ["{{{", "}}}"]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }]
    Scenarios: [{
        Name:        "go119"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-11-19-major-version-repository-structure": {
    Delims: ["{{{", "}}}"]
    Presteps: [{
        Package: "github.com/play-with-go/gitea"
        Path:    "/newuser"
        Args: {
            Repos: [{
                Pattern: "branch"
                Private: false
                Var:     "BRANCH"
            }, {
                Pattern: "subdir"
                Private: false
                Var:     "SUBDIR"
            }]
        }
    }]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }]
    Scenarios: [{
        Name:        "go119"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-11-12-working-with-private-modules": {
    Delims: ["{{{", "}}}"]
    Presteps: [{
        Package: "github.com/play-with-go/gitea"
        Path:    "/newuser"
        Args: {
            Repos: [{
                Pattern: "public"
                Private: false
                Var:     "PUBLIC"
            }, {
                Pattern: "private"
                Private: true
                Var:     "PRIVATE"
            }]
        }
    }]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }]
    Scenarios: [{
        Name:        "go119"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-11-09-using-staticcheck": {
    Delims: ["{{{", "}}}"]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }]
    Scenarios: [{
        Name:        "go119"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-11-09-installing-go-programs-directly": {
    Delims: ["{{{", "}}}"]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }]
    Scenarios: [{
        Name:        "go119"
        Description: "Go 1.16"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-11-08-retract-module-versions": {
    Delims: ["{{{", "}}}"]
    Presteps: [{
        Package: "github.com/play-with-go/gitea"
        Path:    "/newuser"
        Args: {
            Repos: [{
                Pattern: "proverb"
                Private: false
                Var:     "PROVERB"
            }]
        }
    }]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }]
    Scenarios: [{
        Name:        "go119"
        Description: "Go 1.16"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-11-05-tools-as-dependencies": {
    Delims: ["{{{", "}}}"]
    Presteps: [{
        Package: "github.com/play-with-go/gitea"
        Path:    "/newuser"
        Args: {
            Repos: [{
                Pattern: "painkiller"
                Private: false
                Var:     "PAINKILLER"
            }]
        }
    }]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }]
    Scenarios: [{
        Name:        "go119"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-10-07-intro-to-play-with-go-dev": {
    Delims: ["{{{", "}}}"]
    Presteps: [{
        Package: "github.com/play-with-go/gitea"
        Path:    "/newuser"
        Args: {
            Repos: [{
                Pattern: "hello"
                Private: false
                Var:     "REPO1"
            }]
        }
    }]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }]
    Scenarios: [{
        Name:        "go119"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-09-01-basic-go-modules-example": {
    Delims: ["{{{", "}}}"]
    Presteps: [{
        Package: "github.com/play-with-go/gitea"
        Path:    "/newuser"
        Args: {
            Repos: [{
                Pattern: "mod1"
                Private: false
                Var:     "REPO1"
            }]
        }
    }]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }]
    Scenarios: [{
        Name:        "go119"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2020-08-13-installing-go": {
    Delims: ["{{{", "}}}"]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/installgo1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }]
    Scenarios: [{
        Name:        "go119"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2019-10-15-get-started-with-go": {
    Delims: ["{{{", "}}}"]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }]
    Scenarios: [{
        Name:        "go119"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
"2018-10-19-go-fundamentals": {
    Delims: ["{{{", "}}}"]
    Presteps: [{
        Package: "github.com/play-with-go/gitea"
        Path:    "/newuser"
        Args: {
            Repos: [{
                Pattern: "greetings"
                Private: false
                Var:     "GREETINGS"
            }, {
                Pattern: "hello"
                Private: false
                Var:     "HELLO"
            }]
        }
    }]
    Terminals: [{
        Name:        "term1"
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }]
    Scenarios: [{
        Name:        "go119"
        Description: "Go 1.15"
    }]
    Networks: ["playwithgo_pwg"]
    Env: []
}
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Var:     "GREETINGS"
            Pattern: "greetings"
            Private: false
        }, {
            Var:     "HELLO"
            Pattern: "hello"
            Private: false
        }]
    }
}]
Defs: {
    username:          "{{{.GITEA_USERNAME}}}"
    greetings:         "greetings"
    greetings_vcs:     "https://{{{.GREETINGS}}}.git"
    greetings_mod:     "{{{.GREETINGS}}}"
    greetings_dir:     "/home/gopher/greetings"
    greetings_go:      "greetings.go"
    greetings_test_go: "greetings_test.go"
    hello:             "hello"
    hello_vcs:         "https://{{{.HELLO}}}.git"
    hello_mod:         "{{{.HELLO}}}"
    hello_dir:         "/home/gopher/hello"
    hello_go:          "hello.go"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    greeting_log_prefix: "greetings: "
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go119: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }
}
Steps: {
    goversion: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd: "go version"
            Sanitisers: [{
                Pattern:     "linux\\/.+(?:\\n$)"
                Replacement: "linux/amd64"
            }]
        }]
        Terminal: string
    }
    pwd_home: {
        Name:     string
        StepType: 1
        Stmts:    "pwd"
        Terminal: string
    }
    mkdir_greetings: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir /home/gopher/greetings
            cd /home/gopher/greetings
            """
        Terminal: string
    }
    gomodinit_greetings: {
        Name:     string
        StepType: 1
        Stmts:    "go mod init {{{.GREETINGS}}}"
        Terminal: string
    }
    cat_gomodgreetings: {
        Name:     string
        StepType: 1
        Stmts:    "cat go.mod"
        Terminal: string
    }
    create_greetingsgo: {
        Name:     string
        StepType: 3
        Source: """
            package greetings

            import "fmt"

            // Hello returns a greeting for the named person.
            func Hello(name string) string {
            \t// Return a greeting that embeds the name in a message.
            \tmessage := fmt.Sprintf("Hi, %v. Welcome!", name)
            \treturn message
            }

            """
        Target:   "/home/gopher/greetings/greetings.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    create_greetingsgo_long: {
        Name:     string
        StepType: 3
        Source: """
            package greetings

            import "fmt"

            // Hello returns a greeting for the named person.
            func Hello(name string) string {
            \t// Return a greeting that embeds the name in a message.
            \tvar message string
            \tmessage = fmt.Sprintf("Hi, %v. Welcome!", name)
            \treturn message
            }

            """
        Target:   "/home/gopher/greetings/greetings.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import "fmt"

                // Hello returns a greeting for the named person.
                func Hello(name string) string {
                \t// Return a greeting that embeds the name in a message.
                \tmessage := fmt.Sprintf("Hi, %v. Welcome!", name)
                \treturn message
                }

                """
        }
        Terminal: string
    }
    greetings_gitinit: {
        Name:     string
        StepType: 1
        Stmts: """
            git init -q
            git remote add origin https://{{{.GREETINGS}}}.git
            """
        Terminal: string
    }
    greetings_gitadd: {
        Name:     string
        StepType: 1
        Stmts: """
            git add go.mod greetings.go
            git commit -q -m 'Initial commit'
            """
        Terminal: string
    }
    greetings_check_porcelain: {
        Name:            string
        StepType:        1
        Stmts:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    greetings_gitpush: {
        Name:     string
        StepType: 1
        Stmts:    "git push -q origin main"
        Terminal: string
    }
    mkdir_hello: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir /home/gopher/hello
            cd /home/gopher/hello
            """
        Terminal: string
    }
    gomodinit_hello: {
        Name:     string
        StepType: 1
        Stmts:    "go mod init {{{.HELLO}}}"
        Terminal: string
    }
    goget_greetings: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd:               "go get {{{.GREETINGS}}}"
            UnstableLineOrder: true
        }]
        Terminal: string
    }
    golist_greetings: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd:           "go list -m -f {{.Version}} {{{.GREETINGS}}}"
            RandomReplace: "v0.0.0-20060102150405-abcedf12345"
        }]
        InformationOnly: true
        Terminal:        string
    }
    create_hellogo: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t"fmt"

            \t"{{{.GREETINGS}}}"
            )

            func main() {
            \t// Get a greeting message and print it.
            \tmessage := greetings.Hello("Gladys")
            \tfmt.Println(message)
            }

            """
        Target:   "/home/gopher/hello/hello.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    buildrun_hello: {
        Name:     string
        StepType: 1
        Stmts: """
            go build
            ./hello
            """
        Terminal: string
    }
    cd_greetings: {
        Name:     string
        StepType: 1
        Stmts:    "cd /home/gopher/greetings"
        Terminal: string
    }
    update_greetings_go: {
        Name:     string
        StepType: 3
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn "", errors.New("empty name")
            \t}

            \t// If a name was received, return a value that embeds the name
            \t// in a greeting message.
            \tmessage := fmt.Sprintf("Hi, %v. Welcome!", name)
            \treturn message, nil
            }

            """
        Target:   "/home/gopher/greetings/greetings.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import "fmt"

                // Hello returns a greeting for the named person.
                func Hello(name string) string {
                \t// Return a greeting that embeds the name in a message.
                \tvar message string
                \tmessage = fmt.Sprintf("Hi, %v. Welcome!", name)
                \treturn message
                }

                """
        }
        Terminal: string
    }
    commit_greetings_error_handling: {
        Name:     string
        StepType: 1
        Stmts: """
            git add greetings.go
            git commit -q -m 'Added error handling'
            """
        Terminal: string
    }
    greetings_check_error_handling_porcelain: {
        Name:            string
        StepType:        1
        Stmts:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    greetings_error_commit: {
        Name:     string
        StepType: 1
        Stmts:    "greetings_error_commit=$(git rev-parse HEAD)"
        Terminal: string
    }
    echo_greetings_error_commit: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd:           "git rev-parse HEAD"
            RandomReplace: "v0.0.0-20060102150405-abcedf12345"
        }]
        InformationOnly: true
        Terminal:        string
    }
    republish_greetings: {
        Name:     string
        StepType: 1
        Stmts:    "git push -q origin main"
        Terminal: string
    }
    cd_hello: {
        Name:     string
        StepType: 1
        Stmts:    "cd /home/gopher/hello"
        Terminal: string
    }
    get_latest_greetings: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd:               "go get {{{.GREETINGS}}}@$greetings_error_commit"
            UnstableLineOrder: true
        }]
        Terminal: string
    }
    golist_latest_greetings: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd:           "go list -m -f {{.Version}} {{{.GREETINGS}}}"
            RandomReplace: "v0.0.0-20060102150405-abcedf12345"
        }]
        InformationOnly: true
        Terminal:        string
    }
    update_hello_go_error: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t"fmt"
            \t"log"

            \t"{{{.GREETINGS}}}"
            )

            func main() {
            \t// Set properties of the predefined Logger, including
            \t// the log entry prefix and a flag to disable printing
            \t// the time, source file, and line number.
            \tlog.SetPrefix("greetings: ")
            \tlog.SetFlags(0)

            \t// Request a greeting message.
            \tmessage, err := greetings.Hello("")
            \t// If an error was returned, print it to the console and
            \t// exit the program.
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}

            \t// If no error was returned, print the returned message
            \t// to the console.
            \tfmt.Println(message)
            }

            """
        Target:   "/home/gopher/hello/hello.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import (
                \t"fmt"

                \t"{{{.GREETINGS}}}"
                )

                func main() {
                \t// Get a greeting message and print it.
                \tmessage := greetings.Hello("Gladys")
                \tfmt.Println(message)
                }

                """
        }
        Terminal: string
    }
    run_hello_error: {
        Name:     string
        StepType: 1
        Stmts:    "! go run hello.go"
        Terminal: string
    }
    cd_greetings_random: {
        Name:     string
        StepType: 1
        Stmts:    "cd /home/gopher/greetings"
        Terminal: string
    }
    update_greetings_go_random: {
        Name:     string
        StepType: 3
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            \t"math/rand"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn name, errors.New("empty name")
            \t}
            \t// Create a message using a random format.
            \tmessage := fmt.Sprintf(randomFormat(), name)
            \treturn message, nil
            }

            // init sets initial values for variables used in the function.
            func init() {
            \t// For truly random greetings, import "time" and replace the call
            \t// to rand.Seed with:
            \t//
            \t// rand.Seed(time.Now().UnixNano())
            \t//
            \t// Calling rand.Seed with a constant value means that we always
            \t// generate the same pseudo-random sequence.
            \trand.Seed(1)
            }

            // randomFormat returns one of a set of greeting messages. The returned
            // message is selected at random.
            func randomFormat() string {
            \t// A slice of message formats.
            \tformats := []string{
            \t\t"Hi, %v. Welcome!",
            \t\t"Great to see you, %v!",
            \t\t"Hail, %v! Well met!",
            \t}

            \t// Return one of the message formats selected at random.
            \treturn formats[rand.Intn(len(formats))]
            }

            """
        Target:   "/home/gopher/greetings/greetings.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import "fmt"

                // Hello returns a greeting for the named person.
                func Hello(name string) string {
                \t// Return a greeting that embeds the name in a message.
                \tmessage := fmt.Sprintf("Hi, %v. Welcome!", name)
                \treturn message
                }

                """
        }
        Terminal: string
    }
    greeings_commit_random: {
        Name:     string
        StepType: 1
        Stmts: """
            git add greetings.go
            git commit -q -m 'Added random format'
            """
        Terminal: string
    }
    greetings_check_random_porcelain: {
        Name:            string
        StepType:        1
        Stmts:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    greetings_random_commit: {
        Name:     string
        StepType: 1
        Stmts:    "greetings_random_commit=$(git rev-parse HEAD)"
        Terminal: string
    }
    greetings_echo_random_commit: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd:           "git rev-parse HEAD"
            RandomReplace: "v0.0.0-20060102150405-abcedf12345"
        }]
        InformationOnly: true
        Terminal:        string
    }
    greetings_publish_random: {
        Name:     string
        StepType: 1
        Stmts:    "git push -q origin main"
        Terminal: string
    }
    hello_use_random: {
        Name:     string
        StepType: 1
        Stmts: """
            cd /home/gopher/hello
            go get {{{.GREETINGS}}}@$greetings_random_commit
            """
        Terminal: string
    }
    hello_golist_random_greetings: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd:           "go list -m -f {{.Version}} {{{.GREETINGS}}}"
            RandomReplace: "v0.0.0-20060102150405-abcedf12345"
        }]
        InformationOnly: true
        Terminal:        string
    }
    hello_go_readd_gladys: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t"fmt"
            \t"log"

            \t"{{{.GREETINGS}}}"
            )

            func main() {
            \t// Set properties of the predefined Logger, including
            \t// the log entry prefix and a flag to disable printing
            \t// the time, source file, and line number.
            \tlog.SetPrefix("greetings: ")
            \tlog.SetFlags(0)

            \t// Request a greeting message.
            \tmessage, err := greetings.Hello("Gladys")
            \t// If an error was returned, print it to the console and
            \t// exit the program.
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}

            \t// If no error was returned, print the returned message
            \t// to the console.
            \tfmt.Println(message)
            }

            """
        Target:   "/home/gopher/hello/hello.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import (
                \t"fmt"
                \t"log"

                \t"{{{.GREETINGS}}}"
                )

                func main() {
                \t// Set properties of the predefined Logger, including
                \t// the log entry prefix and a flag to disable printing
                \t// the time, source file, and line number.
                \tlog.SetPrefix("greetings: ")
                \tlog.SetFlags(0)

                \t// Request a greeting message.
                \tmessage, err := greetings.Hello("")
                \t// If an error was returned, print it to the console and
                \t// exit the program.
                \tif err != nil {
                \t\tlog.Fatal(err)
                \t}

                \t// If no error was returned, print the returned message
                \t// to the console.
                \tfmt.Println(message)
                }

                """
        }
        Terminal: string
    }
    hello_run_random: {
        Name:     string
        StepType: 1
        Stmts: """
            go run hello.go
            go run hello.go
            """
        Terminal: string
    }
    greetings_start_multiple: {
        Name:     string
        StepType: 1
        Stmts:    "cd /home/gopher/greetings"
        Terminal: string
    }
    greetings_go_multiple_people: {
        Name:     string
        StepType: 3
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            \t"math/rand"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn name, errors.New("empty name")
            \t}
            \t// Create a message using a random format.
            \tmessage := fmt.Sprintf(randomFormat(), name)
            \treturn message, nil
            }

            // Hellos returns a map that associates each of the named people
            // with a greeting message.
            func Hellos(names []string) (map[string]string, error) {
            \t// A map to associate names with messages.
            \tmessages := make(map[string]string)
            \t// Loop through the received slice of names, calling
            \t// the Hello function to get a message for each name.
            \tfor _, name := range names {
            \t\tmessage, err := Hello(name)
            \t\tif err != nil {
            \t\t\treturn nil, err
            \t\t}
            \t\t// In the map, associate the retrieved message with
            \t\t// the name.
            \t\tmessages[name] = message
            \t}
            \treturn messages, nil
            }

            // init sets initial values for variables used in the function.
            func init() {
            \t// For truly random greetings, import "time" and replace the call
            \t// to rand.Seed with:
            \t//
            \t// rand.Seed(time.Now().UnixNano())
            \t//
            \t// Calling rand.Seed with a constant value means that we always
            \t// generate the same pseudo-random sequence.
            \trand.Seed(1)
            }

            // randomFormat returns one of a set of greeting messages. The returned
            // message is selected at random.
            func randomFormat() string {
            \t// A slice of message formats.
            \tformats := []string{
            \t\t"Hi, %v. Welcome!",
            \t\t"Great to see you, %v!",
            \t\t"Hail, %v! Well met!",
            \t}

            \t// Return one of the message formats selected at random.
            \treturn formats[rand.Intn(len(formats))]
            }

            """
        Target:   "/home/gopher/greetings/greetings.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import (
                \t"errors"
                \t"fmt"
                \t"math/rand"
                )

                // Hello returns a greeting for the named person.
                func Hello(name string) (string, error) {
                \t// If no name was given, return an error with a message.
                \tif name == "" {
                \t\treturn name, errors.New("empty name")
                \t}
                \t// Create a message using a random format.
                \tmessage := fmt.Sprintf(randomFormat(), name)
                \treturn message, nil
                }

                // init sets initial values for variables used in the function.
                func init() {
                \t// For truly random greetings, import "time" and replace the call
                \t// to rand.Seed with:
                \t//
                \t// rand.Seed(time.Now().UnixNano())
                \t//
                \t// Calling rand.Seed with a constant value means that we always
                \t// generate the same pseudo-random sequence.
                \trand.Seed(1)
                }

                // randomFormat returns one of a set of greeting messages. The returned
                // message is selected at random.
                func randomFormat() string {
                \t// A slice of message formats.
                \tformats := []string{
                \t\t"Hi, %v. Welcome!",
                \t\t"Great to see you, %v!",
                \t\t"Hail, %v! Well met!",
                \t}

                \t// Return one of the message formats selected at random.
                \treturn formats[rand.Intn(len(formats))]
                }

                """
        }
        Terminal: string
    }
    hello_use_multiple: {
        Name:     string
        StepType: 1
        Stmts:    "cd /home/gopher/hello"
        Terminal: string
    }
    hello_replace_greetings: {
        Name:     string
        StepType: 1
        Stmts:    "go mod edit -replace {{{.GREETINGS}}}=/home/gopher/greetings"
        Terminal: string
    }
    hello_cat_go_mod_replace: {
        Name:     string
        StepType: 1
        Stmts:    "cat go.mod"
        Terminal: string
    }
    hello_go_call_multiple: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t"fmt"
            \t"log"

            \t"{{{.GREETINGS}}}"
            )

            func main() {
            \t// Set properties of the predefined Logger, including
            \t// the log entry prefix and a flag to disable printing
            \t// the time, source file, and line number.
            \tlog.SetPrefix("greetings: ")
            \tlog.SetFlags(0)

            \t// A slice of names.
            \tnames := []string{"Gladys", "Samantha", "Darrin"}

            \t// Request greeting messages for the names.
            \tmessages, err := greetings.Hellos(names)
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}
            \t// If no error was returned, print the returned map of
            \t// messages to the console.
            \tfmt.Println(messages)
            }

            """
        Target:   "/home/gopher/hello/hello.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import (
                \t"fmt"
                \t"log"

                \t"{{{.GREETINGS}}}"
                )

                func main() {
                \t// Set properties of the predefined Logger, including
                \t// the log entry prefix and a flag to disable printing
                \t// the time, source file, and line number.
                \tlog.SetPrefix("greetings: ")
                \tlog.SetFlags(0)

                \t// Request a greeting message.
                \tmessage, err := greetings.Hello("Gladys")
                \t// If an error was returned, print it to the console and
                \t// exit the program.
                \tif err != nil {
                \t\tlog.Fatal(err)
                \t}

                \t// If no error was returned, print the returned message
                \t// to the console.
                \tfmt.Println(message)
                }

                """
        }
        Terminal: string
    }
    hello_run_multiple: {
        Name:     string
        StepType: 1
        Stmts:    "go run hello.go"
        Terminal: string
    }
    greetings_return_to_write_test: {
        Name:     string
        StepType: 1
        Stmts:    "cd /home/gopher/greetings"
        Terminal: string
    }
    greetings_create_greetings_test_go: {
        Name:     string
        StepType: 3
        Source: """
            package greetings

            import (
            \t"regexp"
            \t"testing"
            )

            // TestHelloName calls greetings.Hello with a name, checking
            // for a valid return value.
            func TestHelloName(t *testing.T) {
            \tname := "Gladys"
            \twant := regexp.MustCompile(`\\b` + name + `\\b`)
            \tmsg, err := Hello(name)
            \tif !want.MatchString(msg) || err != nil {
            \t\tt.Fatalf(`Hello("Gladys") = %q, %v, want match for %#q, <nil>`, msg, err, want)
            \t}
            }

            // TestHelloEmpty calls greetings.Hello with an empty string,
            // checking for an error.
            func TestHelloEmpty(t *testing.T) {
            \tmsg, err := Hello("")
            \tif msg != "" || err == nil {
            \t\tt.Fatalf(`Hello("") = %q, %v, want "", error`, msg, err)
            \t}
            }

            """
        Target:   "/home/gopher/greetings/greetings_test.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    greetings_run_tests: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd: "go test"
            Sanitisers: []
            Comparators: [{
                Pattern:  "^( *--- (PASS|FAIL): .+\\()\\d+(\\.\\d+)?s\\)"
                LineWise: true
            }, {
                Pattern:  "^((FAIL|ok  )\\t.+\\t)\\d+(\\.\\d+)?s$"
                LineWise: true
            }]
        }, {
            Cmd: "go test -v"
            Sanitisers: []
            Comparators: [{
                Pattern:  "^( *--- (PASS|FAIL): .+\\()\\d+(\\.\\d+)?s\\)"
                LineWise: true
            }, {
                Pattern:  "^((FAIL|ok  )\\t.+\\t)\\d+(\\.\\d+)?s$"
                LineWise: true
            }]
        }]
        Terminal: string
    }
    greetings_go_break: {
        Name:     string
        StepType: 3
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            \t"math/rand"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn name, errors.New("empty name")
            \t}
            \t// Create a message using a random format.
            \t// message := fmt.Sprintf(randomFormat(), name)
            \tmessage := fmt.Sprint(randomFormat())
            \treturn message, nil
            }

            // Hellos returns a map that associates each of the named people
            // with a greeting message.
            func Hellos(names []string) (map[string]string, error) {
            \t// A map to associate names with messages.
            \tmessages := make(map[string]string)
            \t// Loop through the received slice of names, calling
            \t// the Hello function to get a message for each name.
            \tfor _, name := range names {
            \t\tmessage, err := Hello(name)
            \t\tif err != nil {
            \t\t\treturn nil, err
            \t\t}
            \t\t// In the map, associate the retrieved message with
            \t\t// the name.
            \t\tmessages[name] = message
            \t}
            \treturn messages, nil
            }

            // init sets initial values for variables used in the function.
            func init() {
            \t// For truly random greetings, import "time" and replace the call
            \t// to rand.Seed with:
            \t//
            \t// rand.Seed(time.Now().UnixNano())
            \t//
            \t// Calling rand.Seed with a constant value means that we always
            \t// generate the same pseudo-random sequence.
            \trand.Seed(1)
            }

            // randomFormat returns one of a set of greeting messages. The returned
            // message is selected at random.
            func randomFormat() string {
            \t// A slice of message formats.
            \tformats := []string{
            \t\t"Hi, %v. Welcome!",
            \t\t"Great to see you, %v!",
            \t\t"Hail, %v! Well met!",
            \t}

            \t// Return one of the message formats selected at random.
            \treturn formats[rand.Intn(len(formats))]
            }

            """
        Target:   "/home/gopher/greetings/greetings.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import (
                \t"errors"
                \t"fmt"
                \t"math/rand"
                )

                // Hello returns a greeting for the named person.
                func Hello(name string) (string, error) {
                \t// If no name was given, return an error with a message.
                \tif name == "" {
                \t\treturn name, errors.New("empty name")
                \t}
                \t// Create a message using a random format.
                \tmessage := fmt.Sprintf(randomFormat(), name)
                \treturn message, nil
                }

                // Hellos returns a map that associates each of the named people
                // with a greeting message.
                func Hellos(names []string) (map[string]string, error) {
                \t// A map to associate names with messages.
                \tmessages := make(map[string]string)
                \t// Loop through the received slice of names, calling
                \t// the Hello function to get a message for each name.
                \tfor _, name := range names {
                \t\tmessage, err := Hello(name)
                \t\tif err != nil {
                \t\t\treturn nil, err
                \t\t}
                \t\t// In the map, associate the retrieved message with
                \t\t// the name.
                \t\tmessages[name] = message
                \t}
                \treturn messages, nil
                }

                // init sets initial values for variables used in the function.
                func init() {
                \t// For truly random greetings, import "time" and replace the call
                \t// to rand.Seed with:
                \t//
                \t// rand.Seed(time.Now().UnixNano())
                \t//
                \t// Calling rand.Seed with a constant value means that we always
                \t// generate the same pseudo-random sequence.
                \trand.Seed(1)
                }

                // randomFormat returns one of a set of greeting messages. The returned
                // message is selected at random.
                func randomFormat() string {
                \t// A slice of message formats.
                \tformats := []string{
                \t\t"Hi, %v. Welcome!",
                \t\t"Great to see you, %v!",
                \t\t"Hail, %v! Well met!",
                \t}

                \t// Return one of the message formats selected at random.
                \treturn formats[rand.Intn(len(formats))]
                }

                """
        }
        Terminal: string
    }
    greetings_run_tests_fail: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd: "! go test"
            Sanitisers: []
            Comparators: [{
                Pattern:  "^( *--- (PASS|FAIL): .+\\()\\d+(\\.\\d+)?s\\)"
                LineWise: true
            }, {
                Pattern:  "^((FAIL|ok  )\\t.+\\t)\\d+(\\.\\d+)?s$"
                LineWise: true
            }]
        }]
        Terminal: string
    }
    greetings_go_restore: {
        Name:     string
        StepType: 3
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            \t"math/rand"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn name, errors.New("empty name")
            \t}
            \t// Create a message using a random format.
            \tmessage := fmt.Sprintf(randomFormat(), name)
            \treturn message, nil
            }

            // Hellos returns a map that associates each of the named people
            // with a greeting message.
            func Hellos(names []string) (map[string]string, error) {
            \t// A map to associate names with messages.
            \tmessages := make(map[string]string)
            \t// Loop through the received slice of names, calling
            \t// the Hello function to get a message for each name.
            \tfor _, name := range names {
            \t\tmessage, err := Hello(name)
            \t\tif err != nil {
            \t\t\treturn nil, err
            \t\t}
            \t\t// In the map, associate the retrieved message with
            \t\t// the name.
            \t\tmessages[name] = message
            \t}
            \treturn messages, nil
            }

            // init sets initial values for variables used in the function.
            func init() {
            \t// For truly random greetings, import "time" and replace the call
            \t// to rand.Seed with:
            \t//
            \t// rand.Seed(time.Now().UnixNano())
            \t//
            \t// Calling rand.Seed with a constant value means that we always
            \t// generate the same pseudo-random sequence.
            \trand.Seed(1)
            }

            // randomFormat returns one of a set of greeting messages. The returned
            // message is selected at random.
            func randomFormat() string {
            \t// A slice of message formats.
            \tformats := []string{
            \t\t"Hi, %v. Welcome!",
            \t\t"Great to see you, %v!",
            \t\t"Hail, %v! Well met!",
            \t}

            \t// Return one of the message formats selected at random.
            \treturn formats[rand.Intn(len(formats))]
            }

            """
        Target:   "/home/gopher/greetings/greetings.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import (
                \t"errors"
                \t"fmt"
                \t"math/rand"
                )

                // Hello returns a greeting for the named person.
                func Hello(name string) (string, error) {
                \t// If no name was given, return an error with a message.
                \tif name == "" {
                \t\treturn name, errors.New("empty name")
                \t}
                \t// Create a message using a random format.
                \t// message := fmt.Sprintf(randomFormat(), name)
                \tmessage := fmt.Sprint(randomFormat())
                \treturn message, nil
                }

                // Hellos returns a map that associates each of the named people
                // with a greeting message.
                func Hellos(names []string) (map[string]string, error) {
                \t// A map to associate names with messages.
                \tmessages := make(map[string]string)
                \t// Loop through the received slice of names, calling
                \t// the Hello function to get a message for each name.
                \tfor _, name := range names {
                \t\tmessage, err := Hello(name)
                \t\tif err != nil {
                \t\t\treturn nil, err
                \t\t}
                \t\t// In the map, associate the retrieved message with
                \t\t// the name.
                \t\tmessages[name] = message
                \t}
                \treturn messages, nil
                }

                // init sets initial values for variables used in the function.
                func init() {
                \t// For truly random greetings, import "time" and replace the call
                \t// to rand.Seed with:
                \t//
                \t// rand.Seed(time.Now().UnixNano())
                \t//
                \t// Calling rand.Seed with a constant value means that we always
                \t// generate the same pseudo-random sequence.
                \trand.Seed(1)
                }

                // randomFormat returns one of a set of greeting messages. The returned
                // message is selected at random.
                func randomFormat() string {
                \t// A slice of message formats.
                \tformats := []string{
                \t\t"Hi, %v. Welcome!",
                \t\t"Great to see you, %v!",
                \t\t"Hail, %v! Well met!",
                \t}

                \t// Return one of the message formats selected at random.
                \treturn formats[rand.Intn(len(formats))]
                }

                """
        }
        Terminal: string
    }
    greetings_check_tests_pass: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd: "go test"
            Sanitisers: []
            Comparators: [{
                Pattern:  "^( *--- (PASS|FAIL): .+\\()\\d+(\\.\\d+)?s\\)"
                LineWise: true
            }, {
                Pattern:  "^((FAIL|ok  )\\t.+\\t)\\d+(\\.\\d+)?s$"
                LineWise: true
            }]
        }]
        Terminal: string
    }
    hello_cd_for_install: {
        Name:     string
        StepType: 1
        Stmts:    "cd /home/gopher/hello"
        Terminal: string
    }
    hello_go_list_target: {
        Name:     string
        StepType: 1
        Stmts:    "go list -f '{{.Target}}'"
        Terminal: string
    }
    hello_add_gopath_bin_path: {
        Name:     string
        StepType: 1
        Stmts: """
            goinstalldir="$(dirname "$(go list -f '{{.Target}}')")"
            export PATH="$goinstalldir:$PATH"
            """
        Terminal: string
    }
    hello_go_install: {
        Name:     string
        StepType: 1
        Stmts:    "go install"
        Terminal: string
    }
    hello_run_by_name: {
        Name:     string
        StepType: 1
        Stmts:    "hello"
        Terminal: string
    }
}
// ---
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Pattern: "greetings"
            Private: false
            Var:     "GREETINGS"
        }, {
            Pattern: "hello"
            Private: false
            Var:     "HELLO"
        }]
    }
    Version: """
        {
          "GoVersion": "go1.19.1",
          "Path": "github.com/play-with-go/gitea/cmd/gitea",
          "Main": {
            "Path": "github.com/play-with-go/gitea",
            "Version": "v0.0.0-20221003164140-c14d636df530",
            "Sum": "h1:RDNvyzwtVgtV0xOEaQL+CziEPkar/gNPyQUaWdnYjGk=",
            "Replace": null
          },
          "Deps": [
            {
              "Path": "code.gitea.io/sdk/gitea",
              "Version": "v0.15.1",
              "Sum": "h1:WJreC7YYuxbn0UDaPuWIe/mtiNKTvLN8MLkaw71yx/M=",
              "Replace": null
            },
            {
              "Path": "cuelang.org/go",
              "Version": "v0.4.3",
              "Sum": "h1:W3oBBjDTm7+IZfCKZAmC8uDG0eYfJL4Pp/xbbCMKaVo=",
              "Replace": null
            },
            {
              "Path": "github.com/cockroachdb/apd/v2",
              "Version": "v2.0.1",
              "Sum": "h1:y1Rh3tEU89D+7Tgbw+lp52T6p/GJLpDmNvr10UWqLTE=",
              "Replace": null
            },
            {
              "Path": "github.com/emicklei/proto",
              "Version": "v1.6.15",
              "Sum": "h1:XbpwxmuOPrdES97FrSfpyy67SSCV/wBIKXqgJzh6hNw=",
              "Replace": null
            },
            {
              "Path": "github.com/golang/glog",
              "Version": "v0.0.0-20160126235308-23def4e6c14b",
              "Sum": "h1:VKtxabqXZkF25pY9ekfRL6a582T4P37/31XEstQ5p58=",
              "Replace": null
            },
            {
              "Path": "github.com/google/uuid",
              "Version": "v1.2.0",
              "Sum": "h1:qJYtXnJRWmpe7m/3XlyhrsLrEURqHRM2kxzoxXqyUDs=",
              "Replace": null
            },
            {
              "Path": "github.com/hashicorp/go-version",
              "Version": "v1.2.1",
              "Sum": "h1:zEfKbn2+PDgroKdiOzqiE8rsmLqU2uwi5PB5pBJ3TkI=",
              "Replace": null
            },
            {
              "Path": "github.com/mpvl/unique",
              "Version": "v0.0.0-20150818121801-cbe035fff7de",
              "Sum": "h1:D5x39vF5KCwKQaw+OC9ZPiLVHXz3UFw2+psEX+gYcto=",
              "Replace": null
            },
            {
              "Path": "github.com/pkg/errors",
              "Version": "v0.9.1",
              "Sum": "h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=",
              "Replace": null
            },
            {
              "Path": "github.com/play-with-go/preguide",
              "Version": "v0.0.2-0.20221003193111-f84a6637f25f",
              "Sum": "h1:ijMtjVmmzO13W4+wfOng8tkYFBJN+VRuw/znwVm7x68=",
              "Replace": null
            },
            {
              "Path": "github.com/protocolbuffers/txtpbfmt",
              "Version": "v0.0.0-20201118171849-f6a6b3f636fc",
              "Sum": "h1:gSVONBi2HWMFXCa9jFdYvYk7IwW/mTLxWOF7rXS4LO0=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/crypto",
              "Version": "v0.0.0-20210921155107-089bfa567519",
              "Sum": "h1:7I4JAnoQBe7ZtJcBaYHi5UtiO8tQHbUSXxL+pnGRANg=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/net",
              "Version": "v0.0.0-20211015210444-4f30a5c0130f",
              "Sum": "h1:OfiFi4JbukWwe3lzw+xunroH1mnC1e2Gy5cxNJApiSY=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/text",
              "Version": "v0.3.7",
              "Sum": "h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/retry.v1",
              "Version": "v1.0.3",
              "Sum": "h1:a9CArYczAVv6Qs6VGoLMio99GEs7kY9UzSF9+LD+iGs=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/yaml.v3",
              "Version": "v3.0.0-20210107192922-496545a6307b",
              "Sum": "h1:h8qDotaEPuJATrMmW04NCwg7v22aHH28wwpauUhK9Oo=",
              "Replace": null
            }
          ],
          "Settings": null
        }
        """
    Variables: ["GITEA_USERNAME", "GITEA_PRIV_KEY", "GITEA_PUB_KEY", "GITEA_KEYSCAN", "GREETINGS", "HELLO"]
}]
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go119: {
            Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
        }
    }
}]
Scenarios: [{
    Name:        "go119"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
Steps: {
    goversion: {
        StepType: 1
        Name:     "goversion"
        Order:    0
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go version"
            ExitCode: 0
            Output:   "go version go1.19.1 linux/amd64"
        }]
    }
    pwd_home: {
        StepType: 1
        Name:     "pwd_home"
        Order:    1
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "pwd"
            ExitCode: 0
            Output: """
                /home/gopher

                """
        }]
    }
    mkdir_greetings: {
        StepType: 1
        Name:     "mkdir_greetings"
        Order:    2
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir /home/gopher/greetings"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cd /home/gopher/greetings"
            ExitCode: 0
            Output:   ""
        }]
    }
    gomodinit_greetings: {
        StepType: 1
        Name:     "gomodinit_greetings"
        Order:    3
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go mod init {{{.GREETINGS}}}"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module {{{.GREETINGS}}}

                """
        }]
    }
    cat_gomodgreetings: {
        StepType: 1
        Name:     "cat_gomodgreetings"
        Order:    4
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cat go.mod"
            ExitCode: 0
            Output: """
                module {{{.GREETINGS}}}

                go 1.19

                """
        }]
    }
    create_greetingsgo: {
        StepType: 2
        Name:     "create_greetingsgo"
        Order:    5
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package greetings

            import "fmt"

            // Hello returns a greeting for the named person.
            func Hello(name string) string {
            \t// Return a greeting that embeds the name in a message.
            \tmessage := fmt.Sprintf("Hi, %v. Welcome!", name)
            \treturn message
            }

            """
        Target: "/home/gopher/greetings/greetings.go"
    }
    create_greetingsgo_long: {
        StepType: 2
        Name:     "create_greetingsgo_long"
        Order:    6
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import "fmt"

                // Hello returns a greeting for the named person.
                func Hello(name string) string {
                \t// Return a greeting that embeds the name in a message.
                \tmessage := fmt.Sprintf("Hi, %v. Welcome!", name)
                \treturn message
                }

                """
        }
        Source: """
            package greetings

            import "fmt"

            // Hello returns a greeting for the named person.
            func Hello(name string) string {
            \t// Return a greeting that embeds the name in a message.
            \tvar message string
            \tmessage = fmt.Sprintf("Hi, %v. Welcome!", name)
            \treturn message
            }

            """
        Target: "/home/gopher/greetings/greetings.go"
    }
    greetings_gitinit: {
        StepType: 1
        Name:     "greetings_gitinit"
        Order:    7
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git init -q"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git remote add origin https://{{{.GREETINGS}}}.git"
            ExitCode: 0
            Output:   ""
        }]
    }
    greetings_gitadd: {
        StepType: 1
        Name:     "greetings_gitadd"
        Order:    8
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git add go.mod greetings.go"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git commit -q -m 'Initial commit'"
            ExitCode: 0
            Output:   ""
        }]
    }
    greetings_check_porcelain: {
        StepType:        1
        InformationOnly: true
        Name:            "greetings_check_porcelain"
        Order:           9
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode: 0
            Output:   ""
        }]
    }
    greetings_gitpush: {
        StepType: 1
        Name:     "greetings_gitpush"
        Order:    10
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    mkdir_hello: {
        StepType: 1
        Name:     "mkdir_hello"
        Order:    11
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir /home/gopher/hello"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cd /home/gopher/hello"
            ExitCode: 0
            Output:   ""
        }]
    }
    gomodinit_hello: {
        StepType: 1
        Name:     "gomodinit_hello"
        Order:    12
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go mod init {{{.HELLO}}}"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module {{{.HELLO}}}

                """
        }]
    }
    goget_greetings: {
        StepType: 1
        Name:     "goget_greetings"
        Order:    13
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go get {{{.GREETINGS}}}"
            ExitCode: 0
            Output: """
                go: downloading {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345
                go: added {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345

                """
        }]
    }
    golist_greetings: {
        StepType:        1
        InformationOnly: true
        Name:            "golist_greetings"
        Order:           14
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "go list -m -f {{.Version}} {{{.GREETINGS}}}"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            RandomReplace: "v0.0.0-20060102150405-abcedf12345"
        }]
    }
    create_hellogo: {
        StepType: 2
        Name:     "create_hellogo"
        Order:    15
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import (
            \t"fmt"

            \t"{{{.GREETINGS}}}"
            )

            func main() {
            \t// Get a greeting message and print it.
            \tmessage := greetings.Hello("Gladys")
            \tfmt.Println(message)
            }

            """
        Target: "/home/gopher/hello/hello.go"
    }
    buildrun_hello: {
        StepType: 1
        Name:     "buildrun_hello"
        Order:    16
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go build"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "./hello"
            ExitCode: 0
            Output: """
                Hi, Gladys. Welcome!

                """
        }]
    }
    cd_greetings: {
        StepType: 1
        Name:     "cd_greetings"
        Order:    17
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cd /home/gopher/greetings"
            ExitCode: 0
            Output:   ""
        }]
    }
    update_greetings_go: {
        StepType: 2
        Name:     "update_greetings_go"
        Order:    18
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import "fmt"

                // Hello returns a greeting for the named person.
                func Hello(name string) string {
                \t// Return a greeting that embeds the name in a message.
                \tvar message string
                \tmessage = fmt.Sprintf("Hi, %v. Welcome!", name)
                \treturn message
                }

                """
        }
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn "", errors.New("empty name")
            \t}

            \t// If a name was received, return a value that embeds the name
            \t// in a greeting message.
            \tmessage := fmt.Sprintf("Hi, %v. Welcome!", name)
            \treturn message, nil
            }

            """
        Target: "/home/gopher/greetings/greetings.go"
    }
    commit_greetings_error_handling: {
        StepType: 1
        Name:     "commit_greetings_error_handling"
        Order:    19
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git add greetings.go"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git commit -q -m 'Added error handling'"
            ExitCode: 0
            Output:   ""
        }]
    }
    greetings_check_error_handling_porcelain: {
        StepType:        1
        InformationOnly: true
        Name:            "greetings_check_error_handling_porcelain"
        Order:           20
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode: 0
            Output:   ""
        }]
    }
    greetings_error_commit: {
        StepType: 1
        Name:     "greetings_error_commit"
        Order:    21
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "greetings_error_commit=$(git rev-parse HEAD)"
            ExitCode: 0
            Output:   ""
        }]
    }
    echo_greetings_error_commit: {
        StepType:        1
        InformationOnly: true
        Name:            "echo_greetings_error_commit"
        Order:           22
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "git rev-parse HEAD"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            RandomReplace: "v0.0.0-20060102150405-abcedf12345"
        }]
    }
    republish_greetings: {
        StepType: 1
        Name:     "republish_greetings"
        Order:    23
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    cd_hello: {
        StepType: 1
        Name:     "cd_hello"
        Order:    24
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cd /home/gopher/hello"
            ExitCode: 0
            Output:   ""
        }]
    }
    get_latest_greetings: {
        StepType: 1
        Name:     "get_latest_greetings"
        Order:    25
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go get {{{.GREETINGS}}}@$greetings_error_commit"
            ExitCode: 0
            Output: """
                go: downloading {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345
                go: upgraded {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345 => v0.0.0-20060102150405-abcedf12345

                """
        }]
    }
    golist_latest_greetings: {
        StepType:        1
        InformationOnly: true
        Name:            "golist_latest_greetings"
        Order:           26
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "go list -m -f {{.Version}} {{{.GREETINGS}}}"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            RandomReplace: "v0.0.0-20060102150405-abcedf12345"
        }]
    }
    update_hello_go_error: {
        StepType: 2
        Name:     "update_hello_go_error"
        Order:    27
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import (
                \t"fmt"

                \t"{{{.GREETINGS}}}"
                )

                func main() {
                \t// Get a greeting message and print it.
                \tmessage := greetings.Hello("Gladys")
                \tfmt.Println(message)
                }

                """
        }
        Source: """
            package main

            import (
            \t"fmt"
            \t"log"

            \t"{{{.GREETINGS}}}"
            )

            func main() {
            \t// Set properties of the predefined Logger, including
            \t// the log entry prefix and a flag to disable printing
            \t// the time, source file, and line number.
            \tlog.SetPrefix("greetings: ")
            \tlog.SetFlags(0)

            \t// Request a greeting message.
            \tmessage, err := greetings.Hello("")
            \t// If an error was returned, print it to the console and
            \t// exit the program.
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}

            \t// If no error was returned, print the returned message
            \t// to the console.
            \tfmt.Println(message)
            }

            """
        Target: "/home/gopher/hello/hello.go"
    }
    run_hello_error: {
        StepType: 1
        Name:     "run_hello_error"
        Order:    28
        Terminal: "term1"
        Stmts: [{
            Negated:  true
            CmdStr:   "go run hello.go"
            ExitCode: 1
            Output: """
                greetings: empty name
                exit status 1

                """
        }]
    }
    cd_greetings_random: {
        StepType: 1
        Name:     "cd_greetings_random"
        Order:    29
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cd /home/gopher/greetings"
            ExitCode: 0
            Output:   ""
        }]
    }
    update_greetings_go_random: {
        StepType: 2
        Name:     "update_greetings_go_random"
        Order:    30
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import "fmt"

                // Hello returns a greeting for the named person.
                func Hello(name string) string {
                \t// Return a greeting that embeds the name in a message.
                \tmessage := fmt.Sprintf("Hi, %v. Welcome!", name)
                \treturn message
                }

                """
        }
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            \t"math/rand"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn name, errors.New("empty name")
            \t}
            \t// Create a message using a random format.
            \tmessage := fmt.Sprintf(randomFormat(), name)
            \treturn message, nil
            }

            // init sets initial values for variables used in the function.
            func init() {
            \t// For truly random greetings, import "time" and replace the call
            \t// to rand.Seed with:
            \t//
            \t// rand.Seed(time.Now().UnixNano())
            \t//
            \t// Calling rand.Seed with a constant value means that we always
            \t// generate the same pseudo-random sequence.
            \trand.Seed(1)
            }

            // randomFormat returns one of a set of greeting messages. The returned
            // message is selected at random.
            func randomFormat() string {
            \t// A slice of message formats.
            \tformats := []string{
            \t\t"Hi, %v. Welcome!",
            \t\t"Great to see you, %v!",
            \t\t"Hail, %v! Well met!",
            \t}

            \t// Return one of the message formats selected at random.
            \treturn formats[rand.Intn(len(formats))]
            }

            """
        Target: "/home/gopher/greetings/greetings.go"
    }
    greeings_commit_random: {
        StepType: 1
        Name:     "greeings_commit_random"
        Order:    31
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git add greetings.go"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git commit -q -m 'Added random format'"
            ExitCode: 0
            Output:   ""
        }]
    }
    greetings_check_random_porcelain: {
        StepType:        1
        InformationOnly: true
        Name:            "greetings_check_random_porcelain"
        Order:           32
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode: 0
            Output:   ""
        }]
    }
    greetings_random_commit: {
        StepType: 1
        Name:     "greetings_random_commit"
        Order:    33
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "greetings_random_commit=$(git rev-parse HEAD)"
            ExitCode: 0
            Output:   ""
        }]
    }
    greetings_echo_random_commit: {
        StepType:        1
        InformationOnly: true
        Name:            "greetings_echo_random_commit"
        Order:           34
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "git rev-parse HEAD"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            RandomReplace: "v0.0.0-20060102150405-abcedf12345"
        }]
    }
    greetings_publish_random: {
        StepType: 1
        Name:     "greetings_publish_random"
        Order:    35
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    hello_use_random: {
        StepType: 1
        Name:     "hello_use_random"
        Order:    36
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cd /home/gopher/hello"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "go get {{{.GREETINGS}}}@$greetings_random_commit"
            ExitCode: 0
            Output: """
                go: downloading {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345
                go: upgraded {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345 => v0.0.0-20060102150405-abcedf12345

                """
        }]
    }
    hello_golist_random_greetings: {
        StepType:        1
        InformationOnly: true
        Name:            "hello_golist_random_greetings"
        Order:           37
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "go list -m -f {{.Version}} {{{.GREETINGS}}}"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            RandomReplace: "v0.0.0-20060102150405-abcedf12345"
        }]
    }
    hello_go_readd_gladys: {
        StepType: 2
        Name:     "hello_go_readd_gladys"
        Order:    38
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import (
                \t"fmt"
                \t"log"

                \t"{{{.GREETINGS}}}"
                )

                func main() {
                \t// Set properties of the predefined Logger, including
                \t// the log entry prefix and a flag to disable printing
                \t// the time, source file, and line number.
                \tlog.SetPrefix("greetings: ")
                \tlog.SetFlags(0)

                \t// Request a greeting message.
                \tmessage, err := greetings.Hello("")
                \t// If an error was returned, print it to the console and
                \t// exit the program.
                \tif err != nil {
                \t\tlog.Fatal(err)
                \t}

                \t// If no error was returned, print the returned message
                \t// to the console.
                \tfmt.Println(message)
                }

                """
        }
        Source: """
            package main

            import (
            \t"fmt"
            \t"log"

            \t"{{{.GREETINGS}}}"
            )

            func main() {
            \t// Set properties of the predefined Logger, including
            \t// the log entry prefix and a flag to disable printing
            \t// the time, source file, and line number.
            \tlog.SetPrefix("greetings: ")
            \tlog.SetFlags(0)

            \t// Request a greeting message.
            \tmessage, err := greetings.Hello("Gladys")
            \t// If an error was returned, print it to the console and
            \t// exit the program.
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}

            \t// If no error was returned, print the returned message
            \t// to the console.
            \tfmt.Println(message)
            }

            """
        Target: "/home/gopher/hello/hello.go"
    }
    hello_run_random: {
        StepType: 1
        Name:     "hello_run_random"
        Order:    39
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run hello.go"
            ExitCode: 0
            Output: """
                Hail, Gladys! Well met!

                """
        }, {
            CmdStr:   "go run hello.go"
            ExitCode: 0
            Output: """
                Hail, Gladys! Well met!

                """
        }]
    }
    greetings_start_multiple: {
        StepType: 1
        Name:     "greetings_start_multiple"
        Order:    40
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cd /home/gopher/greetings"
            ExitCode: 0
            Output:   ""
        }]
    }
    greetings_go_multiple_people: {
        StepType: 2
        Name:     "greetings_go_multiple_people"
        Order:    41
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import (
                \t"errors"
                \t"fmt"
                \t"math/rand"
                )

                // Hello returns a greeting for the named person.
                func Hello(name string) (string, error) {
                \t// If no name was given, return an error with a message.
                \tif name == "" {
                \t\treturn name, errors.New("empty name")
                \t}
                \t// Create a message using a random format.
                \tmessage := fmt.Sprintf(randomFormat(), name)
                \treturn message, nil
                }

                // init sets initial values for variables used in the function.
                func init() {
                \t// For truly random greetings, import "time" and replace the call
                \t// to rand.Seed with:
                \t//
                \t// rand.Seed(time.Now().UnixNano())
                \t//
                \t// Calling rand.Seed with a constant value means that we always
                \t// generate the same pseudo-random sequence.
                \trand.Seed(1)
                }

                // randomFormat returns one of a set of greeting messages. The returned
                // message is selected at random.
                func randomFormat() string {
                \t// A slice of message formats.
                \tformats := []string{
                \t\t"Hi, %v. Welcome!",
                \t\t"Great to see you, %v!",
                \t\t"Hail, %v! Well met!",
                \t}

                \t// Return one of the message formats selected at random.
                \treturn formats[rand.Intn(len(formats))]
                }

                """
        }
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            \t"math/rand"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn name, errors.New("empty name")
            \t}
            \t// Create a message using a random format.
            \tmessage := fmt.Sprintf(randomFormat(), name)
            \treturn message, nil
            }

            // Hellos returns a map that associates each of the named people
            // with a greeting message.
            func Hellos(names []string) (map[string]string, error) {
            \t// A map to associate names with messages.
            \tmessages := make(map[string]string)
            \t// Loop through the received slice of names, calling
            \t// the Hello function to get a message for each name.
            \tfor _, name := range names {
            \t\tmessage, err := Hello(name)
            \t\tif err != nil {
            \t\t\treturn nil, err
            \t\t}
            \t\t// In the map, associate the retrieved message with
            \t\t// the name.
            \t\tmessages[name] = message
            \t}
            \treturn messages, nil
            }

            // init sets initial values for variables used in the function.
            func init() {
            \t// For truly random greetings, import "time" and replace the call
            \t// to rand.Seed with:
            \t//
            \t// rand.Seed(time.Now().UnixNano())
            \t//
            \t// Calling rand.Seed with a constant value means that we always
            \t// generate the same pseudo-random sequence.
            \trand.Seed(1)
            }

            // randomFormat returns one of a set of greeting messages. The returned
            // message is selected at random.
            func randomFormat() string {
            \t// A slice of message formats.
            \tformats := []string{
            \t\t"Hi, %v. Welcome!",
            \t\t"Great to see you, %v!",
            \t\t"Hail, %v! Well met!",
            \t}

            \t// Return one of the message formats selected at random.
            \treturn formats[rand.Intn(len(formats))]
            }

            """
        Target: "/home/gopher/greetings/greetings.go"
    }
    hello_use_multiple: {
        StepType: 1
        Name:     "hello_use_multiple"
        Order:    42
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cd /home/gopher/hello"
            ExitCode: 0
            Output:   ""
        }]
    }
    hello_replace_greetings: {
        StepType: 1
        Name:     "hello_replace_greetings"
        Order:    43
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go mod edit -replace {{{.GREETINGS}}}=/home/gopher/greetings"
            ExitCode: 0
            Output:   ""
        }]
    }
    hello_cat_go_mod_replace: {
        StepType: 1
        Name:     "hello_cat_go_mod_replace"
        Order:    44
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cat go.mod"
            ExitCode: 0
            Output: """
                module {{{.HELLO}}}

                go 1.19

                require {{{.GREETINGS}}} v0.0.0-20060102150405-abcedf12345 // indirect

                replace {{{.GREETINGS}}} => /home/gopher/greetings

                """
        }]
    }
    hello_go_call_multiple: {
        StepType: 2
        Name:     "hello_go_call_multiple"
        Order:    45
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import (
                \t"fmt"
                \t"log"

                \t"{{{.GREETINGS}}}"
                )

                func main() {
                \t// Set properties of the predefined Logger, including
                \t// the log entry prefix and a flag to disable printing
                \t// the time, source file, and line number.
                \tlog.SetPrefix("greetings: ")
                \tlog.SetFlags(0)

                \t// Request a greeting message.
                \tmessage, err := greetings.Hello("Gladys")
                \t// If an error was returned, print it to the console and
                \t// exit the program.
                \tif err != nil {
                \t\tlog.Fatal(err)
                \t}

                \t// If no error was returned, print the returned message
                \t// to the console.
                \tfmt.Println(message)
                }

                """
        }
        Source: """
            package main

            import (
            \t"fmt"
            \t"log"

            \t"{{{.GREETINGS}}}"
            )

            func main() {
            \t// Set properties of the predefined Logger, including
            \t// the log entry prefix and a flag to disable printing
            \t// the time, source file, and line number.
            \tlog.SetPrefix("greetings: ")
            \tlog.SetFlags(0)

            \t// A slice of names.
            \tnames := []string{"Gladys", "Samantha", "Darrin"}

            \t// Request greeting messages for the names.
            \tmessages, err := greetings.Hellos(names)
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}
            \t// If no error was returned, print the returned map of
            \t// messages to the console.
            \tfmt.Println(messages)
            }

            """
        Target: "/home/gopher/hello/hello.go"
    }
    hello_run_multiple: {
        StepType: 1
        Name:     "hello_run_multiple"
        Order:    46
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run hello.go"
            ExitCode: 0
            Output: """
                map[Darrin:Hail, Darrin! Well met! Gladys:Hail, Gladys! Well met! Samantha:Hi, Samantha. Welcome!]

                """
        }]
    }
    greetings_return_to_write_test: {
        StepType: 1
        Name:     "greetings_return_to_write_test"
        Order:    47
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cd /home/gopher/greetings"
            ExitCode: 0
            Output:   ""
        }]
    }
    greetings_create_greetings_test_go: {
        StepType: 2
        Name:     "greetings_create_greetings_test_go"
        Order:    48
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package greetings

            import (
            \t"regexp"
            \t"testing"
            )

            // TestHelloName calls greetings.Hello with a name, checking
            // for a valid return value.
            func TestHelloName(t *testing.T) {
            \tname := "Gladys"
            \twant := regexp.MustCompile(`\\b` + name + `\\b`)
            \tmsg, err := Hello(name)
            \tif !want.MatchString(msg) || err != nil {
            \t\tt.Fatalf(`Hello("Gladys") = %q, %v, want match for %#q, <nil>`, msg, err, want)
            \t}
            }

            // TestHelloEmpty calls greetings.Hello with an empty string,
            // checking for an error.
            func TestHelloEmpty(t *testing.T) {
            \tmsg, err := Hello("")
            \tif msg != "" || err == nil {
            \t\tt.Fatalf(`Hello("") = %q, %v, want "", error`, msg, err)
            \t}
            }

            """
        Target: "/home/gopher/greetings/greetings_test.go"
    }
    greetings_run_tests: {
        StepType: 1
        Name:     "greetings_run_tests"
        Order:    49
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go test"
            ExitCode: 0
            Output: """
                PASS
                ok  \t{{{.GREETINGS}}}\t0.002s

                """
        }, {
            CmdStr:   "go test -v"
            ExitCode: 0
            Output: """
                === RUN   TestHelloName
                --- PASS: TestHelloName (0.00s)
                === RUN   TestHelloEmpty
                --- PASS: TestHelloEmpty (0.00s)
                PASS
                ok  \t{{{.GREETINGS}}}\t0.001s

                """
        }]
    }
    greetings_go_break: {
        StepType: 2
        Name:     "greetings_go_break"
        Order:    50
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import (
                \t"errors"
                \t"fmt"
                \t"math/rand"
                )

                // Hello returns a greeting for the named person.
                func Hello(name string) (string, error) {
                \t// If no name was given, return an error with a message.
                \tif name == "" {
                \t\treturn name, errors.New("empty name")
                \t}
                \t// Create a message using a random format.
                \tmessage := fmt.Sprintf(randomFormat(), name)
                \treturn message, nil
                }

                // Hellos returns a map that associates each of the named people
                // with a greeting message.
                func Hellos(names []string) (map[string]string, error) {
                \t// A map to associate names with messages.
                \tmessages := make(map[string]string)
                \t// Loop through the received slice of names, calling
                \t// the Hello function to get a message for each name.
                \tfor _, name := range names {
                \t\tmessage, err := Hello(name)
                \t\tif err != nil {
                \t\t\treturn nil, err
                \t\t}
                \t\t// In the map, associate the retrieved message with
                \t\t// the name.
                \t\tmessages[name] = message
                \t}
                \treturn messages, nil
                }

                // init sets initial values for variables used in the function.
                func init() {
                \t// For truly random greetings, import "time" and replace the call
                \t// to rand.Seed with:
                \t//
                \t// rand.Seed(time.Now().UnixNano())
                \t//
                \t// Calling rand.Seed with a constant value means that we always
                \t// generate the same pseudo-random sequence.
                \trand.Seed(1)
                }

                // randomFormat returns one of a set of greeting messages. The returned
                // message is selected at random.
                func randomFormat() string {
                \t// A slice of message formats.
                \tformats := []string{
                \t\t"Hi, %v. Welcome!",
                \t\t"Great to see you, %v!",
                \t\t"Hail, %v! Well met!",
                \t}

                \t// Return one of the message formats selected at random.
                \treturn formats[rand.Intn(len(formats))]
                }

                """
        }
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            \t"math/rand"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn name, errors.New("empty name")
            \t}
            \t// Create a message using a random format.
            \t// message := fmt.Sprintf(randomFormat(), name)
            \tmessage := fmt.Sprint(randomFormat())
            \treturn message, nil
            }

            // Hellos returns a map that associates each of the named people
            // with a greeting message.
            func Hellos(names []string) (map[string]string, error) {
            \t// A map to associate names with messages.
            \tmessages := make(map[string]string)
            \t// Loop through the received slice of names, calling
            \t// the Hello function to get a message for each name.
            \tfor _, name := range names {
            \t\tmessage, err := Hello(name)
            \t\tif err != nil {
            \t\t\treturn nil, err
            \t\t}
            \t\t// In the map, associate the retrieved message with
            \t\t// the name.
            \t\tmessages[name] = message
            \t}
            \treturn messages, nil
            }

            // init sets initial values for variables used in the function.
            func init() {
            \t// For truly random greetings, import "time" and replace the call
            \t// to rand.Seed with:
            \t//
            \t// rand.Seed(time.Now().UnixNano())
            \t//
            \t// Calling rand.Seed with a constant value means that we always
            \t// generate the same pseudo-random sequence.
            \trand.Seed(1)
            }

            // randomFormat returns one of a set of greeting messages. The returned
            // message is selected at random.
            func randomFormat() string {
            \t// A slice of message formats.
            \tformats := []string{
            \t\t"Hi, %v. Welcome!",
            \t\t"Great to see you, %v!",
            \t\t"Hail, %v! Well met!",
            \t}

            \t// Return one of the message formats selected at random.
            \treturn formats[rand.Intn(len(formats))]
            }

            """
        Target: "/home/gopher/greetings/greetings.go"
    }
    greetings_run_tests_fail: {
        StepType: 1
        Name:     "greetings_run_tests_fail"
        Order:    51
        Terminal: "term1"
        Stmts: [{
            Negated:  true
            CmdStr:   "go test"
            ExitCode: 1
            Output: """
                --- FAIL: TestHelloName (0.00s)
                    greetings_test.go:15: Hello("Gladys") = "Hail, %v! Well met!", <nil>, want match for `\\bGladys\\b`, <nil>
                FAIL
                exit status 1
                FAIL\t{{{.GREETINGS}}}\t0.001s

                """
        }]
    }
    greetings_go_restore: {
        StepType: 2
        Name:     "greetings_go_restore"
        Order:    52
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package greetings

                import (
                \t"errors"
                \t"fmt"
                \t"math/rand"
                )

                // Hello returns a greeting for the named person.
                func Hello(name string) (string, error) {
                \t// If no name was given, return an error with a message.
                \tif name == "" {
                \t\treturn name, errors.New("empty name")
                \t}
                \t// Create a message using a random format.
                \t// message := fmt.Sprintf(randomFormat(), name)
                \tmessage := fmt.Sprint(randomFormat())
                \treturn message, nil
                }

                // Hellos returns a map that associates each of the named people
                // with a greeting message.
                func Hellos(names []string) (map[string]string, error) {
                \t// A map to associate names with messages.
                \tmessages := make(map[string]string)
                \t// Loop through the received slice of names, calling
                \t// the Hello function to get a message for each name.
                \tfor _, name := range names {
                \t\tmessage, err := Hello(name)
                \t\tif err != nil {
                \t\t\treturn nil, err
                \t\t}
                \t\t// In the map, associate the retrieved message with
                \t\t// the name.
                \t\tmessages[name] = message
                \t}
                \treturn messages, nil
                }

                // init sets initial values for variables used in the function.
                func init() {
                \t// For truly random greetings, import "time" and replace the call
                \t// to rand.Seed with:
                \t//
                \t// rand.Seed(time.Now().UnixNano())
                \t//
                \t// Calling rand.Seed with a constant value means that we always
                \t// generate the same pseudo-random sequence.
                \trand.Seed(1)
                }

                // randomFormat returns one of a set of greeting messages. The returned
                // message is selected at random.
                func randomFormat() string {
                \t// A slice of message formats.
                \tformats := []string{
                \t\t"Hi, %v. Welcome!",
                \t\t"Great to see you, %v!",
                \t\t"Hail, %v! Well met!",
                \t}

                \t// Return one of the message formats selected at random.
                \treturn formats[rand.Intn(len(formats))]
                }

                """
        }
        Source: """
            package greetings

            import (
            \t"errors"
            \t"fmt"
            \t"math/rand"
            )

            // Hello returns a greeting for the named person.
            func Hello(name string) (string, error) {
            \t// If no name was given, return an error with a message.
            \tif name == "" {
            \t\treturn name, errors.New("empty name")
            \t}
            \t// Create a message using a random format.
            \tmessage := fmt.Sprintf(randomFormat(), name)
            \treturn message, nil
            }

            // Hellos returns a map that associates each of the named people
            // with a greeting message.
            func Hellos(names []string) (map[string]string, error) {
            \t// A map to associate names with messages.
            \tmessages := make(map[string]string)
            \t// Loop through the received slice of names, calling
            \t// the Hello function to get a message for each name.
            \tfor _, name := range names {
            \t\tmessage, err := Hello(name)
            \t\tif err != nil {
            \t\t\treturn nil, err
            \t\t}
            \t\t// In the map, associate the retrieved message with
            \t\t// the name.
            \t\tmessages[name] = message
            \t}
            \treturn messages, nil
            }

            // init sets initial values for variables used in the function.
            func init() {
            \t// For truly random greetings, import "time" and replace the call
            \t// to rand.Seed with:
            \t//
            \t// rand.Seed(time.Now().UnixNano())
            \t//
            \t// Calling rand.Seed with a constant value means that we always
            \t// generate the same pseudo-random sequence.
            \trand.Seed(1)
            }

            // randomFormat returns one of a set of greeting messages. The returned
            // message is selected at random.
            func randomFormat() string {
            \t// A slice of message formats.
            \tformats := []string{
            \t\t"Hi, %v. Welcome!",
            \t\t"Great to see you, %v!",
            \t\t"Hail, %v! Well met!",
            \t}

            \t// Return one of the message formats selected at random.
            \treturn formats[rand.Intn(len(formats))]
            }

            """
        Target: "/home/gopher/greetings/greetings.go"
    }
    greetings_check_tests_pass: {
        StepType: 1
        Name:     "greetings_check_tests_pass"
        Order:    53
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go test"
            ExitCode: 0
            Output: """
                PASS
                ok  \t{{{.GREETINGS}}}\t0.002s

                """
        }]
    }
    hello_cd_for_install: {
        StepType: 1
        Name:     "hello_cd_for_install"
        Order:    54
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cd /home/gopher/hello"
            ExitCode: 0
            Output:   ""
        }]
    }
    hello_go_list_target: {
        StepType: 1
        Name:     "hello_go_list_target"
        Order:    55
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go list -f '{{.Target}}'"
            ExitCode: 0
            Output: """
                /home/gopher/go/bin/hello

                """
        }]
    }
    hello_add_gopath_bin_path: {
        StepType: 1
        Name:     "hello_add_gopath_bin_path"
        Order:    56
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "goinstalldir=\"$(dirname \"$(go list -f '{{.Target}}')\")\""
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "export PATH=\"$goinstalldir:$PATH\""
            ExitCode: 0
            Output:   ""
        }]
    }
    hello_go_install: {
        StepType: 1
        Name:     "hello_go_install"
        Order:    57
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go install"
            ExitCode: 0
            Output:   ""
        }]
    }
    hello_run_by_name: {
        StepType: 1
        Name:     "hello_run_by_name"
        Order:    58
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "hello"
            ExitCode: 0
            Output: """
                map[Darrin:Hail, Darrin! Well met! Gladys:Hail, Gladys! Well met! Samantha:Hi, Samantha. Welcome!]

                """
        }]
    }
}
Hash: "40fe1df5454c68f78e248200c18f7acc458eb3ed58bef36a817520456ea81b63"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Defs: {
    quote:     "rsc.io/quote"
    quotev:    "v1.5.2"
    hello_dir: "/home/gopher/hello"
    hello_go:  "hello.go"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    hellomod: "hello"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go119: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }
}
Steps: {
    goversion: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd: "go version"
            Sanitisers: [{
                Pattern:     "linux\\/.+(?:\\n$)"
                Replacement: "linux/amd64"
            }]
        }]
        Terminal: string
    }
    pwd_home: {
        Name:     string
        StepType: 1
        Stmts:    "pwd"
        Terminal: string
    }
    mkdir_hello: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir /home/gopher/hello
            cd /home/gopher/hello
            """
        Terminal: string
    }
    create_hello: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import "fmt"

            func main() {
            \tfmt.Println("Hello, World!")
            }

            """
        Target:   "/home/gopher/hello/hello.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    run_hello: {
        Name:     string
        StepType: 1
        Stmts:    "go run hello.go"
        Terminal: string
    }
    update_hello: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import "fmt"

            import "rsc.io/quote"

            func main() {
            \tfmt.Println(quote.Go())
            }

            """
        Target:   "/home/gopher/hello/hello.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                func main() {
                \tfmt.Println("Hello, World!")
                }

                """
        }
        Terminal: string
    }
    gomodinit: {
        Name:     string
        StepType: 1
        Stmts:    "go mod init hello"
        Terminal: string
    }
    gogetquote: {
        Name:     string
        StepType: 1
        Stmts:    "go get rsc.io/quote@v1.5.2"
        Terminal: string
    }
    run_hello_again: {
        Name:     string
        StepType: 1
        Stmts:    "go run hello.go"
        Terminal: string
    }
}
// ---
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go119: {
            Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
        }
    }
}]
Scenarios: [{
    Name:        "go119"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
Steps: {
    goversion: {
        StepType: 1
        Name:     "goversion"
        Order:    0
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go version"
            ExitCode: 0
            Output:   "go version go1.19.1 linux/amd64"
        }]
    }
    pwd_home: {
        StepType: 1
        Name:     "pwd_home"
        Order:    1
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "pwd"
            ExitCode: 0
            Output: """
                /home/gopher

                """
        }]
    }
    mkdir_hello: {
        StepType: 1
        Name:     "mkdir_hello"
        Order:    2
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir /home/gopher/hello"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cd /home/gopher/hello"
            ExitCode: 0
            Output:   ""
        }]
    }
    create_hello: {
        StepType: 2
        Name:     "create_hello"
        Order:    3
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import "fmt"

            func main() {
            \tfmt.Println("Hello, World!")
            }

            """
        Target: "/home/gopher/hello/hello.go"
    }
    run_hello: {
        StepType: 1
        Name:     "run_hello"
        Order:    4
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run hello.go"
            ExitCode: 0
            Output: """
                Hello, World!

                """
        }]
    }
    update_hello: {
        StepType: 2
        Name:     "update_hello"
        Order:    5
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                func main() {
                \tfmt.Println("Hello, World!")
                }

                """
        }
        Source: """
            package main

            import "fmt"

            import "rsc.io/quote"

            func main() {
            \tfmt.Println(quote.Go())
            }

            """
        Target: "/home/gopher/hello/hello.go"
    }
    gomodinit: {
        StepType: 1
        Name:     "gomodinit"
        Order:    6
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go mod init hello"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module hello
                go: to add module requirements and sums:
                \tgo mod tidy

                """
        }]
    }
    gogetquote: {
        StepType: 1
        Name:     "gogetquote"
        Order:    7
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go get rsc.io/quote@v1.5.2"
            ExitCode: 0
            Output: """
                go: downloading rsc.io/quote v1.5.2
                go: downloading rsc.io/sampler v1.3.0
                go: downloading golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
                go: added golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
                go: added rsc.io/quote v1.5.2
                go: added rsc.io/sampler v1.3.0

                """
        }]
    }
    run_hello_again: {
        StepType: 1
        Name:     "run_hello_again"
        Order:    8
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run hello.go"
            ExitCode: 0
            Output: """
                Don't communicate by sharing memory, share memory by communicating.

                """
        }]
    }
}
Hash: "842d73bc83bb7772d2550172b759aa5a927bb95014b906a59d8b3bf138997e48"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Defs: {
    go_help_env: "go help env"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go119: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/installgo1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }
}
Steps: {
    start_dir: {
        Name:     string
        StepType: 1
        Stmts:    "pwd"
        Terminal: string
    }
    download_go: {
        Name:     string
        StepType: 1
        Stmts:    "wget -q https://golang.org/dl/go1.19.1.linux-$GOARCH.tar.gz"
        Terminal: string
    }
    install_go: {
        Name:     string
        StepType: 1
        Stmts:    "sudo tar -C /usr/local -xzf go1.19.1.linux-$GOARCH.tar.gz"
        Terminal: string
    }
    add_install_to_path: {
        Name:     string
        StepType: 1
        Stmts:    "echo export PATH=\"/usr/local/go/bin:$PATH\" >> $HOME/.profile"
        Terminal: string
    }
    source_profile: {
        Name:     string
        StepType: 1
        Stmts:    "source $HOME/.profile"
        Terminal: string
    }
    go_version: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd: "go version"
            Sanitisers: [{
                Pattern:     "linux\\/.+(?:\\n$)"
                Replacement: "linux/amd64"
            }]
        }]
        Terminal: string
    }
    go_env: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd: "go env"
            Sanitisers: [{
                Pattern:     "(?m)^GOGCCFLAGS=.*\\n"
                Replacement: ""
            }, {
                Pattern:     "(?m)^GOAMD64=.*\\n"
                Replacement: ""
            }, {
                Pattern:     "^(GOTOOLDIR=.*/)[^/]*"
                LineWise:    true
                Replacement: "${1}linux_amd64\""
            }, {
                Pattern:     "^(GOOS=).*"
                LineWise:    true
                Replacement: "${1}\"linux\""
            }, {
                Pattern:     "^(GO(HOST)?ARCH=).*"
                LineWise:    true
                Replacement: "${1}\"amd64\""
            }]
        }]
        Terminal: string
    }
    go_env_gobin: {
        Name:     string
        StepType: 1
        Stmts:    "go env GOBIN"
        Terminal: string
    }
    go_env_set_gobin: {
        Name:     string
        StepType: 1
        Stmts:    "go env -w GOBIN=/path/to/my/gobin"
        Terminal: string
    }
    go_env_check_gobin: {
        Name:     string
        StepType: 1
        Stmts:    "go env GOBIN"
        Terminal: string
    }
    go_env_env: {
        Name:     string
        StepType: 1
        Stmts:    "go env GOENV"
        Terminal: string
    }
    go_env_unset_gobin: {
        Name:     string
        StepType: 1
        Stmts:    "go env -w GOBIN="
        Terminal: string
    }
    go_env_check_gobin_again: {
        Name:     string
        StepType: 1
        Stmts:    "go env GOBIN"
        Terminal: string
    }
    go_help_env: {
        Name:            string
        StepType:        1
        Stmts:           "go help env"
        InformationOnly: true
        Terminal:        string
    }
    gobin_not_set: {
        Name:     string
        StepType: 1
        Stmts:    "go env GOBIN"
        Terminal: string
    }
    add_gobin_bin_to_path: {
        Name:     string
        StepType: 1
        Stmts:    "echo export PATH=\"$(go env GOPATH)/bin:$PATH\" >> $HOME/.profile"
        Terminal: string
    }
    source_profile_again: {
        Name:     string
        StepType: 1
        Stmts:    "source $HOME/.profile"
        Terminal: string
    }
    echo_path: {
        Name:     string
        StepType: 1
        Stmts:    "echo $PATH"
        Terminal: string
    }
}
// ---
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go119: {
            Image: "playwithgo/installgo1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
        }
    }
}]
Scenarios: [{
    Name:        "go119"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
Steps: {
    start_dir: {
        StepType: 1
        Name:     "start_dir"
        Order:    0
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "pwd"
            ExitCode: 0
            Output: """
                /home/gopher

                """
        }]
    }
    download_go: {
        StepType: 1
        Name:     "download_go"
        Order:    1
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "wget -q https://golang.org/dl/go1.19.1.linux-$GOARCH.tar.gz"
            ExitCode: 0
            Output:   ""
        }]
    }
    install_go: {
        StepType: 1
        Name:     "install_go"
        Order:    2
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "sudo tar -C /usr/local -xzf go1.19.1.linux-$GOARCH.tar.gz"
            ExitCode: 0
            Output:   ""
        }]
    }
    add_install_to_path: {
        StepType: 1
        Name:     "add_install_to_path"
        Order:    3
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "echo export PATH=\"/usr/local/go/bin:$PATH\" >>$HOME/.profile"
            ExitCode: 0
            Output:   ""
        }]
    }
    source_profile: {
        StepType: 1
        Name:     "source_profile"
        Order:    4
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "source $HOME/.profile"
            ExitCode: 0
            Output:   ""
        }]
    }
    go_version: {
        StepType: 1
        Name:     "go_version"
        Order:    5
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go version"
            ExitCode: 0
            Output:   "go version go1.19.1 linux/amd64"
        }]
    }
    go_env: {
        StepType: 1
        Name:     "go_env"
        Order:    6
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go env"
            ExitCode: 0
            Output: """
                GO111MODULE=""
                GOARCH="amd64"
                GOBIN=""
                GOCACHE="/home/gopher/.cache/go-build"
                GOENV="/home/gopher/.config/go/env"
                GOEXE=""
                GOEXPERIMENT=""
                GOFLAGS=""
                GOHOSTARCH="amd64"
                GOHOSTOS="linux"
                GOINSECURE=""
                GOMODCACHE="/home/gopher/go/pkg/mod"
                GONOPROXY=""
                GONOSUMDB=""
                GOOS="linux"
                GOPATH="/home/gopher/go"
                GOPRIVATE=""
                GOPROXY="https://proxy.golang.org,direct"
                GOROOT="/usr/local/go"
                GOSUMDB="sum.golang.org"
                GOTMPDIR=""
                GOTOOLDIR="/usr/local/go/pkg/tool/linux_amd64"
                GOVCS=""
                GOVERSION="go1.19.1"
                GCCGO="gccgo"
                AR="ar"
                CC="gcc"
                CXX="g++"
                CGO_ENABLED="1"
                GOMOD="/dev/null"
                GOWORK=""
                CGO_CFLAGS="-g -O2"
                CGO_CPPFLAGS=""
                CGO_CXXFLAGS="-g -O2"
                CGO_FFLAGS="-g -O2"
                CGO_LDFLAGS="-g -O2"
                PKG_CONFIG="pkg-config"

                """
        }]
    }
    go_env_gobin: {
        StepType: 1
        Name:     "go_env_gobin"
        Order:    7
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go env GOBIN"
            ExitCode: 0
            Output: """


                """
        }]
    }
    go_env_set_gobin: {
        StepType: 1
        Name:     "go_env_set_gobin"
        Order:    8
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go env -w GOBIN=/path/to/my/gobin"
            ExitCode: 0
            Output:   ""
        }]
    }
    go_env_check_gobin: {
        StepType: 1
        Name:     "go_env_check_gobin"
        Order:    9
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go env GOBIN"
            ExitCode: 0
            Output: """
                /path/to/my/gobin

                """
        }]
    }
    go_env_env: {
        StepType: 1
        Name:     "go_env_env"
        Order:    10
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go env GOENV"
            ExitCode: 0
            Output: """
                /home/gopher/.config/go/env

                """
        }]
    }
    go_env_unset_gobin: {
        StepType: 1
        Name:     "go_env_unset_gobin"
        Order:    11
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go env -w GOBIN="
            ExitCode: 0
            Output:   ""
        }]
    }
    go_env_check_gobin_again: {
        StepType: 1
        Name:     "go_env_check_gobin_again"
        Order:    12
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go env GOBIN"
            ExitCode: 0
            Output: """


                """
        }]
    }
    go_help_env: {
        StepType:        1
        InformationOnly: true
        Name:            "go_help_env"
        Order:           13
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "go help env"
            ExitCode: 0
            Output: """
                usage: go env [-json] [-u] [-w] [var ...]

                Env prints Go environment information.

                By default env prints information as a shell script
                (on Windows, a batch file). If one or more variable
                names is given as arguments, env prints the value of
                each named variable on its own line.

                The -json flag prints the environment in JSON format
                instead of as a shell script.

                The -u flag requires one or more arguments and unsets
                the default setting for the named environment variables,
                if one has been set with 'go env -w'.

                The -w flag requires one or more arguments of the
                form NAME=VALUE and changes the default settings
                of the named environment variables to the given values.

                For more about environment variables, see 'go help environment'.

                """
        }]
    }
    gobin_not_set: {
        StepType: 1
        Name:     "gobin_not_set"
        Order:    14
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go env GOBIN"
            ExitCode: 0
            Output: """


                """
        }]
    }
    add_gobin_bin_to_path: {
        StepType: 1
        Name:     "add_gobin_bin_to_path"
        Order:    15
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "echo export PATH=\"$(go env GOPATH)/bin:$PATH\" >>$HOME/.profile"
            ExitCode: 0
            Output:   ""
        }]
    }
    source_profile_again: {
        StepType: 1
        Name:     "source_profile_again"
        Order:    16
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "source $HOME/.profile"
            ExitCode: 0
            Output:   ""
        }]
    }
    echo_path: {
        StepType: 1
        Name:     "echo_path"
        Order:    17
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "echo $PATH"
            ExitCode: 0
            Output: """
                /home/gopher/go/bin:/usr/local/go/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games

                """
        }]
    }
}
Hash: "45293319d0d701a41e33b13d48e330e2dd45359f216da1e9a9230e7b50f561cd"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Defs: {
    mod1_name: "mod1"
    mod1_path: "{{{.REPO1}}}"
    mod1_dir:  "/home/gopher/mod1"
    mod2_name: "mod2"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    mod2_dir: "/home/gopher/mod2"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Var:     "REPO1"
            Pattern: "mod1"
            Private: false
        }]
    }
}]
Scenarios: {
    go119: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }
}
Steps: {
    create_module: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir /home/gopher/mod1
            cd /home/gopher/mod1
            git init -q
            git remote add origin https://{{{.REPO1}}}.git
            go mod init {{{.REPO1}}}
            """
        Terminal: string
    }
    create_readme: {
        Name:     string
        StepType: 3
        Source:   "## `{{{.REPO1}}}`"
        Target:   "/home/gopher/mod1/README.md"
        Language: "md"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    create_main: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import "fmt"

            func main() {
            \tfmt.Println("Hello, world!")
            }

            """
        Target:   "/home/gopher/mod1/main.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    commit_and_push: {
        Name:     string
        StepType: 1
        Stmts: """
            git add go.mod README.md main.go
            git commit -q -m "Initial commit"
            git push -q origin main
            """
        Terminal: string
    }
    check_porcelain: {
        Name:            string
        StepType:        1
        Stmts:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    use_module: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir /home/gopher/mod2
            cd /home/gopher/mod2
            go mod init mod.com
            go get {{{.REPO1}}}
            go run {{{.REPO1}}}
            """
        Terminal: string
    }
    mod1_pseudoversion: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd:           "go list -m -f {{.Version}} {{{.REPO1}}}"
            RandomReplace: "v0.0.0-20060102150405-abcedf12345"
        }]
        InformationOnly: true
        Terminal:        string
    }
}
// ---
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Pattern: "mod1"
            Private: false
            Var:     "REPO1"
        }]
    }
    Version: """
        {
          "GoVersion": "go1.19.1",
          "Path": "github.com/play-with-go/gitea/cmd/gitea",
          "Main": {
            "Path": "github.com/play-with-go/gitea",
            "Version": "v0.0.0-20221003164140-c14d636df530",
            "Sum": "h1:RDNvyzwtVgtV0xOEaQL+CziEPkar/gNPyQUaWdnYjGk=",
            "Replace": null
          },
          "Deps": [
            {
              "Path": "code.gitea.io/sdk/gitea",
              "Version": "v0.15.1",
              "Sum": "h1:WJreC7YYuxbn0UDaPuWIe/mtiNKTvLN8MLkaw71yx/M=",
              "Replace": null
            },
            {
              "Path": "cuelang.org/go",
              "Version": "v0.4.3",
              "Sum": "h1:W3oBBjDTm7+IZfCKZAmC8uDG0eYfJL4Pp/xbbCMKaVo=",
              "Replace": null
            },
            {
              "Path": "github.com/cockroachdb/apd/v2",
              "Version": "v2.0.1",
              "Sum": "h1:y1Rh3tEU89D+7Tgbw+lp52T6p/GJLpDmNvr10UWqLTE=",
              "Replace": null
            },
            {
              "Path": "github.com/emicklei/proto",
              "Version": "v1.6.15",
              "Sum": "h1:XbpwxmuOPrdES97FrSfpyy67SSCV/wBIKXqgJzh6hNw=",
              "Replace": null
            },
            {
              "Path": "github.com/golang/glog",
              "Version": "v0.0.0-20160126235308-23def4e6c14b",
              "Sum": "h1:VKtxabqXZkF25pY9ekfRL6a582T4P37/31XEstQ5p58=",
              "Replace": null
            },
            {
              "Path": "github.com/google/uuid",
              "Version": "v1.2.0",
              "Sum": "h1:qJYtXnJRWmpe7m/3XlyhrsLrEURqHRM2kxzoxXqyUDs=",
              "Replace": null
            },
            {
              "Path": "github.com/hashicorp/go-version",
              "Version": "v1.2.1",
              "Sum": "h1:zEfKbn2+PDgroKdiOzqiE8rsmLqU2uwi5PB5pBJ3TkI=",
              "Replace": null
            },
            {
              "Path": "github.com/mpvl/unique",
              "Version": "v0.0.0-20150818121801-cbe035fff7de",
              "Sum": "h1:D5x39vF5KCwKQaw+OC9ZPiLVHXz3UFw2+psEX+gYcto=",
              "Replace": null
            },
            {
              "Path": "github.com/pkg/errors",
              "Version": "v0.9.1",
              "Sum": "h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=",
              "Replace": null
            },
            {
              "Path": "github.com/play-with-go/preguide",
              "Version": "v0.0.2-0.20221003193111-f84a6637f25f",
              "Sum": "h1:ijMtjVmmzO13W4+wfOng8tkYFBJN+VRuw/znwVm7x68=",
              "Replace": null
            },
            {
              "Path": "github.com/protocolbuffers/txtpbfmt",
              "Version": "v0.0.0-20201118171849-f6a6b3f636fc",
              "Sum": "h1:gSVONBi2HWMFXCa9jFdYvYk7IwW/mTLxWOF7rXS4LO0=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/crypto",
              "Version": "v0.0.0-20210921155107-089bfa567519",
              "Sum": "h1:7I4JAnoQBe7ZtJcBaYHi5UtiO8tQHbUSXxL+pnGRANg=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/net",
              "Version": "v0.0.0-20211015210444-4f30a5c0130f",
              "Sum": "h1:OfiFi4JbukWwe3lzw+xunroH1mnC1e2Gy5cxNJApiSY=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/text",
              "Version": "v0.3.7",
              "Sum": "h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/retry.v1",
              "Version": "v1.0.3",
              "Sum": "h1:a9CArYczAVv6Qs6VGoLMio99GEs7kY9UzSF9+LD+iGs=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/yaml.v3",
              "Version": "v3.0.0-20210107192922-496545a6307b",
              "Sum": "h1:h8qDotaEPuJATrMmW04NCwg7v22aHH28wwpauUhK9Oo=",
              "Replace": null
            }
          ],
          "Settings": null
        }
        """
    Variables: ["GITEA_USERNAME", "GITEA_PRIV_KEY", "GITEA_PUB_KEY", "GITEA_KEYSCAN", "REPO1"]
}]
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go119: {
            Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
        }
    }
}]
Scenarios: [{
    Name:        "go119"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
Steps: {
    create_module: {
        StepType: 1
        Name:     "create_module"
        Order:    0
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir /home/gopher/mod1"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cd /home/gopher/mod1"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git init -q"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git remote add origin https://{{{.REPO1}}}.git"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "go mod init {{{.REPO1}}}"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module {{{.REPO1}}}

                """
        }]
    }
    create_readme: {
        StepType: 2
        Name:     "create_readme"
        Order:    1
        Terminal: "term1"
        Language: "md"
        Renderer: {
            RendererType: 1
        }
        Source: "## `{{{.REPO1}}}`"
        Target: "/home/gopher/mod1/README.md"
    }
    create_main: {
        StepType: 2
        Name:     "create_main"
        Order:    2
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import "fmt"

            func main() {
            \tfmt.Println("Hello, world!")
            }

            """
        Target: "/home/gopher/mod1/main.go"
    }
    commit_and_push: {
        StepType: 1
        Name:     "commit_and_push"
        Order:    3
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git add go.mod README.md main.go"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git commit -q -m \"Initial commit\""
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    check_porcelain: {
        StepType:        1
        InformationOnly: true
        Name:            "check_porcelain"
        Order:           4
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode: 0
            Output:   ""
        }]
    }
    use_module: {
        StepType: 1
        Name:     "use_module"
        Order:    5
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir /home/gopher/mod2"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cd /home/gopher/mod2"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "go mod init mod.com"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module mod.com

                """
        }, {
            CmdStr:   "go get {{{.REPO1}}}"
            ExitCode: 0
            Output: """
                go: downloading {{{.REPO1}}} v0.0.0-20060102150405-abcedf12345
                go: added {{{.REPO1}}} v0.0.0-20060102150405-abcedf12345

                """
        }, {
            CmdStr:   "go run {{{.REPO1}}}"
            ExitCode: 0
            Output: """
                Hello, world!

                """
        }]
    }
    mod1_pseudoversion: {
        StepType:        1
        InformationOnly: true
        Name:            "mod1_pseudoversion"
        Order:           6
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "go list -m -f {{.Version}} {{{.REPO1}}}"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            RandomReplace: "v0.0.0-20060102150405-abcedf12345"
        }]
    }
}
Hash: "f4a72d3bcbdc6b1a4bd48a13352560204f2daf0d510acab4df087304accb3a03"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Defs: {
    modname:     "hello"
    fullmodpath: "{{{.REPO1}}}"
    vcsurl:      "https://{{{.REPO1}}}.git"
    readme:      "README.md"
    readmepath:  "/home/gopher/hello/README.md"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    username: "{{{.GITEA_USERNAME}}}"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Var:     "REPO1"
            Pattern: "hello"
            Private: false
        }]
    }
}]
Scenarios: {
    go119: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }
}
Steps: {
    whoami: {
        Name:     string
        StepType: 1
        Stmts: """
            whoami
            pwd
            """
        Terminal: string
    }
    echo_hello: {
        Name:     string
        StepType: 1
        Stmts:    "echo '*** !!! CLICK ME !!! ***'"
        Terminal: string
    }
    multiple_commands: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir hello
            cd hello
            """
        Terminal: string
    }
    upload_readme: {
        Name:     string
        StepType: 3
        Source: """
            This is README.md.

            Hello, gopher!

            """
        Target:   "/home/gopher/hello/README.md"
        Language: "md"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    upload_readme_again: {
        Name:     string
        StepType: 3
        Source: """
            This is README.md.

            Hello, gopher!

            We made a change!

            """
        Target:   "/home/gopher/hello/README.md"
        Language: "md"
        Renderer: {
            RendererType: 3
            Pre: """
                This is README.md.

                Hello, gopher!

                """
        }
        Terminal: string
    }
    cat_readme: {
        Name:     string
        StepType: 1
        Stmts:    "cat README.md"
        Terminal: string
    }
    gitinit: {
        Name:     string
        StepType: 1
        Stmts: """
            git init -q
            git remote add origin https://{{{.REPO1}}}.git
            """
        Terminal: string
    }
    gitadd: {
        Name:     string
        StepType: 1
        Stmts: """
            git add README.md
            git commit -q -m 'Initial commit'
            """
        Terminal: string
    }
    gitpush: {
        Name:     string
        StepType: 1
        Stmts:    "git push -q origin main"
        Terminal: string
    }
}
// ---
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Pattern: "hello"
            Private: false
            Var:     "REPO1"
        }]
    }
    Version: """
        {
          "GoVersion": "go1.19.1",
          "Path": "github.com/play-with-go/gitea/cmd/gitea",
          "Main": {
            "Path": "github.com/play-with-go/gitea",
            "Version": "v0.0.0-20221003164140-c14d636df530",
            "Sum": "h1:RDNvyzwtVgtV0xOEaQL+CziEPkar/gNPyQUaWdnYjGk=",
            "Replace": null
          },
          "Deps": [
            {
              "Path": "code.gitea.io/sdk/gitea",
              "Version": "v0.15.1",
              "Sum": "h1:WJreC7YYuxbn0UDaPuWIe/mtiNKTvLN8MLkaw71yx/M=",
              "Replace": null
            },
            {
              "Path": "cuelang.org/go",
              "Version": "v0.4.3",
              "Sum": "h1:W3oBBjDTm7+IZfCKZAmC8uDG0eYfJL4Pp/xbbCMKaVo=",
              "Replace": null
            },
            {
              "Path": "github.com/cockroachdb/apd/v2",
              "Version": "v2.0.1",
              "Sum": "h1:y1Rh3tEU89D+7Tgbw+lp52T6p/GJLpDmNvr10UWqLTE=",
              "Replace": null
            },
            {
              "Path": "github.com/emicklei/proto",
              "Version": "v1.6.15",
              "Sum": "h1:XbpwxmuOPrdES97FrSfpyy67SSCV/wBIKXqgJzh6hNw=",
              "Replace": null
            },
            {
              "Path": "github.com/golang/glog",
              "Version": "v0.0.0-20160126235308-23def4e6c14b",
              "Sum": "h1:VKtxabqXZkF25pY9ekfRL6a582T4P37/31XEstQ5p58=",
              "Replace": null
            },
            {
              "Path": "github.com/google/uuid",
              "Version": "v1.2.0",
              "Sum": "h1:qJYtXnJRWmpe7m/3XlyhrsLrEURqHRM2kxzoxXqyUDs=",
              "Replace": null
            },
            {
              "Path": "github.com/hashicorp/go-version",
              "Version": "v1.2.1",
              "Sum": "h1:zEfKbn2+PDgroKdiOzqiE8rsmLqU2uwi5PB5pBJ3TkI=",
              "Replace": null
            },
            {
              "Path": "github.com/mpvl/unique",
              "Version": "v0.0.0-20150818121801-cbe035fff7de",
              "Sum": "h1:D5x39vF5KCwKQaw+OC9ZPiLVHXz3UFw2+psEX+gYcto=",
              "Replace": null
            },
            {
              "Path": "github.com/pkg/errors",
              "Version": "v0.9.1",
              "Sum": "h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=",
              "Replace": null
            },
            {
              "Path": "github.com/play-with-go/preguide",
              "Version": "v0.0.2-0.20221003193111-f84a6637f25f",
              "Sum": "h1:ijMtjVmmzO13W4+wfOng8tkYFBJN+VRuw/znwVm7x68=",
              "Replace": null
            },
            {
              "Path": "github.com/protocolbuffers/txtpbfmt",
              "Version": "v0.0.0-20201118171849-f6a6b3f636fc",
              "Sum": "h1:gSVONBi2HWMFXCa9jFdYvYk7IwW/mTLxWOF7rXS4LO0=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/crypto",
              "Version": "v0.0.0-20210921155107-089bfa567519",
              "Sum": "h1:7I4JAnoQBe7ZtJcBaYHi5UtiO8tQHbUSXxL+pnGRANg=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/net",
              "Version": "v0.0.0-20211015210444-4f30a5c0130f",
              "Sum": "h1:OfiFi4JbukWwe3lzw+xunroH1mnC1e2Gy5cxNJApiSY=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/text",
              "Version": "v0.3.7",
              "Sum": "h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/retry.v1",
              "Version": "v1.0.3",
              "Sum": "h1:a9CArYczAVv6Qs6VGoLMio99GEs7kY9UzSF9+LD+iGs=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/yaml.v3",
              "Version": "v3.0.0-20210107192922-496545a6307b",
              "Sum": "h1:h8qDotaEPuJATrMmW04NCwg7v22aHH28wwpauUhK9Oo=",
              "Replace": null
            }
          ],
          "Settings": null
        }
        """
    Variables: ["GITEA_USERNAME", "GITEA_PRIV_KEY", "GITEA_PUB_KEY", "GITEA_KEYSCAN", "REPO1"]
}]
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go119: {
            Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
        }
    }
}]
Scenarios: [{
    Name:        "go119"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
Steps: {
    whoami: {
        StepType: 1
        Name:     "whoami"
        Order:    0
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "whoami"
            ExitCode: 0
            Output: """
                gopher

                """
        }, {
            CmdStr:   "pwd"
            ExitCode: 0
            Output: """
                /home/gopher

                """
        }]
    }
    echo_hello: {
        StepType: 1
        Name:     "echo_hello"
        Order:    1
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "echo '*** !!! CLICK ME !!! ***'"
            ExitCode: 0
            Output: """
                *** !!! CLICK ME !!! ***

                """
        }]
    }
    multiple_commands: {
        StepType: 1
        Name:     "multiple_commands"
        Order:    2
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir hello"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cd hello"
            ExitCode: 0
            Output:   ""
        }]
    }
    upload_readme: {
        StepType: 2
        Name:     "upload_readme"
        Order:    3
        Terminal: "term1"
        Language: "md"
        Renderer: {
            RendererType: 1
        }
        Source: """
            This is README.md.

            Hello, gopher!

            """
        Target: "/home/gopher/hello/README.md"
    }
    upload_readme_again: {
        StepType: 2
        Name:     "upload_readme_again"
        Order:    4
        Terminal: "term1"
        Language: "md"
        Renderer: {
            RendererType: 3
            Pre: """
                This is README.md.

                Hello, gopher!

                """
        }
        Source: """
            This is README.md.

            Hello, gopher!

            We made a change!

            """
        Target: "/home/gopher/hello/README.md"
    }
    cat_readme: {
        StepType: 1
        Name:     "cat_readme"
        Order:    5
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cat README.md"
            ExitCode: 0
            Output: """
                This is README.md.

                Hello, gopher!

                We made a change!


                """
        }]
    }
    gitinit: {
        StepType: 1
        Name:     "gitinit"
        Order:    6
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git init -q"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git remote add origin https://{{{.REPO1}}}.git"
            ExitCode: 0
            Output:   ""
        }]
    }
    gitadd: {
        StepType: 1
        Name:     "gitadd"
        Order:    7
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git add README.md"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git commit -q -m 'Initial commit'"
            ExitCode: 0
            Output:   ""
        }]
    }
    gitpush: {
        StepType: 1
        Name:     "gitpush"
        Order:    8
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
}
Hash: "078ba4df03709cf71bd7d95713769f532e46d84ef0b08477a5578c88bea4bea3"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Var:     "PAINKILLER"
            Pattern: "painkiller"
            Private: false
        }]
    }
}]
Defs: {
    painkiller:       "painkiller"
    painkiller_vcs:   "https://{{{.PAINKILLER}}}.git"
    painkiller_mod:   "{{{.PAINKILLER}}}"
    painkiller_dir:   "/home/gopher/painkiller"
    painkiller_go:    "painkiller.go"
    tools_constraint: "tools"
    tools_go:         "tools.go"
    pilltype:         "Pill"
    stringer:         "stringer"
    stringer_pkg:     "golang.org/x/tools/cmd/stringer"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    stringer_type_flag: "-type"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go119: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }
}
Steps: {
    goversion: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd: "go version"
            Sanitisers: [{
                Pattern:     "linux\\/.+(?:\\n$)"
                Replacement: "linux/amd64"
            }]
        }]
        Terminal: string
    }
    painkiller_go_mod_init: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir painkiller
            cd painkiller
            go mod init painkiller
            """
        Terminal: string
    }
    basic_app: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import "fmt"

            type Pill int

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            }

            """
        Target:   "/home/gopher/painkiller/painkiller.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    painkiller_run_basic: {
        Name:     string
        StepType: 1
        Stmts:    "go run ."
        Terminal: string
    }
    manual_string: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import "fmt"

            type Pill int

            func (p Pill) String() string {
            \tswitch p {
            \tcase Placebo:
            \t\treturn "Placebo"
            \tcase Ibuprofen:
            \t\treturn "Ibuprofen"
            \tdefault:
            \t\tpanic(fmt.Errorf("unknown Pill value %v", p))
            \t}
            }

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            }

            """
        Target:   "/home/gopher/painkiller/painkiller.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                type Pill int

                const (
                \tPlacebo Pill = iota
                \tIbuprofen
                )

                func main() {
                \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
                }

                """
        }
        Terminal: string
    }
    painkiller_run_manual_string: {
        Name:     string
        StepType: 1
        Stmts:    "go run ."
        Terminal: string
    }
    painkiller_remove_hand_written_string: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import "fmt"

            type Pill int

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            }

            """
        Target:   "/home/gopher/painkiller/painkiller.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                type Pill int

                func (p Pill) String() string {
                \tswitch p {
                \tcase Placebo:
                \t\treturn "Placebo"
                \tcase Ibuprofen:
                \t\treturn "Ibuprofen"
                \tdefault:
                \t\tpanic(fmt.Errorf("unknown Pill value %v", p))
                \t}
                }

                const (
                \tPlacebo Pill = iota
                \tIbuprofen
                )

                func main() {
                \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
                }

                """
        }
        Terminal: string
    }
    tools_go_initial: {
        Name:     string
        StepType: 3
        Source: """
            // +build tools

            package tools

            import (
            \t_ "golang.org/x/tools/cmd/stringer"
            )

            """
        Target:   "/home/gopher/painkiller/tools.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    stringer_go_get: {
        Name:     string
        StepType: 1
        Stmts:    "go get golang.org/x/tools/cmd/stringer@v0.1.13-0.20220917004541-4d18923f060e"
        Terminal: string
    }
    painkiller_cat_go_mod: {
        Name:     string
        StepType: 1
        Stmts:    "cat go.mod"
        Terminal: string
    }
    painkiller_go_mod_tidy: {
        Name:     string
        StepType: 1
        Stmts:    "go mod tidy"
        Terminal: string
    }
    stringer_help: {
        Name:     string
        StepType: 1
        Stmts:    "go run golang.org/x/tools/cmd/stringer -help"
        Terminal: string
    }
    stringer_run_by_hand: {
        Name:     string
        StepType: 1
        Stmts:    "go run golang.org/x/tools/cmd/stringer -type Pill"
        Terminal: string
    }
    stringer_ls_output: {
        Name:     string
        StepType: 1
        Stmts:    "ls"
        Terminal: string
    }
    stringer_cat_generated: {
        Name:     string
        StepType: 1
        Stmts:    "cat pill_string.go"
        Terminal: string
    }
    painkiller_check_stringer: {
        Name:     string
        StepType: 1
        Stmts:    "go run ."
        Terminal: string
    }
    painkiller_add_gogenerate_directive: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import "fmt"

            //go:generate go run golang.org/x/tools/cmd/stringer -type=Pill

            type Pill int

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            }

            """
        Target:   "/home/gopher/painkiller/painkiller.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                type Pill int

                const (
                \tPlacebo Pill = iota
                \tIbuprofen
                )

                func main() {
                \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
                }

                """
        }
        Terminal: string
    }
    painkiller_gogenerate: {
        Name:     string
        StepType: 1
        Stmts:    "go generate ."
        Terminal: string
    }
    painkiller_add_fever_advice: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import "fmt"

            //go:generate go run golang.org/x/tools/cmd/stringer -type=Pill

            type Pill int

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            \tParacetamol
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            \tfmt.Printf("For a fever, take %v\\n", Paracetamol)
            }

            """
        Target:   "/home/gopher/painkiller/painkiller.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                //go:generate go run golang.org/x/tools/cmd/stringer -type=Pill

                type Pill int

                const (
                \tPlacebo Pill = iota
                \tIbuprofen
                )

                func main() {
                \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
                }

                """
        }
        Terminal: string
    }
    painkiller_gogenerate_again: {
        Name:     string
        StepType: 1
        Stmts:    "go generate ."
        Terminal: string
    }
    painkiller_check_fever_advice: {
        Name:     string
        StepType: 1
        Stmts:    "go run ."
        Terminal: string
    }
}
// ---
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Pattern: "painkiller"
            Private: false
            Var:     "PAINKILLER"
        }]
    }
    Version: """
        {
          "GoVersion": "go1.19.1",
          "Path": "github.com/play-with-go/gitea/cmd/gitea",
          "Main": {
            "Path": "github.com/play-with-go/gitea",
            "Version": "v0.0.0-20221003164140-c14d636df530",
            "Sum": "h1:RDNvyzwtVgtV0xOEaQL+CziEPkar/gNPyQUaWdnYjGk=",
            "Replace": null
          },
          "Deps": [
            {
              "Path": "code.gitea.io/sdk/gitea",
              "Version": "v0.15.1",
              "Sum": "h1:WJreC7YYuxbn0UDaPuWIe/mtiNKTvLN8MLkaw71yx/M=",
              "Replace": null
            },
            {
              "Path": "cuelang.org/go",
              "Version": "v0.4.3",
              "Sum": "h1:W3oBBjDTm7+IZfCKZAmC8uDG0eYfJL4Pp/xbbCMKaVo=",
              "Replace": null
            },
            {
              "Path": "github.com/cockroachdb/apd/v2",
              "Version": "v2.0.1",
              "Sum": "h1:y1Rh3tEU89D+7Tgbw+lp52T6p/GJLpDmNvr10UWqLTE=",
              "Replace": null
            },
            {
              "Path": "github.com/emicklei/proto",
              "Version": "v1.6.15",
              "Sum": "h1:XbpwxmuOPrdES97FrSfpyy67SSCV/wBIKXqgJzh6hNw=",
              "Replace": null
            },
            {
              "Path": "github.com/golang/glog",
              "Version": "v0.0.0-20160126235308-23def4e6c14b",
              "Sum": "h1:VKtxabqXZkF25pY9ekfRL6a582T4P37/31XEstQ5p58=",
              "Replace": null
            },
            {
              "Path": "github.com/google/uuid",
              "Version": "v1.2.0",
              "Sum": "h1:qJYtXnJRWmpe7m/3XlyhrsLrEURqHRM2kxzoxXqyUDs=",
              "Replace": null
            },
            {
              "Path": "github.com/hashicorp/go-version",
              "Version": "v1.2.1",
              "Sum": "h1:zEfKbn2+PDgroKdiOzqiE8rsmLqU2uwi5PB5pBJ3TkI=",
              "Replace": null
            },
            {
              "Path": "github.com/mpvl/unique",
              "Version": "v0.0.0-20150818121801-cbe035fff7de",
              "Sum": "h1:D5x39vF5KCwKQaw+OC9ZPiLVHXz3UFw2+psEX+gYcto=",
              "Replace": null
            },
            {
              "Path": "github.com/pkg/errors",
              "Version": "v0.9.1",
              "Sum": "h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=",
              "Replace": null
            },
            {
              "Path": "github.com/play-with-go/preguide",
              "Version": "v0.0.2-0.20221003193111-f84a6637f25f",
              "Sum": "h1:ijMtjVmmzO13W4+wfOng8tkYFBJN+VRuw/znwVm7x68=",
              "Replace": null
            },
            {
              "Path": "github.com/protocolbuffers/txtpbfmt",
              "Version": "v0.0.0-20201118171849-f6a6b3f636fc",
              "Sum": "h1:gSVONBi2HWMFXCa9jFdYvYk7IwW/mTLxWOF7rXS4LO0=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/crypto",
              "Version": "v0.0.0-20210921155107-089bfa567519",
              "Sum": "h1:7I4JAnoQBe7ZtJcBaYHi5UtiO8tQHbUSXxL+pnGRANg=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/net",
              "Version": "v0.0.0-20211015210444-4f30a5c0130f",
              "Sum": "h1:OfiFi4JbukWwe3lzw+xunroH1mnC1e2Gy5cxNJApiSY=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/text",
              "Version": "v0.3.7",
              "Sum": "h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/retry.v1",
              "Version": "v1.0.3",
              "Sum": "h1:a9CArYczAVv6Qs6VGoLMio99GEs7kY9UzSF9+LD+iGs=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/yaml.v3",
              "Version": "v3.0.0-20210107192922-496545a6307b",
              "Sum": "h1:h8qDotaEPuJATrMmW04NCwg7v22aHH28wwpauUhK9Oo=",
              "Replace": null
            }
          ],
          "Settings": null
        }
        """
    Variables: ["GITEA_USERNAME", "GITEA_PRIV_KEY", "GITEA_PUB_KEY", "GITEA_KEYSCAN", "PAINKILLER"]
}]
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go119: {
            Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
        }
    }
}]
Scenarios: [{
    Name:        "go119"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
Steps: {
    goversion: {
        StepType: 1
        Name:     "goversion"
        Order:    0
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go version"
            ExitCode: 0
            Output:   "go version go1.19.1 linux/amd64"
        }]
    }
    painkiller_go_mod_init: {
        StepType: 1
        Name:     "painkiller_go_mod_init"
        Order:    1
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir painkiller"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cd painkiller"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "go mod init painkiller"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module painkiller

                """
        }]
    }
    basic_app: {
        StepType: 2
        Name:     "basic_app"
        Order:    2
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import "fmt"

            type Pill int

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            }

            """
        Target: "/home/gopher/painkiller/painkiller.go"
    }
    painkiller_run_basic: {
        StepType: 1
        Name:     "painkiller_run_basic"
        Order:    3
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                For headaches, take 1

                """
        }]
    }
    manual_string: {
        StepType: 2
        Name:     "manual_string"
        Order:    4
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                type Pill int

                const (
                \tPlacebo Pill = iota
                \tIbuprofen
                )

                func main() {
                \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
                }

                """
        }
        Source: """
            package main

            import "fmt"

            type Pill int

            func (p Pill) String() string {
            \tswitch p {
            \tcase Placebo:
            \t\treturn "Placebo"
            \tcase Ibuprofen:
            \t\treturn "Ibuprofen"
            \tdefault:
            \t\tpanic(fmt.Errorf("unknown Pill value %v", p))
            \t}
            }

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            }

            """
        Target: "/home/gopher/painkiller/painkiller.go"
    }
    painkiller_run_manual_string: {
        StepType: 1
        Name:     "painkiller_run_manual_string"
        Order:    5
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                For headaches, take Ibuprofen

                """
        }]
    }
    painkiller_remove_hand_written_string: {
        StepType: 2
        Name:     "painkiller_remove_hand_written_string"
        Order:    6
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                type Pill int

                func (p Pill) String() string {
                \tswitch p {
                \tcase Placebo:
                \t\treturn "Placebo"
                \tcase Ibuprofen:
                \t\treturn "Ibuprofen"
                \tdefault:
                \t\tpanic(fmt.Errorf("unknown Pill value %v", p))
                \t}
                }

                const (
                \tPlacebo Pill = iota
                \tIbuprofen
                )

                func main() {
                \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
                }

                """
        }
        Source: """
            package main

            import "fmt"

            type Pill int

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            }

            """
        Target: "/home/gopher/painkiller/painkiller.go"
    }
    tools_go_initial: {
        StepType: 2
        Name:     "tools_go_initial"
        Order:    7
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // +build tools

            package tools

            import (
            \t_ "golang.org/x/tools/cmd/stringer"
            )

            """
        Target: "/home/gopher/painkiller/tools.go"
    }
    stringer_go_get: {
        StepType: 1
        Name:     "stringer_go_get"
        Order:    8
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go get golang.org/x/tools/cmd/stringer@v0.1.13-0.20220917004541-4d18923f060e"
            ExitCode: 0
            Output: """
                go: downloading golang.org/x/tools v0.1.13-0.20220917004541-4d18923f060e
                go: downloading golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f
                go: downloading golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4
                go: added golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4
                go: added golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f
                go: added golang.org/x/tools v0.1.13-0.20220917004541-4d18923f060e

                """
        }]
    }
    painkiller_cat_go_mod: {
        StepType: 1
        Name:     "painkiller_cat_go_mod"
        Order:    9
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cat go.mod"
            ExitCode: 0
            Output: """
                module painkiller

                go 1.19

                require (
                \tgolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4 // indirect
                \tgolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f // indirect
                \tgolang.org/x/tools v0.1.13-0.20220917004541-4d18923f060e // indirect
                )

                """
        }]
    }
    painkiller_go_mod_tidy: {
        StepType: 1
        Name:     "painkiller_go_mod_tidy"
        Order:    10
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go mod tidy"
            ExitCode: 0
            Output:   ""
        }]
    }
    stringer_help: {
        StepType: 1
        Name:     "stringer_help"
        Order:    11
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run golang.org/x/tools/cmd/stringer -help"
            ExitCode: 0
            Output: """
                Usage of stringer:
                \tstringer [flags] -type T [directory]
                \tstringer [flags] -type T files... # Must be a single package
                For more information, see:
                \thttps://pkg.go.dev/golang.org/x/tools/cmd/stringer
                Flags:
                  -linecomment
                    \tuse line comment text as printed text when present
                  -output string
                    \toutput file name; default srcdir/<type>_string.go
                  -tags string
                    \tcomma-separated list of build tags to apply
                  -trimprefix prefix
                    \ttrim the prefix from the generated constant names
                  -type string
                    \tcomma-separated list of type names; must be set

                """
        }]
    }
    stringer_run_by_hand: {
        StepType: 1
        Name:     "stringer_run_by_hand"
        Order:    12
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run golang.org/x/tools/cmd/stringer -type Pill"
            ExitCode: 0
            Output:   ""
        }]
    }
    stringer_ls_output: {
        StepType: 1
        Name:     "stringer_ls_output"
        Order:    13
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "ls"
            ExitCode: 0
            Output: """
                go.mod\tgo.sum\tpainkiller.go  pill_string.go  tools.go

                """
        }]
    }
    stringer_cat_generated: {
        StepType: 1
        Name:     "stringer_cat_generated"
        Order:    14
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cat pill_string.go"
            ExitCode: 0
            Output: """
                // Code generated by "stringer -type Pill"; DO NOT EDIT.

                package main

                import "strconv"

                func _() {
                \t// An "invalid array index" compiler error signifies that the constant values have changed.
                \t// Re-run the stringer command to generate them again.
                \tvar x [1]struct{}
                \t_ = x[Placebo-0]
                \t_ = x[Ibuprofen-1]
                }

                const _Pill_name = "PlaceboIbuprofen"

                var _Pill_index = [...]uint8{0, 7, 16}

                func (i Pill) String() string {
                \tif i < 0 || i >= Pill(len(_Pill_index)-1) {
                \t\treturn "Pill(" + strconv.FormatInt(int64(i), 10) + ")"
                \t}
                \treturn _Pill_name[_Pill_index[i]:_Pill_index[i+1]]
                }

                """
        }]
    }
    painkiller_check_stringer: {
        StepType: 1
        Name:     "painkiller_check_stringer"
        Order:    15
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                For headaches, take Ibuprofen

                """
        }]
    }
    painkiller_add_gogenerate_directive: {
        StepType: 2
        Name:     "painkiller_add_gogenerate_directive"
        Order:    16
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                type Pill int

                const (
                \tPlacebo Pill = iota
                \tIbuprofen
                )

                func main() {
                \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
                }

                """
        }
        Source: """
            package main

            import "fmt"

            //go:generate go run golang.org/x/tools/cmd/stringer -type=Pill

            type Pill int

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            }

            """
        Target: "/home/gopher/painkiller/painkiller.go"
    }
    painkiller_gogenerate: {
        StepType: 1
        Name:     "painkiller_gogenerate"
        Order:    17
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go generate ."
            ExitCode: 0
            Output:   ""
        }]
    }
    painkiller_add_fever_advice: {
        StepType: 2
        Name:     "painkiller_add_fever_advice"
        Order:    18
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import "fmt"

                //go:generate go run golang.org/x/tools/cmd/stringer -type=Pill

                type Pill int

                const (
                \tPlacebo Pill = iota
                \tIbuprofen
                )

                func main() {
                \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
                }

                """
        }
        Source: """
            package main

            import "fmt"

            //go:generate go run golang.org/x/tools/cmd/stringer -type=Pill

            type Pill int

            const (
            \tPlacebo Pill = iota
            \tIbuprofen
            \tParacetamol
            )

            func main() {
            \tfmt.Printf("For headaches, take %v\\n", Ibuprofen)
            \tfmt.Printf("For a fever, take %v\\n", Paracetamol)
            }

            """
        Target: "/home/gopher/painkiller/painkiller.go"
    }
    painkiller_gogenerate_again: {
        StepType: 1
        Name:     "painkiller_gogenerate_again"
        Order:    19
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go generate ."
            ExitCode: 0
            Output:   ""
        }]
    }
    painkiller_check_fever_advice: {
        StepType: 1
        Name:     "painkiller_check_fever_advice"
        Order:    20
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                For headaches, take Ibuprofen
                For a fever, take Paracetamol

                """
        }]
    }
}
Hash: "90c0f116a15b1df7f7af6b38eb3484d777595b273f26ff7e9efb9f0e8010e61e"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Var:     "PROVERB"
            Pattern: "proverb"
            Private: false
        }]
    }
}]
Defs: {
    proverb:      "proverb"
    proverb_vcs:  "https://{{{.PROVERB}}}.git"
    proverb_mod:  "{{{.PROVERB}}}"
    proverb_dir:  "/home/gopher/proverb"
    proverb_go:   "proverb.go"
    proverb_v010: "v0.1.0"
    proverb_v020: "v0.2.0"
    proverb_v030: "v0.3.0"
    proverb_v040: "v0.4.0"
    proverb_v100: "v1.0.0"
    proverb_v101: "v1.0.1"
    proverb_v102: "v1.0.2"
    gopher:       "gopher"
    gopher_mod:   "gopher"
    gopher_dir:   "/home/gopher/gopher"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    gopher_go: "gopher.go"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go119: {
        Name:        string
        Description: "Go 1.16"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }
}
Steps: {
    goversion: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd: "go version"
            Sanitisers: [{
                Pattern:     "linux\\/.+(?:\\n$)"
                Replacement: "linux/amd64"
            }]
        }]
        Terminal: string
    }
    proverb_create: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir /home/gopher/proverb
            cd /home/gopher/proverb
            git init -q
            git remote add origin https://{{{.PROVERB}}}.git
            go mod init {{{.PROVERB}}}
            """
        Terminal: string
    }
    proverb_go_initial: {
        Name:     string
        StepType: 3
        Source: """
            package proverb

            // Go returns a Go proverb
            func Go() string {
            \treturn "Don't communicate by sharing memory, share memory by communicating."
            }

            """
        Target:   "/home/gopher/proverb/proverb.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    proverb_initial_commit: {
        Name:     string
        StepType: 1
        Stmts: """
            git add -A
            git commit -q -m "Initial commit"
            git push -q origin main
            """
        Terminal: string
    }
    proverb_check_initial_porcelain: {
        Name:            string
        StepType:        1
        Stmts:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    proverb_tag_v010: {
        Name:     string
        StepType: 1
        Stmts: """
            git tag v0.1.0
            git push -q origin v0.1.0
            """
        Terminal: string
    }
    gopher_create: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir /home/gopher/gopher
            cd /home/gopher/gopher
            go mod init gopher
            """
        Terminal: string
    }
    gopher_go_initial: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t"fmt"

            \t"{{{.PROVERB}}}"
            )

            func main() {
            \tfmt.Println(proverb.Go())
            }

            """
        Target:   "/home/gopher/gopher/gopher.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    gopher_add_dep_proverb_v010: {
        Name:     string
        StepType: 1
        Stmts:    "go get {{{.PROVERB}}}@v0.1.0"
        Terminal: string
    }
    gopher_run_initial: {
        Name:     string
        StepType: 1
        Stmts:    "go run ."
        Terminal: string
    }
    proverb_cd_concurrency_change: {
        Name:     string
        StepType: 1
        Stmts:    "cd /home/gopher/proverb"
        Terminal: string
    }
    proverb_go_concurrency: {
        Name:     string
        StepType: 3
        Source: """
            package proverb

            // Go returns a Go proverb
            func Go() string {
            \treturn "Concurrency is parallelism."
            }

            """
        Target:   "/home/gopher/proverb/proverb.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package proverb

                // Go returns a Go proverb
                func Go() string {
                \treturn "Don't communicate by sharing memory, share memory by communicating."
                }

                """
        }
        Terminal: string
    }
    proverb_concurrency_commit: {
        Name:     string
        StepType: 1
        Stmts: """
            git add -A
            git commit -q -m "Switch Go proverb to something more famous"
            git push -q origin main
            """
        Terminal: string
    }
    proverb_check_concurrency_porcelain: {
        Name:            string
        StepType:        1
        Stmts:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    proverb_tag_v020: {
        Name:     string
        StepType: 1
        Stmts: """
            git tag v0.2.0
            git push -q origin v0.2.0
            """
        Terminal: string
    }
    gopher_use_v020: {
        Name:     string
        StepType: 1
        Stmts: """
            cd /home/gopher/gopher
            go get {{{.PROVERB}}}@v0.2.0
            go run .
            """
        Terminal: string
    }
    proverb_return_to_retract_v020: {
        Name:     string
        StepType: 1
        Stmts:    "cd /home/gopher/proverb"
        Terminal: string
    }
    proverb_retract_v020: {
        Name:     string
        StepType: 1
        Stmts:    "go mod edit -retract=v0.2.0"
        Terminal: string
    }
    proverb_cat_v020_retract: {
        Name:     string
        StepType: 1
        Stmts:    "cat go.mod"
        Terminal: string
    }
    proverb_comment_retraction: {
        Name:     string
        StepType: 3
        Source: """
            module {{{.PROVERB}}}

            go 1.16

            // Go proverb was totally wrong
            retract v0.2.0

            """
        Target:   "/home/gopher/proverb/go.mod"
        Language: "go.mod"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    proverb_go_fix_concurrency_bug: {
        Name:     string
        StepType: 3
        Source: """
            package proverb

            // Go returns a Go proverb
            func Go() string {
            \treturn "Concurrency is not parallelism."
            }

            """
        Target:   "/home/gopher/proverb/proverb.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package proverb

                // Go returns a Go proverb
                func Go() string {
                \treturn "Concurrency is parallelism."
                }

                """
        }
        Terminal: string
    }
    proverb_tag_v030: {
        Name:     string
        StepType: 1
        Stmts: """
            git add -A
            git commit -q -m "Fix severe error in Go proverb"
            git push -q origin main
            git tag v0.3.0
            git push -q origin v0.3.0
            """
        Terminal: string
    }
    proverb_check_v030_porcelain: {
        Name:            string
        StepType:        1
        Stmts:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    gopher_use_v030: {
        Name:     string
        StepType: 1
        Stmts: """
            cd /home/gopher/gopher
            go get {{{.PROVERB}}}@v0.3.0
            """
        Terminal: string
    }
    gopher_run_v030: {
        Name:     string
        StepType: 1
        Stmts:    "go run ."
        Terminal: string
    }
    gopher_sleep_on_proxy: {
        Name:     string
        StepType: 1
        Stmts:    "sleep 1m"
        Terminal: string
    }
    gopher_list_proverb: {
        Name:     string
        StepType: 1
        Stmts:    "go list -m -versions {{{.PROVERB}}}"
        Terminal: string
    }
    gopher_list_proverb_retracted: {
        Name:     string
        StepType: 1
        Stmts:    "go list -m -versions -retracted {{{.PROVERB}}}"
        Terminal: string
    }
    gopher_use_retracted_v020: {
        Name:     string
        StepType: 1
        Stmts:    "go get {{{.PROVERB}}}@v0.2.0"
        Terminal: string
    }
    gopher_run_retracted_v020: {
        Name:     string
        StepType: 1
        Stmts:    "go run ."
        Terminal: string
    }
    gopher_list_versions: {
        Name:     string
        StepType: 1
        Stmts:    "go list -m -u all"
        Terminal: string
    }
    gopher_use_latest_unretracted: {
        Name:     string
        StepType: 1
        Stmts:    "go get {{{.PROVERB}}}@latest"
        Terminal: string
    }
    proverb_return_life: {
        Name:     string
        StepType: 1
        Stmts:    "cd /home/gopher/proverb"
        Terminal: string
    }
    proverb_go_life_advice: {
        Name:     string
        StepType: 3
        Source: """
            package proverb

            // Go returns a Go proverb
            func Go() string {
            \treturn "Concurrency is not parallelism."
            }

            // Life returns a proverb useful for day-to-day living
            func Life() string {
            \treturn "A bird in the hand is worth two in the bush."
            }

            """
        Target:   "/home/gopher/proverb/proverb.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package proverb

                // Go returns a Go proverb
                func Go() string {
                \treturn "Concurrency is not parallelism."
                }

                """
        }
        Terminal: string
    }
    proverb_life_commit: {
        Name:     string
        StepType: 1
        Stmts: """
            git add -A
            git commit -q -m "Add Life() proverb"
            git push -q origin main
            """
        Terminal: string
    }
    proverb_check_v100_porcelain: {
        Name:            string
        StepType:        1
        Stmts:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    proverb_tag_v100: {
        Name:     string
        StepType: 1
        Stmts: """
            git tag v1.0.0
            git push -q origin v1.0.0
            """
        Terminal: string
    }
    proverb_tag_v040: {
        Name:     string
        StepType: 1
        Stmts: """
            git tag v0.4.0
            git push -q origin v0.4.0
            """
        Terminal: string
    }
    proverb_retract_v100: {
        Name:     string
        StepType: 3
        Source: """
            module {{{.PROVERB}}}

            go 1.16

            retract (
            \t// Go proverb was totally wrong
            \tv0.2.0

            \t// Published v1 too early
            \t[v1.0.0, v1.0.1]
            )

            """
        Target:   "/home/gopher/proverb/go.mod"
        Language: "go.mod"
        Renderer: {
            RendererType: 3
            Pre: """
                module {{{.PROVERB}}}

                go 1.16

                // Go proverb was totally wrong
                retract v0.2.0

                """
        }
        Terminal: string
    }
    proverb_tag_v101: {
        Name:     string
        StepType: 1
        Stmts: """
            git add -A
            git commit -q -m "Retract [v1.0.0, v1.0.1]"
            git push -q origin main
            git tag v1.0.1
            git push -q origin v1.0.1
            """
        Terminal: string
    }
    proverb_check_v101_porcelain: {
        Name:            string
        StepType:        1
        Stmts:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    gopher_cd_use_v100: {
        Name:     string
        StepType: 1
        Stmts:    "cd /home/gopher/gopher"
        Terminal: string
    }
    temp_get_v101: {
        Name:     string
        StepType: 1
        Stmts: """
            (
            \tcd $(mktemp -d)
            \texport GOPATH=$(mktemp -d)
            \tgo mod init mod.com
            \tgo get -x {{{.PROVERB}}}@v0.4.0
            \tgo get -x {{{.PROVERB}}}@v1.0.0
            \tgo get -x {{{.PROVERB}}}@v1.0.1
            \tsleep 1m
            ) > /dev/null 2>&1
            """
        InformationOnly: true
        Terminal:        string
    }
    gopher_use_v101: {
        Name:     string
        StepType: 1
        Stmts: """
            go get {{{.PROVERB}}}@v1.0.0
            go get {{{.PROVERB}}}@v1.0.1
            go get {{{.PROVERB}}}@v0.4.0
            """
        Terminal: string
    }
    gopher_sleep_on_proxy_again: {
        Name:     string
        StepType: 1
        Stmts:    "sleep 1m"
        Terminal: string
    }
    gopher_list_proverb_v101_retracted: {
        Name:     string
        StepType: 1
        Stmts:    "go list -m -versions -retracted {{{.PROVERB}}}"
        Terminal: string
    }
    gopher_list_proverb_v101_nonretracted: {
        Name:     string
        StepType: 1
        Stmts:    "go list -m -versions {{{.PROVERB}}}"
        Terminal: string
    }
    gopher_go_update_life_proverb: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t"fmt"

            \t"{{{.PROVERB}}}"
            )

            func main() {
            \tfmt.Printf("Go proverb: %v\\n", proverb.Go())
            \tfmt.Printf("Life advice: %v\\n", proverb.Life())
            }

            """
        Target:   "/home/gopher/gopher/gopher.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import (
                \t"fmt"

                \t"{{{.PROVERB}}}"
                )

                func main() {
                \tfmt.Println(proverb.Go())
                }

                """
        }
        Terminal: string
    }
    gopher_run_life_proverb: {
        Name:     string
        StepType: 1
        Stmts:    "go run ."
        Terminal: string
    }
}
// ---
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Pattern: "proverb"
            Private: false
            Var:     "PROVERB"
        }]
    }
    Version: """
        {
          "GoVersion": "go1.19.1",
          "Path": "github.com/play-with-go/gitea/cmd/gitea",
          "Main": {
            "Path": "github.com/play-with-go/gitea",
            "Version": "v0.0.0-20221003164140-c14d636df530",
            "Sum": "h1:RDNvyzwtVgtV0xOEaQL+CziEPkar/gNPyQUaWdnYjGk=",
            "Replace": null
          },
          "Deps": [
            {
              "Path": "code.gitea.io/sdk/gitea",
              "Version": "v0.15.1",
              "Sum": "h1:WJreC7YYuxbn0UDaPuWIe/mtiNKTvLN8MLkaw71yx/M=",
              "Replace": null
            },
            {
              "Path": "cuelang.org/go",
              "Version": "v0.4.3",
              "Sum": "h1:W3oBBjDTm7+IZfCKZAmC8uDG0eYfJL4Pp/xbbCMKaVo=",
              "Replace": null
            },
            {
              "Path": "github.com/cockroachdb/apd/v2",
              "Version": "v2.0.1",
              "Sum": "h1:y1Rh3tEU89D+7Tgbw+lp52T6p/GJLpDmNvr10UWqLTE=",
              "Replace": null
            },
            {
              "Path": "github.com/emicklei/proto",
              "Version": "v1.6.15",
              "Sum": "h1:XbpwxmuOPrdES97FrSfpyy67SSCV/wBIKXqgJzh6hNw=",
              "Replace": null
            },
            {
              "Path": "github.com/golang/glog",
              "Version": "v0.0.0-20160126235308-23def4e6c14b",
              "Sum": "h1:VKtxabqXZkF25pY9ekfRL6a582T4P37/31XEstQ5p58=",
              "Replace": null
            },
            {
              "Path": "github.com/google/uuid",
              "Version": "v1.2.0",
              "Sum": "h1:qJYtXnJRWmpe7m/3XlyhrsLrEURqHRM2kxzoxXqyUDs=",
              "Replace": null
            },
            {
              "Path": "github.com/hashicorp/go-version",
              "Version": "v1.2.1",
              "Sum": "h1:zEfKbn2+PDgroKdiOzqiE8rsmLqU2uwi5PB5pBJ3TkI=",
              "Replace": null
            },
            {
              "Path": "github.com/mpvl/unique",
              "Version": "v0.0.0-20150818121801-cbe035fff7de",
              "Sum": "h1:D5x39vF5KCwKQaw+OC9ZPiLVHXz3UFw2+psEX+gYcto=",
              "Replace": null
            },
            {
              "Path": "github.com/pkg/errors",
              "Version": "v0.9.1",
              "Sum": "h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=",
              "Replace": null
            },
            {
              "Path": "github.com/play-with-go/preguide",
              "Version": "v0.0.2-0.20221003193111-f84a6637f25f",
              "Sum": "h1:ijMtjVmmzO13W4+wfOng8tkYFBJN+VRuw/znwVm7x68=",
              "Replace": null
            },
            {
              "Path": "github.com/protocolbuffers/txtpbfmt",
              "Version": "v0.0.0-20201118171849-f6a6b3f636fc",
              "Sum": "h1:gSVONBi2HWMFXCa9jFdYvYk7IwW/mTLxWOF7rXS4LO0=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/crypto",
              "Version": "v0.0.0-20210921155107-089bfa567519",
              "Sum": "h1:7I4JAnoQBe7ZtJcBaYHi5UtiO8tQHbUSXxL+pnGRANg=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/net",
              "Version": "v0.0.0-20211015210444-4f30a5c0130f",
              "Sum": "h1:OfiFi4JbukWwe3lzw+xunroH1mnC1e2Gy5cxNJApiSY=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/text",
              "Version": "v0.3.7",
              "Sum": "h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/retry.v1",
              "Version": "v1.0.3",
              "Sum": "h1:a9CArYczAVv6Qs6VGoLMio99GEs7kY9UzSF9+LD+iGs=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/yaml.v3",
              "Version": "v3.0.0-20210107192922-496545a6307b",
              "Sum": "h1:h8qDotaEPuJATrMmW04NCwg7v22aHH28wwpauUhK9Oo=",
              "Replace": null
            }
          ],
          "Settings": null
        }
        """
    Variables: ["GITEA_USERNAME", "GITEA_PRIV_KEY", "GITEA_PUB_KEY", "GITEA_KEYSCAN", "PROVERB"]
}]
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go119: {
            Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
        }
    }
}]
Scenarios: [{
    Name:        "go119"
    Description: "Go 1.16"
}]
Networks: ["playwithgo_pwg"]
Env: []
Steps: {
    goversion: {
        StepType: 1
        Name:     "goversion"
        Order:    0
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go version"
            ExitCode: 0
            Output:   "go version go1.19.1 linux/amd64"
        }]
    }
    proverb_create: {
        StepType: 1
        Name:     "proverb_create"
        Order:    1
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir /home/gopher/proverb"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cd /home/gopher/proverb"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git init -q"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git remote add origin https://{{{.PROVERB}}}.git"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "go mod init {{{.PROVERB}}}"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module {{{.PROVERB}}}

                """
        }]
    }
    proverb_go_initial: {
        StepType: 2
        Name:     "proverb_go_initial"
        Order:    2
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package proverb

            // Go returns a Go proverb
            func Go() string {
            \treturn "Don't communicate by sharing memory, share memory by communicating."
            }

            """
        Target: "/home/gopher/proverb/proverb.go"
    }
    proverb_initial_commit: {
        StepType: 1
        Name:     "proverb_initial_commit"
        Order:    3
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git add -A"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git commit -q -m \"Initial commit\""
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    proverb_check_initial_porcelain: {
        StepType:        1
        InformationOnly: true
        Name:            "proverb_check_initial_porcelain"
        Order:           4
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode: 0
            Output:   ""
        }]
    }
    proverb_tag_v010: {
        StepType: 1
        Name:     "proverb_tag_v010"
        Order:    5
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git tag v0.1.0"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin v0.1.0"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    gopher_create: {
        StepType: 1
        Name:     "gopher_create"
        Order:    6
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir /home/gopher/gopher"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cd /home/gopher/gopher"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "go mod init gopher"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module gopher

                """
        }]
    }
    gopher_go_initial: {
        StepType: 2
        Name:     "gopher_go_initial"
        Order:    7
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import (
            \t"fmt"

            \t"{{{.PROVERB}}}"
            )

            func main() {
            \tfmt.Println(proverb.Go())
            }

            """
        Target: "/home/gopher/gopher/gopher.go"
    }
    gopher_add_dep_proverb_v010: {
        StepType: 1
        Name:     "gopher_add_dep_proverb_v010"
        Order:    8
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go get {{{.PROVERB}}}@v0.1.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.PROVERB}}} v0.1.0
                go: added {{{.PROVERB}}} v0.1.0

                """
        }]
    }
    gopher_run_initial: {
        StepType: 1
        Name:     "gopher_run_initial"
        Order:    9
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                Don't communicate by sharing memory, share memory by communicating.

                """
        }]
    }
    proverb_cd_concurrency_change: {
        StepType: 1
        Name:     "proverb_cd_concurrency_change"
        Order:    10
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cd /home/gopher/proverb"
            ExitCode: 0
            Output:   ""
        }]
    }
    proverb_go_concurrency: {
        StepType: 2
        Name:     "proverb_go_concurrency"
        Order:    11
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package proverb

                // Go returns a Go proverb
                func Go() string {
                \treturn "Don't communicate by sharing memory, share memory by communicating."
                }

                """
        }
        Source: """
            package proverb

            // Go returns a Go proverb
            func Go() string {
            \treturn "Concurrency is parallelism."
            }

            """
        Target: "/home/gopher/proverb/proverb.go"
    }
    proverb_concurrency_commit: {
        StepType: 1
        Name:     "proverb_concurrency_commit"
        Order:    12
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git add -A"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git commit -q -m \"Switch Go proverb to something more famous\""
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    proverb_check_concurrency_porcelain: {
        StepType:        1
        InformationOnly: true
        Name:            "proverb_check_concurrency_porcelain"
        Order:           13
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode: 0
            Output:   ""
        }]
    }
    proverb_tag_v020: {
        StepType: 1
        Name:     "proverb_tag_v020"
        Order:    14
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git tag v0.2.0"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin v0.2.0"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    gopher_use_v020: {
        StepType: 1
        Name:     "gopher_use_v020"
        Order:    15
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cd /home/gopher/gopher"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "go get {{{.PROVERB}}}@v0.2.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.PROVERB}}} v0.2.0
                go: upgraded {{{.PROVERB}}} v0.1.0 => v0.2.0

                """
        }, {
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                Concurrency is parallelism.

                """
        }]
    }
    proverb_return_to_retract_v020: {
        StepType: 1
        Name:     "proverb_return_to_retract_v020"
        Order:    16
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cd /home/gopher/proverb"
            ExitCode: 0
            Output:   ""
        }]
    }
    proverb_retract_v020: {
        StepType: 1
        Name:     "proverb_retract_v020"
        Order:    17
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go mod edit -retract=v0.2.0"
            ExitCode: 0
            Output:   ""
        }]
    }
    proverb_cat_v020_retract: {
        StepType: 1
        Name:     "proverb_cat_v020_retract"
        Order:    18
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cat go.mod"
            ExitCode: 0
            Output: """
                module {{{.PROVERB}}}

                go 1.19

                retract v0.2.0

                """
        }]
    }
    proverb_comment_retraction: {
        StepType: 2
        Name:     "proverb_comment_retraction"
        Order:    19
        Terminal: "term1"
        Language: "go.mod"
        Renderer: {
            RendererType: 1
        }
        Source: """
            module {{{.PROVERB}}}

            go 1.16

            // Go proverb was totally wrong
            retract v0.2.0

            """
        Target: "/home/gopher/proverb/go.mod"
    }
    proverb_go_fix_concurrency_bug: {
        StepType: 2
        Name:     "proverb_go_fix_concurrency_bug"
        Order:    20
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package proverb

                // Go returns a Go proverb
                func Go() string {
                \treturn "Concurrency is parallelism."
                }

                """
        }
        Source: """
            package proverb

            // Go returns a Go proverb
            func Go() string {
            \treturn "Concurrency is not parallelism."
            }

            """
        Target: "/home/gopher/proverb/proverb.go"
    }
    proverb_tag_v030: {
        StepType: 1
        Name:     "proverb_tag_v030"
        Order:    21
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git add -A"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git commit -q -m \"Fix severe error in Go proverb\""
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }, {
            CmdStr:   "git tag v0.3.0"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin v0.3.0"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    proverb_check_v030_porcelain: {
        StepType:        1
        InformationOnly: true
        Name:            "proverb_check_v030_porcelain"
        Order:           22
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode: 0
            Output:   ""
        }]
    }
    gopher_use_v030: {
        StepType: 1
        Name:     "gopher_use_v030"
        Order:    23
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cd /home/gopher/gopher"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "go get {{{.PROVERB}}}@v0.3.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.PROVERB}}} v0.3.0
                go: upgraded {{{.PROVERB}}} v0.2.0 => v0.3.0

                """
        }]
    }
    gopher_run_v030: {
        StepType: 1
        Name:     "gopher_run_v030"
        Order:    24
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                Concurrency is not parallelism.

                """
        }]
    }
    gopher_sleep_on_proxy: {
        StepType: 1
        Name:     "gopher_sleep_on_proxy"
        Order:    25
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "sleep 1m"
            ExitCode: 0
            Output:   ""
        }]
    }
    gopher_list_proverb: {
        StepType: 1
        Name:     "gopher_list_proverb"
        Order:    26
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go list -m -versions {{{.PROVERB}}}"
            ExitCode: 0
            Output: """
                {{{.PROVERB}}} v0.1.0 v0.3.0

                """
        }]
    }
    gopher_list_proverb_retracted: {
        StepType: 1
        Name:     "gopher_list_proverb_retracted"
        Order:    27
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go list -m -versions -retracted {{{.PROVERB}}}"
            ExitCode: 0
            Output: """
                {{{.PROVERB}}} v0.1.0 v0.2.0 v0.3.0

                """
        }]
    }
    gopher_use_retracted_v020: {
        StepType: 1
        Name:     "gopher_use_retracted_v020"
        Order:    28
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go get {{{.PROVERB}}}@v0.2.0"
            ExitCode: 0
            Output: """
                go: warning: {{{.PROVERB}}}@v0.2.0: retracted by module author: Go proverb was totally wrong
                go: to switch to the latest unretracted version, run:
                \tgo get {{{.PROVERB}}}@latest
                go: downgraded {{{.PROVERB}}} v0.3.0 => v0.2.0

                """
        }]
    }
    gopher_run_retracted_v020: {
        StepType: 1
        Name:     "gopher_run_retracted_v020"
        Order:    29
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                Concurrency is parallelism.

                """
        }]
    }
    gopher_list_versions: {
        StepType: 1
        Name:     "gopher_list_versions"
        Order:    30
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go list -m -u all"
            ExitCode: 0
            Output: """
                gopher
                {{{.PROVERB}}} v0.2.0 (retracted) [v0.3.0]

                """
        }]
    }
    gopher_use_latest_unretracted: {
        StepType: 1
        Name:     "gopher_use_latest_unretracted"
        Order:    31
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go get {{{.PROVERB}}}@latest"
            ExitCode: 0
            Output: """
                go: upgraded {{{.PROVERB}}} v0.2.0 => v0.3.0

                """
        }]
    }
    proverb_return_life: {
        StepType: 1
        Name:     "proverb_return_life"
        Order:    32
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cd /home/gopher/proverb"
            ExitCode: 0
            Output:   ""
        }]
    }
    proverb_go_life_advice: {
        StepType: 2
        Name:     "proverb_go_life_advice"
        Order:    33
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package proverb

                // Go returns a Go proverb
                func Go() string {
                \treturn "Concurrency is not parallelism."
                }

                """
        }
        Source: """
            package proverb

            // Go returns a Go proverb
            func Go() string {
            \treturn "Concurrency is not parallelism."
            }

            // Life returns a proverb useful for day-to-day living
            func Life() string {
            \treturn "A bird in the hand is worth two in the bush."
            }

            """
        Target: "/home/gopher/proverb/proverb.go"
    }
    proverb_life_commit: {
        StepType: 1
        Name:     "proverb_life_commit"
        Order:    34
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git add -A"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git commit -q -m \"Add Life() proverb\""
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    proverb_check_v100_porcelain: {
        StepType:        1
        InformationOnly: true
        Name:            "proverb_check_v100_porcelain"
        Order:           35
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode: 0
            Output:   ""
        }]
    }
    proverb_tag_v100: {
        StepType: 1
        Name:     "proverb_tag_v100"
        Order:    36
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git tag v1.0.0"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin v1.0.0"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    proverb_tag_v040: {
        StepType: 1
        Name:     "proverb_tag_v040"
        Order:    37
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git tag v0.4.0"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin v0.4.0"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    proverb_retract_v100: {
        StepType: 2
        Name:     "proverb_retract_v100"
        Order:    38
        Terminal: "term1"
        Language: "go.mod"
        Renderer: {
            RendererType: 3
            Pre: """
                module {{{.PROVERB}}}

                go 1.16

                // Go proverb was totally wrong
                retract v0.2.0

                """
        }
        Source: """
            module {{{.PROVERB}}}

            go 1.16

            retract (
            \t// Go proverb was totally wrong
            \tv0.2.0

            \t// Published v1 too early
            \t[v1.0.0, v1.0.1]
            )

            """
        Target: "/home/gopher/proverb/go.mod"
    }
    proverb_tag_v101: {
        StepType: 1
        Name:     "proverb_tag_v101"
        Order:    39
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git add -A"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git commit -q -m \"Retract [v1.0.0, v1.0.1]\""
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }, {
            CmdStr:   "git tag v1.0.1"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin v1.0.1"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    proverb_check_v101_porcelain: {
        StepType:        1
        InformationOnly: true
        Name:            "proverb_check_v101_porcelain"
        Order:           40
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode: 0
            Output:   ""
        }]
    }
    gopher_cd_use_v100: {
        StepType: 1
        Name:     "gopher_cd_use_v100"
        Order:    41
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cd /home/gopher/gopher"
            ExitCode: 0
            Output:   ""
        }]
    }
    temp_get_v101: {
        StepType:        1
        InformationOnly: true
        Name:            "temp_get_v101"
        Order:           42
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "(cd $(mktemp -d); export GOPATH=$(mktemp -d); go mod init mod.com; go get -x {{{.PROVERB}}}@v0.4.0; go get -x {{{.PROVERB}}}@v1.0.0; go get -x {{{.PROVERB}}}@v1.0.1; sleep 1m) >/dev/null 2>&1"
            ExitCode: 0
            Output:   ""
        }]
    }
    gopher_use_v101: {
        StepType: 1
        Name:     "gopher_use_v101"
        Order:    43
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go get {{{.PROVERB}}}@v1.0.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.PROVERB}}} v1.0.0
                go: warning: {{{.PROVERB}}}@v1.0.0: retracted by module author: Published v1 too early
                go: to switch to the latest unretracted version, run:
                \tgo get {{{.PROVERB}}}@latest
                go: upgraded {{{.PROVERB}}} v0.3.0 => v1.0.0

                """
        }, {
            CmdStr:   "go get {{{.PROVERB}}}@v1.0.1"
            ExitCode: 0
            Output: """
                go: downloading {{{.PROVERB}}} v1.0.1
                go: warning: {{{.PROVERB}}}@v1.0.1: retracted by module author: Published v1 too early
                go: to switch to the latest unretracted version, run:
                \tgo get {{{.PROVERB}}}@latest
                go: upgraded {{{.PROVERB}}} v1.0.0 => v1.0.1

                """
        }, {
            CmdStr:   "go get {{{.PROVERB}}}@v0.4.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.PROVERB}}} v0.4.0
                go: downgraded {{{.PROVERB}}} v1.0.1 => v0.4.0

                """
        }]
    }
    gopher_sleep_on_proxy_again: {
        StepType: 1
        Name:     "gopher_sleep_on_proxy_again"
        Order:    44
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "sleep 1m"
            ExitCode: 0
            Output:   ""
        }]
    }
    gopher_list_proverb_v101_retracted: {
        StepType: 1
        Name:     "gopher_list_proverb_v101_retracted"
        Order:    45
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go list -m -versions -retracted {{{.PROVERB}}}"
            ExitCode: 0
            Output: """
                {{{.PROVERB}}} v0.1.0 v0.2.0 v0.3.0 v0.4.0 v1.0.0 v1.0.1

                """
        }]
    }
    gopher_list_proverb_v101_nonretracted: {
        StepType: 1
        Name:     "gopher_list_proverb_v101_nonretracted"
        Order:    46
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go list -m -versions {{{.PROVERB}}}"
            ExitCode: 0
            Output: """
                {{{.PROVERB}}} v0.1.0 v0.3.0 v0.4.0

                """
        }]
    }
    gopher_go_update_life_proverb: {
        StepType: 2
        Name:     "gopher_go_update_life_proverb"
        Order:    47
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package main

                import (
                \t"fmt"

                \t"{{{.PROVERB}}}"
                )

                func main() {
                \tfmt.Println(proverb.Go())
                }

                """
        }
        Source: """
            package main

            import (
            \t"fmt"

            \t"{{{.PROVERB}}}"
            )

            func main() {
            \tfmt.Printf("Go proverb: %v\\n", proverb.Go())
            \tfmt.Printf("Life advice: %v\\n", proverb.Life())
            }

            """
        Target: "/home/gopher/gopher/gopher.go"
    }
    gopher_run_life_proverb: {
        StepType: 1
        Name:     "gopher_run_life_proverb"
        Order:    48
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                Go proverb: Concurrency is not parallelism.
                Life advice: A bird in the hand is worth two in the bush.

                """
        }]
    }
}
Hash: "e0156387dca9f4e908778aa3cd2f560cad49a3a8a076d6a62ffcea58e2f73268"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Defs: {
    mkcert:         "mkcert"
    mkcert_pkg:     "filippo.io/mkcert"
    mkcert_version: "v1.4.4"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    mktemp: "mktemp -d"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go119: {
        Name:        string
        Description: "Go 1.16"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }
}
Steps: {
    goversion: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd: "go version"
            Sanitisers: [{
                Pattern:     "linux\\/.+(?:\\n$)"
                Replacement: "linux/amd64"
            }]
        }]
        Terminal: string
    }
    go119_mkcert_install: {
        Name:     string
        StepType: 1
        Stmts:    "go install filippo.io/mkcert@v1.4.4"
        Terminal: string
    }
    which_mkcert: {
        Name:     string
        StepType: 1
        Stmts:    "which mkcert"
        Terminal: string
    }
    run_mkcert: {
        Name:     string
        StepType: 1
        Stmts:    "mkcert -version"
        Terminal: string
    }
    goversion_mkcert: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd: "go version -m $(which mkcert)"
            Sanitisers: [{
                Pattern:     "(?ms)^\\s+build\\s.*(?:\\n)"
                Replacement: ""
            }, {
                Pattern:     "(?m)\\s+(?:$)"
                LineWise:    true
                Replacement: ""
            }]
        }]
        Terminal: string
    }
}
// ---
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go119: {
            Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
        }
    }
}]
Scenarios: [{
    Name:        "go119"
    Description: "Go 1.16"
}]
Networks: ["playwithgo_pwg"]
Env: []
Steps: {
    goversion: {
        StepType: 1
        Name:     "goversion"
        Order:    0
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go version"
            ExitCode: 0
            Output:   "go version go1.19.1 linux/amd64"
        }]
    }
    go119_mkcert_install: {
        StepType: 1
        Name:     "go119_mkcert_install"
        Order:    1
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go install filippo.io/mkcert@v1.4.4"
            ExitCode: 0
            Output: """
                go: downloading filippo.io/mkcert v1.4.4
                go: downloading golang.org/x/net v0.0.0-20220421235706-1d1ef9303861
                go: downloading software.sslmate.com/src/go-pkcs12 v0.2.0
                go: downloading golang.org/x/text v0.3.7
                go: downloading golang.org/x/crypto v0.0.0-20220331220935-ae2d96664a29

                """
        }]
    }
    which_mkcert: {
        StepType: 1
        Name:     "which_mkcert"
        Order:    2
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "which mkcert"
            ExitCode: 0
            Output: """
                /home/gopher/go/bin/mkcert

                """
        }]
    }
    run_mkcert: {
        StepType: 1
        Name:     "run_mkcert"
        Order:    3
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkcert -version"
            ExitCode: 0
            Output: """
                v1.4.4

                """
        }]
    }
    goversion_mkcert: {
        StepType: 1
        Name:     "goversion_mkcert"
        Order:    4
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go version -m $(which mkcert)"
            ExitCode: 0
            Output: """
                /home/gopher/go/bin/mkcert: go1.19.1
                \tpath\tfilippo.io/mkcert
                \tmod\tfilippo.io/mkcert\tv1.4.4\th1:8eVbbwfVlaqUM7OwuftKc2nuYOoTDQWqsoXmzoXZdbc=
                \tdep\tgolang.org/x/crypto\tv0.0.0-20220331220935-ae2d96664a29\th1:tkVvjkPTB7pnW3jnid7kNyAMPVWllTNOf/qKDze4p9o=
                \tdep\tgolang.org/x/net\tv0.0.0-20220421235706-1d1ef9303861\th1:yssD99+7tqHWO5Gwh81phT+67hg+KttniBr6UnEXOY8=
                \tdep\tgolang.org/x/text\tv0.3.7\th1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=
                \tdep\tsoftware.sslmate.com/src/go-pkcs12\tv0.2.0\th1:nlFkj7bTysH6VkC4fGphtjXRbezREPgrHuJG20hBGPE=

                """
        }]
    }
}
Hash: "e02e44a4f6bb7d7b6fde80ddd0078920a147a3f750d737746f64df50cb0d2e5f"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Defs: {
    staticcheck_version:      "v0.3.3"
    staticcheck_conf:         "staticcheck.conf"
    staticcheck_st1000:       "ST1000"
    staticcheck_sa4018:       "SA4018"
    staticcheck_sa5009:       "SA5009"
    staticcheck_explain_flag: "-explain"
    pets:                     "pets"
    pets_dir:                 "/home/gopher/pets"
    pets_go:                  "pets.go"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    pets_mod: "pets"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go119: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }
}
Steps: {
    goversion: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd: "go version"
            Sanitisers: [{
                Pattern:     "linux\\/.+(?:\\n$)"
                Replacement: "linux/amd64"
            }]
        }]
        Terminal: string
    }
    staticcheck_install: {
        Name:     string
        StepType: 1
        Stmts:    "go install honnef.co/go/tools/cmd/staticcheck@v0.3.3"
        Terminal: string
    }
    staticcheck_check_on_path: {
        Name:     string
        StepType: 1
        Stmts:    "which staticcheck"
        Terminal: string
    }
    staticcheck_version: {
        Name:     string
        StepType: 1
        Stmts:    "staticcheck -version"
        Terminal: string
    }
    pets_init: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir /home/gopher/pets
            cd /home/gopher/pets
            go mod init pets
            """
        Terminal: string
    }
    pets_go_initial: {
        Name:     string
        StepType: 3
        Source: """
            package pets

            import (
            \t"errors"
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n")
            \tdefault:
            \t\treturn errors.New(fmt.Sprintf("Cannot take %v for a walk", p.Name))
            \t}
            \treturn nil
            }

            func (self Pet) String() string {
            \treturn fmt.Sprintf("%s", self.Name)
            }

            """
        Target:   "/home/gopher/pets/pets.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    pets_build_initial: {
        Name:     string
        StepType: 1
        Stmts:    "go build"
        Terminal: string
    }
    pets_staticcheck_initial: {
        Name:     string
        StepType: 1
        Stmts:    "! staticcheck ."
        Terminal: string
    }
    staticcheck_explain: {
        Name:     string
        StepType: 1
        Stmts:    "staticcheck -explain SA5009"
        Terminal: string
    }
    pets_go_fixed: {
        Name:     string
        StepType: 3
        Source: """
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target:   "/home/gopher/pets/pets.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package pets

                import (
                \t"errors"
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n")
                \tdefault:
                \t\treturn errors.New(fmt.Sprintf("Cannot take %v for a walk", p.Name))
                \t}
                \treturn nil
                }

                func (self Pet) String() string {
                \treturn fmt.Sprintf("%s", self.Name)
                }

                """
        }
        Terminal: string
    }
    pets_staticcheck_fixed: {
        Name:     string
        StepType: 1
        Stmts:    "staticcheck ."
        Terminal: string
    }
    staticcheck_config_initial: {
        Name:     string
        StepType: 3
        Source: """
            checks = ["inherit", "ST1000"]

            """
        Target:   "/home/gopher/pets/staticcheck.conf"
        Language: "toml"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    pets_staticcheck_st1000_enabled: {
        Name:     string
        StepType: 1
        Stmts:    "! staticcheck ."
        Terminal: string
    }
    pets_go_with_package_comment: {
        Name:     string
        StepType: 3
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target:   "/home/gopher/pets/pets.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package pets

                import (
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Terminal: string
    }
    pets_staticcheck_st1000_fixed: {
        Name:     string
        StepType: 1
        Stmts:    "staticcheck ."
        Terminal: string
    }
    pets_go_feed: {
        Name:     string
        StepType: 3
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) Feed(food string) {
            \tfood = food
            \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target:   "/home/gopher/pets/pets.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                // Package pets contains useful functionality for pet owners
                package pets

                import (
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Terminal: string
    }
    pets_staticcheck_check_feed: {
        Name:     string
        StepType: 1
        Stmts:    "! staticcheck ."
        Terminal: string
    }
    pets_go_ignore_sa4018: {
        Name:     string
        StepType: 3
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) Feed(food string) {
            \t//lint:ignore SA4018 trying out line-based linter directives
            \tfood = food
            \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target:   "/home/gopher/pets/pets.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                // Package pets contains useful functionality for pet owners
                package pets

                import (
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) Feed(food string) {
                \tfood = food
                \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Terminal: string
    }
    pets_staticcheck_check_sa4018_ignored: {
        Name:     string
        StepType: 1
        Stmts:    "staticcheck ."
        Terminal: string
    }
    pets_go_file_ignore_sa4018: {
        Name:     string
        StepType: 3
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            //lint:file-ignore SA4018 trying out file-based linter directives

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) Feed(food string) {
            \tfood = food
            \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target:   "/home/gopher/pets/pets.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                // Package pets contains useful functionality for pet owners
                package pets

                import (
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) Feed(food string) {
                \t//lint:ignore SA4018 trying out line-based linter directives
                \tfood = food
                \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Terminal: string
    }
    pets_staticcheck_check_sa4018_still_ignored: {
        Name:     string
        StepType: 1
        Stmts:    "staticcheck ."
        Terminal: string
    }
    pets_go_final: {
        Name:     string
        StepType: 3
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) Feed(food string) {
            \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target:   "/home/gopher/pets/pets.go"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                // Package pets contains useful functionality for pet owners
                package pets

                import (
                \t"fmt"
                )

                //lint:file-ignore SA4018 trying out file-based linter directives

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) Feed(food string) {
                \tfood = food
                \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Terminal: string
    }
    pets_staticcheck_final: {
        Name:     string
        StepType: 1
        Stmts:    "staticcheck ."
        Terminal: string
    }
}
// ---
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go119: {
            Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
        }
    }
}]
Scenarios: [{
    Name:        "go119"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
Steps: {
    goversion: {
        StepType: 1
        Name:     "goversion"
        Order:    0
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go version"
            ExitCode: 0
            Output:   "go version go1.19.1 linux/amd64"
        }]
    }
    staticcheck_install: {
        StepType: 1
        Name:     "staticcheck_install"
        Order:    1
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go install honnef.co/go/tools/cmd/staticcheck@v0.3.3"
            ExitCode: 0
            Output: """
                go: downloading honnef.co/go/tools v0.3.3
                go: downloading golang.org/x/tools v0.1.11-0.20220513221640-090b14e8501f
                go: downloading golang.org/x/exp/typeparams v0.0.0-20220218215828-6cf2b201936e
                go: downloading golang.org/x/sys v0.0.0-20211019181941-9d821ace8654
                go: downloading github.com/BurntSushi/toml v0.4.1
                go: downloading golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4

                """
        }]
    }
    staticcheck_check_on_path: {
        StepType: 1
        Name:     "staticcheck_check_on_path"
        Order:    2
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "which staticcheck"
            ExitCode: 0
            Output: """
                /home/gopher/go/bin/staticcheck

                """
        }]
    }
    staticcheck_version: {
        StepType: 1
        Name:     "staticcheck_version"
        Order:    3
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "staticcheck -version"
            ExitCode: 0
            Output: """
                staticcheck 2022.1.3 (v0.3.3)

                """
        }]
    }
    pets_init: {
        StepType: 1
        Name:     "pets_init"
        Order:    4
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir /home/gopher/pets"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cd /home/gopher/pets"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "go mod init pets"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module pets

                """
        }]
    }
    pets_go_initial: {
        StepType: 2
        Name:     "pets_go_initial"
        Order:    5
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package pets

            import (
            \t"errors"
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n")
            \tdefault:
            \t\treturn errors.New(fmt.Sprintf("Cannot take %v for a walk", p.Name))
            \t}
            \treturn nil
            }

            func (self Pet) String() string {
            \treturn fmt.Sprintf("%s", self.Name)
            }

            """
        Target: "/home/gopher/pets/pets.go"
    }
    pets_build_initial: {
        StepType: 1
        Name:     "pets_build_initial"
        Order:    6
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go build"
            ExitCode: 0
            Output:   ""
        }]
    }
    pets_staticcheck_initial: {
        StepType: 1
        Name:     "pets_staticcheck_initial"
        Order:    7
        Terminal: "term1"
        Stmts: [{
            Negated:  true
            CmdStr:   "staticcheck ."
            ExitCode: 1
            Output: """
                pets.go:23:14: Printf format %v reads arg #1, but call has only 0 args (SA5009)
                pets.go:25:10: should use fmt.Errorf(...) instead of errors.New(fmt.Sprintf(...)) (S1028)
                pets.go:30:7: receiver name should be a reflection of its identity; don't use generic names such as "this" or "self" (ST1006)
                pets.go:31:9: the argument is already a string, there's no need to use fmt.Sprintf (S1025)

                """
        }]
    }
    staticcheck_explain: {
        StepType: 1
        Name:     "staticcheck_explain"
        Order:    8
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "staticcheck -explain SA5009"
            ExitCode: 0
            Output: """
                Invalid Printf call

                Available since
                    2019.2

                Online documentation
                    https://staticcheck.io/docs/checks#SA5009

                """
        }]
    }
    pets_go_fixed: {
        StepType: 2
        Name:     "pets_go_fixed"
        Order:    9
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package pets

                import (
                \t"errors"
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n")
                \tdefault:
                \t\treturn errors.New(fmt.Sprintf("Cannot take %v for a walk", p.Name))
                \t}
                \treturn nil
                }

                func (self Pet) String() string {
                \treturn fmt.Sprintf("%s", self.Name)
                }

                """
        }
        Source: """
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target: "/home/gopher/pets/pets.go"
    }
    pets_staticcheck_fixed: {
        StepType: 1
        Name:     "pets_staticcheck_fixed"
        Order:    10
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "staticcheck ."
            ExitCode: 0
            Output:   ""
        }]
    }
    staticcheck_config_initial: {
        StepType: 2
        Name:     "staticcheck_config_initial"
        Order:    11
        Terminal: "term1"
        Language: "toml"
        Renderer: {
            RendererType: 1
        }
        Source: """
            checks = ["inherit", "ST1000"]

            """
        Target: "/home/gopher/pets/staticcheck.conf"
    }
    pets_staticcheck_st1000_enabled: {
        StepType: 1
        Name:     "pets_staticcheck_st1000_enabled"
        Order:    12
        Terminal: "term1"
        Stmts: [{
            Negated:  true
            CmdStr:   "staticcheck ."
            ExitCode: 1
            Output: """
                pets.go:1:1: at least one file in a package should have a package comment (ST1000)

                """
        }]
    }
    pets_go_with_package_comment: {
        StepType: 2
        Name:     "pets_go_with_package_comment"
        Order:    13
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                package pets

                import (
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target: "/home/gopher/pets/pets.go"
    }
    pets_staticcheck_st1000_fixed: {
        StepType: 1
        Name:     "pets_staticcheck_st1000_fixed"
        Order:    14
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "staticcheck ."
            ExitCode: 0
            Output:   ""
        }]
    }
    pets_go_feed: {
        StepType: 2
        Name:     "pets_go_feed"
        Order:    15
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                // Package pets contains useful functionality for pet owners
                package pets

                import (
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) Feed(food string) {
            \tfood = food
            \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target: "/home/gopher/pets/pets.go"
    }
    pets_staticcheck_check_feed: {
        StepType: 1
        Name:     "pets_staticcheck_check_feed"
        Order:    16
        Terminal: "term1"
        Stmts: [{
            Negated:  true
            CmdStr:   "staticcheck ."
            ExitCode: 1
            Output: """
                pets.go:31:2: self-assignment of food to food (SA4018)

                """
        }]
    }
    pets_go_ignore_sa4018: {
        StepType: 2
        Name:     "pets_go_ignore_sa4018"
        Order:    17
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                // Package pets contains useful functionality for pet owners
                package pets

                import (
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) Feed(food string) {
                \tfood = food
                \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) Feed(food string) {
            \t//lint:ignore SA4018 trying out line-based linter directives
            \tfood = food
            \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target: "/home/gopher/pets/pets.go"
    }
    pets_staticcheck_check_sa4018_ignored: {
        StepType: 1
        Name:     "pets_staticcheck_check_sa4018_ignored"
        Order:    18
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "staticcheck ."
            ExitCode: 0
            Output:   ""
        }]
    }
    pets_go_file_ignore_sa4018: {
        StepType: 2
        Name:     "pets_go_file_ignore_sa4018"
        Order:    19
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                // Package pets contains useful functionality for pet owners
                package pets

                import (
                \t"fmt"
                )

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) Feed(food string) {
                \t//lint:ignore SA4018 trying out line-based linter directives
                \tfood = food
                \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            //lint:file-ignore SA4018 trying out file-based linter directives

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) Feed(food string) {
            \tfood = food
            \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target: "/home/gopher/pets/pets.go"
    }
    pets_staticcheck_check_sa4018_still_ignored: {
        StepType: 1
        Name:     "pets_staticcheck_check_sa4018_still_ignored"
        Order:    20
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "staticcheck ."
            ExitCode: 0
            Output:   ""
        }]
    }
    pets_go_final: {
        StepType: 2
        Name:     "pets_go_final"
        Order:    21
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 3
            Pre: """
                // Package pets contains useful functionality for pet owners
                package pets

                import (
                \t"fmt"
                )

                //lint:file-ignore SA4018 trying out file-based linter directives

                type Animal int

                const (
                \tDog Animal = iota
                \tSnake
                )

                type Pet struct {
                \tKind Animal
                \tName string
                }

                func (p Pet) Walk() error {
                \tswitch p.Kind {
                \tcase Dog:
                \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
                \tdefault:
                \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
                \t}
                \treturn nil
                }

                func (p Pet) Feed(food string) {
                \tfood = food
                \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
                }

                func (p Pet) String() string {
                \treturn p.Name
                }

                """
        }
        Source: """
            // Package pets contains useful functionality for pet owners
            package pets

            import (
            \t"fmt"
            )

            type Animal int

            const (
            \tDog Animal = iota
            \tSnake
            )

            type Pet struct {
            \tKind Animal
            \tName string
            }

            func (p Pet) Walk() error {
            \tswitch p.Kind {
            \tcase Dog:
            \t\tfmt.Printf("Will take %v for a walk around the block\\n", p.Name)
            \tdefault:
            \t\treturn fmt.Errorf("cannot take %v for a walk", p.Name)
            \t}
            \treturn nil
            }

            func (p Pet) Feed(food string) {
            \tfmt.Printf("Feeding %v some %v\\n", p.Name, food)
            }

            func (p Pet) String() string {
            \treturn p.Name
            }

            """
        Target: "/home/gopher/pets/pets.go"
    }
    pets_staticcheck_final: {
        StepType: 1
        Name:     "pets_staticcheck_final"
        Order:    22
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "staticcheck ."
            ExitCode: 0
            Output:   ""
        }]
    }
}
Hash: "8200d1ab1c995b0b3438c73a25d9c9cf67a2776285f710d502f43f987efc80db"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Var:     "PUBLIC"
            Pattern: "public"
            Private: false
        }, {
            Var:     "PRIVATE"
            Pattern: "private"
            Private: true
        }]
    }
}]
Defs: {
    public:         "public"
    public_vcs:     "https://{{{.PUBLIC}}}.git"
    public_mod:     "{{{.PUBLIC}}}"
    public_dir:     "/home/gopher/public"
    public_go:      "public.go"
    public_message: "Message()"
    private:        "private"
    private_vcs:    "https://{{{.PRIVATE}}}.git"
    private_mod:    "{{{.PRIVATE}}}"
    private_dir:    "/home/gopher/private"
    private_go:     "private.go"
    private_secret: "Secret()"
    gopher:         "gopher"
    gopher_vcs:     "https://gopher.git"
    gopher_mod:     "gopher"
    gopher_dir:     "/home/gopher/gopher"
    gopher_go:      "gopher.go"
    go_help_env:    "go help env"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    go_help_modprivate: "go help module-auth"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go119: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }
}
Steps: {
    goversion: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd: "go version"
            Sanitisers: [{
                Pattern:     "linux\\/.+(?:\\n$)"
                Replacement: "linux/amd64"
            }]
        }]
        Terminal: string
    }
    public_init: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir /home/gopher/public
            cd /home/gopher/public
            go mod init {{{.PUBLIC}}}
            git init -q
            git remote add origin https://{{{.PUBLIC}}}.git
            """
        Terminal: string
    }
    public_go_initial: {
        Name:     string
        StepType: 3
        Source: """
            package public

            func Message() string {
            \treturn "This is a public safety announcement!"
            }

            """
        Target:   "/home/gopher/public/public.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    public_initial_commit: {
        Name:     string
        StepType: 1
        Stmts: """
            git add public.go go.mod
            git commit -q -m 'Initial commit of public module'
            git push -q origin main
            """
        Terminal: string
    }
    public_check_initial_porcelain: {
        Name:            string
        StepType:        1
        Stmts:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    private_init: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir /home/gopher/private
            cd /home/gopher/private
            go mod init {{{.PRIVATE}}}
            git init -q
            git remote add origin https://{{{.PRIVATE}}}.git
            """
        Terminal: string
    }
    private_go_initial: {
        Name:     string
        StepType: 3
        Source: """
            package private

            func Secret() string {
            \treturn "This is a top secret message... for your eyes only"
            }

            """
        Target:   "/home/gopher/private/private.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    private_initial_commit: {
        Name:     string
        StepType: 1
        Stmts: """
            git add private.go go.mod
            git commit -q -m 'Initial commit of private module'
            git push -q origin main
            """
        Terminal: string
    }
    private_check_initial_porcelain: {
        Name:            string
        StepType:        1
        Stmts:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    gopher_init: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir /home/gopher/gopher
            cd /home/gopher/gopher
            go mod init gopher
            """
        Terminal: string
    }
    gopher_go_initial: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t"fmt"

            \t"{{{.PUBLIC}}}"
            \t"{{{.PRIVATE}}}"
            )

            func main() {
            \tfmt.Printf("public.Message(): %v\\n", public.Message())
            \tfmt.Printf("private.Secret(): %v\\n", private.Secret())
            }

            """
        Target:   "/home/gopher/gopher/gopher.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    go_env_check_goproxy: {
        Name:     string
        StepType: 1
        Stmts:    "go env GOPROXY"
        Terminal: string
    }
    go_env_check_gosumdb: {
        Name:     string
        StepType: 1
        Stmts:    "go env GOSUMDB"
        Terminal: string
    }
    go_env_check: {
        Name:            string
        StepType:        1
        Stmts:           "go help env"
        InformationOnly: true
        Terminal:        string
    }
    goproxy_proxy_only: {
        Name:     string
        StepType: 1
        Stmts:    "go env -w GOPROXY=https://proxy.golang.org"
        Terminal: string
    }
    gopher_get_public_initial: {
        Name:     string
        StepType: 1
        Stmts:    " go get {{{.PUBLIC}}}"
        Terminal: string
    }
    public_pseudo_version: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd:           "go list -m -f {{.Version}} {{{.PUBLIC}}}"
            RandomReplace: "v0.0.0-20060102150405-abcedf12345"
        }]
        InformationOnly: true
        Terminal:        string
    }
    gopher_get_private_initial: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd: "! go get {{{.PRIVATE}}}"
            Comparators: [{
                Pattern: "(pkg/mod/cache/vcs/)[0-9a-f]+"
            }]
        }]
        Terminal: string
    }
    goproxy_proxy_default: {
        Name:     string
        StepType: 1
        Stmts:    "go env -w GOPROXY="
        Terminal: string
    }
    gopher_get_private_direct: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd: "! go get {{{.PRIVATE}}}"
            Comparators: [{
                Pattern: "(pkg/mod/cache/vcs/)[0-9a-f]+"
            }]
        }]
        Terminal: string
    }
    go_help_modprivate: {
        Name:            string
        StepType:        1
        Stmts:           "go help module-auth"
        InformationOnly: true
        Terminal:        string
    }
    goprivate_set_private: {
        Name:     string
        StepType: 1
        Stmts:    "go env -w GOPRIVATE={{{.PRIVATE}}}"
        Terminal: string
    }
    gopher_get_private_goprivate: {
        Name:     string
        StepType: 1
        Stmts:    "go get {{{.PRIVATE}}}"
        Terminal: string
    }
    private_pseudo_version: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd:           "go list -m -f {{.Version}} {{{.PRIVATE}}}"
            RandomReplace: "v0.0.0-20060102150405-abcedf12345"
        }]
        InformationOnly: true
        Terminal:        string
    }
    gopher_run: {
        Name:     string
        StepType: 1
        Stmts:    "go run ."
        Terminal: string
    }
}
// ---
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Pattern: "public"
            Private: false
            Var:     "PUBLIC"
        }, {
            Pattern: "private"
            Private: true
            Var:     "PRIVATE"
        }]
    }
    Version: """
        {
          "GoVersion": "go1.19.1",
          "Path": "github.com/play-with-go/gitea/cmd/gitea",
          "Main": {
            "Path": "github.com/play-with-go/gitea",
            "Version": "v0.0.0-20221003164140-c14d636df530",
            "Sum": "h1:RDNvyzwtVgtV0xOEaQL+CziEPkar/gNPyQUaWdnYjGk=",
            "Replace": null
          },
          "Deps": [
            {
              "Path": "code.gitea.io/sdk/gitea",
              "Version": "v0.15.1",
              "Sum": "h1:WJreC7YYuxbn0UDaPuWIe/mtiNKTvLN8MLkaw71yx/M=",
              "Replace": null
            },
            {
              "Path": "cuelang.org/go",
              "Version": "v0.4.3",
              "Sum": "h1:W3oBBjDTm7+IZfCKZAmC8uDG0eYfJL4Pp/xbbCMKaVo=",
              "Replace": null
            },
            {
              "Path": "github.com/cockroachdb/apd/v2",
              "Version": "v2.0.1",
              "Sum": "h1:y1Rh3tEU89D+7Tgbw+lp52T6p/GJLpDmNvr10UWqLTE=",
              "Replace": null
            },
            {
              "Path": "github.com/emicklei/proto",
              "Version": "v1.6.15",
              "Sum": "h1:XbpwxmuOPrdES97FrSfpyy67SSCV/wBIKXqgJzh6hNw=",
              "Replace": null
            },
            {
              "Path": "github.com/golang/glog",
              "Version": "v0.0.0-20160126235308-23def4e6c14b",
              "Sum": "h1:VKtxabqXZkF25pY9ekfRL6a582T4P37/31XEstQ5p58=",
              "Replace": null
            },
            {
              "Path": "github.com/google/uuid",
              "Version": "v1.2.0",
              "Sum": "h1:qJYtXnJRWmpe7m/3XlyhrsLrEURqHRM2kxzoxXqyUDs=",
              "Replace": null
            },
            {
              "Path": "github.com/hashicorp/go-version",
              "Version": "v1.2.1",
              "Sum": "h1:zEfKbn2+PDgroKdiOzqiE8rsmLqU2uwi5PB5pBJ3TkI=",
              "Replace": null
            },
            {
              "Path": "github.com/mpvl/unique",
              "Version": "v0.0.0-20150818121801-cbe035fff7de",
              "Sum": "h1:D5x39vF5KCwKQaw+OC9ZPiLVHXz3UFw2+psEX+gYcto=",
              "Replace": null
            },
            {
              "Path": "github.com/pkg/errors",
              "Version": "v0.9.1",
              "Sum": "h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=",
              "Replace": null
            },
            {
              "Path": "github.com/play-with-go/preguide",
              "Version": "v0.0.2-0.20221003193111-f84a6637f25f",
              "Sum": "h1:ijMtjVmmzO13W4+wfOng8tkYFBJN+VRuw/znwVm7x68=",
              "Replace": null
            },
            {
              "Path": "github.com/protocolbuffers/txtpbfmt",
              "Version": "v0.0.0-20201118171849-f6a6b3f636fc",
              "Sum": "h1:gSVONBi2HWMFXCa9jFdYvYk7IwW/mTLxWOF7rXS4LO0=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/crypto",
              "Version": "v0.0.0-20210921155107-089bfa567519",
              "Sum": "h1:7I4JAnoQBe7ZtJcBaYHi5UtiO8tQHbUSXxL+pnGRANg=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/net",
              "Version": "v0.0.0-20211015210444-4f30a5c0130f",
              "Sum": "h1:OfiFi4JbukWwe3lzw+xunroH1mnC1e2Gy5cxNJApiSY=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/text",
              "Version": "v0.3.7",
              "Sum": "h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/retry.v1",
              "Version": "v1.0.3",
              "Sum": "h1:a9CArYczAVv6Qs6VGoLMio99GEs7kY9UzSF9+LD+iGs=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/yaml.v3",
              "Version": "v3.0.0-20210107192922-496545a6307b",
              "Sum": "h1:h8qDotaEPuJATrMmW04NCwg7v22aHH28wwpauUhK9Oo=",
              "Replace": null
            }
          ],
          "Settings": null
        }
        """
    Variables: ["GITEA_USERNAME", "GITEA_PRIV_KEY", "GITEA_PUB_KEY", "GITEA_KEYSCAN", "PUBLIC", "PRIVATE"]
}]
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go119: {
            Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
        }
    }
}]
Scenarios: [{
    Name:        "go119"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
Steps: {
    goversion: {
        StepType: 1
        Name:     "goversion"
        Order:    0
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go version"
            ExitCode: 0
            Output:   "go version go1.19.1 linux/amd64"
        }]
    }
    public_init: {
        StepType: 1
        Name:     "public_init"
        Order:    1
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir /home/gopher/public"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cd /home/gopher/public"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "go mod init {{{.PUBLIC}}}"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module {{{.PUBLIC}}}

                """
        }, {
            CmdStr:   "git init -q"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git remote add origin https://{{{.PUBLIC}}}.git"
            ExitCode: 0
            Output:   ""
        }]
    }
    public_go_initial: {
        StepType: 2
        Name:     "public_go_initial"
        Order:    2
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package public

            func Message() string {
            \treturn "This is a public safety announcement!"
            }

            """
        Target: "/home/gopher/public/public.go"
    }
    public_initial_commit: {
        StepType: 1
        Name:     "public_initial_commit"
        Order:    3
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git add public.go go.mod"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git commit -q -m 'Initial commit of public module'"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    public_check_initial_porcelain: {
        StepType:        1
        InformationOnly: true
        Name:            "public_check_initial_porcelain"
        Order:           4
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode: 0
            Output:   ""
        }]
    }
    private_init: {
        StepType: 1
        Name:     "private_init"
        Order:    5
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir /home/gopher/private"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cd /home/gopher/private"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "go mod init {{{.PRIVATE}}}"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module {{{.PRIVATE}}}

                """
        }, {
            CmdStr:   "git init -q"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git remote add origin https://{{{.PRIVATE}}}.git"
            ExitCode: 0
            Output:   ""
        }]
    }
    private_go_initial: {
        StepType: 2
        Name:     "private_go_initial"
        Order:    6
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package private

            func Secret() string {
            \treturn "This is a top secret message... for your eyes only"
            }

            """
        Target: "/home/gopher/private/private.go"
    }
    private_initial_commit: {
        StepType: 1
        Name:     "private_initial_commit"
        Order:    7
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git add private.go go.mod"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git commit -q -m 'Initial commit of private module'"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin main"
            ExitCode: 0
            Output: """
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    private_check_initial_porcelain: {
        StepType:        1
        InformationOnly: true
        Name:            "private_check_initial_porcelain"
        Order:           8
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode: 0
            Output:   ""
        }]
    }
    gopher_init: {
        StepType: 1
        Name:     "gopher_init"
        Order:    9
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir /home/gopher/gopher"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cd /home/gopher/gopher"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "go mod init gopher"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module gopher

                """
        }]
    }
    gopher_go_initial: {
        StepType: 2
        Name:     "gopher_go_initial"
        Order:    10
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import (
            \t"fmt"

            \t"{{{.PUBLIC}}}"
            \t"{{{.PRIVATE}}}"
            )

            func main() {
            \tfmt.Printf("public.Message(): %v\\n", public.Message())
            \tfmt.Printf("private.Secret(): %v\\n", private.Secret())
            }

            """
        Target: "/home/gopher/gopher/gopher.go"
    }
    go_env_check_goproxy: {
        StepType: 1
        Name:     "go_env_check_goproxy"
        Order:    11
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go env GOPROXY"
            ExitCode: 0
            Output: """
                https://proxy.golang.org,direct

                """
        }]
    }
    go_env_check_gosumdb: {
        StepType: 1
        Name:     "go_env_check_gosumdb"
        Order:    12
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go env GOSUMDB"
            ExitCode: 0
            Output: """
                sum.golang.org

                """
        }]
    }
    go_env_check: {
        StepType:        1
        InformationOnly: true
        Name:            "go_env_check"
        Order:           13
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "go help env"
            ExitCode: 0
            Output: """
                usage: go env [-json] [-u] [-w] [var ...]

                Env prints Go environment information.

                By default env prints information as a shell script
                (on Windows, a batch file). If one or more variable
                names is given as arguments, env prints the value of
                each named variable on its own line.

                The -json flag prints the environment in JSON format
                instead of as a shell script.

                The -u flag requires one or more arguments and unsets
                the default setting for the named environment variables,
                if one has been set with 'go env -w'.

                The -w flag requires one or more arguments of the
                form NAME=VALUE and changes the default settings
                of the named environment variables to the given values.

                For more about environment variables, see 'go help environment'.

                """
        }]
    }
    goproxy_proxy_only: {
        StepType: 1
        Name:     "goproxy_proxy_only"
        Order:    14
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go env -w GOPROXY=https://proxy.golang.org"
            ExitCode: 0
            Output:   ""
        }]
    }
    gopher_get_public_initial: {
        StepType: 1
        Name:     "gopher_get_public_initial"
        Order:    15
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go get {{{.PUBLIC}}}"
            ExitCode: 0
            Output: """
                go: downloading {{{.PUBLIC}}} v0.0.0-20060102150405-abcedf12345
                go: added {{{.PUBLIC}}} v0.0.0-20060102150405-abcedf12345

                """
        }]
    }
    public_pseudo_version: {
        StepType:        1
        InformationOnly: true
        Name:            "public_pseudo_version"
        Order:           16
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "go list -m -f {{.Version}} {{{.PUBLIC}}}"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            RandomReplace: "v0.0.0-20060102150405-abcedf12345"
        }]
    }
    gopher_get_private_initial: {
        StepType: 1
        Name:     "gopher_get_private_initial"
        Order:    17
        Terminal: "term1"
        Stmts: [{
            Negated:  true
            CmdStr:   "go get {{{.PRIVATE}}}"
            ExitCode: 1
            Output: """
                go: module {{{.PRIVATE}}}: reading https://proxy.golang.org/{{{.PRIVATE}}}/@v/list: 404 Not Found
                \tserver response:
                \tnot found: module {{{.PRIVATE}}}: git ls-remote -q origin in /tmp/gopath/pkg/mod/cache/vcs/8174d40ee07dbff8ba120e684692e03a12d67fd862d96e6453ba3222ebe3367c: exit status 128:
                \t\tfatal: could not read Username for 'https://gopher.live': terminal prompts disabled
                \tConfirm the import path was entered correctly.
                \tIf this is a private repository, see https://golang.org/doc/faq#git_https for additional information.

                """
        }]
    }
    goproxy_proxy_default: {
        StepType: 1
        Name:     "goproxy_proxy_default"
        Order:    18
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go env -w GOPROXY="
            ExitCode: 0
            Output:   ""
        }]
    }
    gopher_get_private_direct: {
        StepType: 1
        Name:     "gopher_get_private_direct"
        Order:    19
        Terminal: "term1"
        Stmts: [{
            Negated:  true
            CmdStr:   "go get {{{.PRIVATE}}}"
            ExitCode: 1
            Output: """
                go: downloading {{{.PRIVATE}}} v0.0.0-20060102150405-abcedf12345
                go: {{{.PRIVATE}}}@v0.0.0-20060102150405-abcedf12345: verifying module: {{{.PRIVATE}}}@v0.0.0-20060102150405-abcedf12345: reading https://sum.golang.org/lookup/{{{.PRIVATE}}}@v0.0.0-20060102150405-abcedf12345: 404 Not Found
                \tserver response:
                \tnot found: {{{.PRIVATE}}}@v0.0.0-20060102150405-abcedf12345: invalid version: git ls-remote -q origin in /tmp/gopath/pkg/mod/cache/vcs/8174d40ee07dbff8ba120e684692e03a12d67fd862d96e6453ba3222ebe3367c: exit status 128:
                \t\tfatal: could not read Username for 'https://gopher.live': terminal prompts disabled
                \tConfirm the import path was entered correctly.
                \tIf this is a private repository, see https://golang.org/doc/faq#git_https for additional information.

                """
        }]
    }
    go_help_modprivate: {
        StepType:        1
        InformationOnly: true
        Name:            "go_help_modprivate"
        Order:           20
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "go help module-auth"
            ExitCode: 0
            Output: """
                When the go command downloads a module zip file or go.mod file into the
                module cache, it computes a cryptographic hash and compares it with a known
                value to verify the file hasn't changed since it was first downloaded. Known
                hashes are stored in a file in the module root directory named go.sum. Hashes
                may also be downloaded from the checksum database depending on the values of
                GOSUMDB, GOPRIVATE, and GONOSUMDB.

                For details, see https://golang.org/ref/mod#authenticating.

                """
        }]
    }
    goprivate_set_private: {
        StepType: 1
        Name:     "goprivate_set_private"
        Order:    21
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go env -w GOPRIVATE={{{.PRIVATE}}}"
            ExitCode: 0
            Output:   ""
        }]
    }
    gopher_get_private_goprivate: {
        StepType: 1
        Name:     "gopher_get_private_goprivate"
        Order:    22
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go get {{{.PRIVATE}}}"
            ExitCode: 0
            Output: """
                go: downloading {{{.PRIVATE}}} v0.0.0-20060102150405-abcedf12345
                go: added {{{.PRIVATE}}} v0.0.0-20060102150405-abcedf12345

                """
        }]
    }
    private_pseudo_version: {
        StepType:        1
        InformationOnly: true
        Name:            "private_pseudo_version"
        Order:           23
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "go list -m -f {{.Version}} {{{.PRIVATE}}}"
            ExitCode: 0
            Output: """
                v0.0.0-20060102150405-abcedf12345

                """
            RandomReplace: "v0.0.0-20060102150405-abcedf12345"
        }]
    }
    gopher_run: {
        StepType: 1
        Name:     "gopher_run"
        Order:    24
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                public.Message(): This is a public safety announcement!
                private.Secret(): This is a top secret message... for your eyes only

                """
        }]
    }
}
Hash: "79d8442564f5e3fd17f6cffc41f9f17969b543884b9d7c743dd9891394cf051a"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Var:     "BRANCH"
            Pattern: "branch"
            Private: false
        }, {
            Var:     "SUBDIR"
            Pattern: "subdir"
            Private: false
        }]
    }
}]
Defs: {
    branch:      "branch"
    branch_vcs:  "https://{{{.BRANCH}}}.git"
    branch_mod:  "{{{.BRANCH}}}"
    branch_dir:  "/home/gopher/branch"
    branch_go:   "branch.go"
    subdir:      "subdir"
    subdir_vcs:  "https://{{{.SUBDIR}}}.git"
    subdir_mod:  "{{{.SUBDIR}}}"
    subdir_dir:  "/home/gopher/subdir"
    subdir_go:   "subdir.go"
    gopher:      "gopher"
    gopher_vcs:  "https://gopher.git"
    gopher_mod:  "gopher"
    gopher_dir:  "/home/gopher/gopher"
    gopher_go:   "gopher.go"
    go_help_env: "go help env"
    pwg: {
        gopher_live: "gopher.live"
    }
    cmdgo: {
        modinit:     "go mod init"
        modedit:     "go mod edit"
        modtidy:     "go mod tidy"
        test:        "go test"
        run:         "go run"
        get:         "go get"
        list:        "go list"
        install:     "go install"
        generate:    "go generate"
        env:         "go env"
        help:        "go help"
        build:       "go build"
        version:     "go version"
        vlatest:     "latest"
        GO111MODULE: "GO111MODULE"
        GOPROXY:     "GOPROXY"
        GOPATH:      "GOPATH"
        GOBIN:       "GOBIN"
        GOENV:       "GOENV"
        GONOPROXY:   "GONOPROXY"
        GOSUMDB:     "GOSUMDB"
        GONOSUMDB:   "GONOSUMDB"
        GOPRIVATE:   "GOPRIVATE"
    }
    git: {
        add:      "git add"
        remote:   "git remote"
        init:     "git init -q"
        commit:   "git commit -q"
        push:     "git push -q"
        tag:      "git tag"
        revparse: "git rev-parse"
        branch:   "git branch"
        checkout: "git checkout"
    }
    go_help_modsubdir: "go help module-subdir"
    proxygolangorg: {
        waitforcache: "1m"
    }
}
Scenarios: {
    go119: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }
}
Steps: {
    goversion: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd: "go version"
            Sanitisers: [{
                Pattern:     "linux\\/.+(?:\\n$)"
                Replacement: "linux/amd64"
            }]
        }]
        Terminal: string
    }
    branch_init: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir /home/gopher/branch
            cd /home/gopher/branch
            go mod init {{{.BRANCH}}}
            git init -q
            git remote add origin https://{{{.BRANCH}}}.git
            """
        Terminal: string
    }
    branch_go_initial: {
        Name:     string
        StepType: 3
        Source: """
            // /home/gopher/branch/branch.go

            package branch

            const Message = "branch v1"

            """
        Target:   "/home/gopher/branch/branch.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    branch_initial_commit: {
        Name:     string
        StepType: 1
        Stmts: """
            git add branch.go go.mod
            git commit -q -m 'Initial commit of branch module'
            git tag v1.0.0
            git push -q origin main v1.0.0
            """
        Terminal: string
    }
    branch_check_initial_porcelain: {
        Name:            string
        StepType:        1
        Stmts:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    branch_create_v1_branch: {
        Name:     string
        StepType: 1
        Stmts: """
            git branch main.v1
            git push -q origin main.v1
            """
        Terminal: string
    }
    branch_go_mod_v2: {
        Name:     string
        StepType: 3
        Source: """
            // /home/gopher/branch/go.mod

            module {{{.BRANCH}}}/v2

            go 1.15

            """
        Target:   "/home/gopher/branch/go.mod"
        Language: "go.mod"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    branch_go_v2: {
        Name:     string
        StepType: 3
        Source: """
            // /home/gopher/branch/branch.go

            package branch

            const Message = "branch v2"

            """
        Target:   "/home/gopher/branch/branch.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    branch_v2_commit: {
        Name:     string
        StepType: 1
        Stmts: """
            git add branch.go go.mod
            git commit -q -m 'v2 commit of branch module'
            git tag v2.0.0
            git push -q origin main v2.0.0
            """
        Terminal: string
    }
    branch_check_v2_porcelain: {
        Name:            string
        StepType:        1
        Stmts:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    subdir_init: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir /home/gopher/subdir
            cd /home/gopher/subdir
            go mod init {{{.SUBDIR}}}
            git init -q
            git remote add origin https://{{{.SUBDIR}}}.git
            """
        Terminal: string
    }
    subdir_go_initial: {
        Name:     string
        StepType: 3
        Source: """
            // /home/gopher/subdir/subdir.go

            package subdir

            const Message = "subdir v1"

            """
        Target:   "/home/gopher/subdir/subdir.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    subdir_initial_commit: {
        Name:     string
        StepType: 1
        Stmts: """
            git add subdir.go go.mod
            git commit -q -m 'Initial commit of subdir module'
            git tag v1.0.0
            git push -q origin main v1.0.0
            """
        Terminal: string
    }
    subdir_check_initial_porcelain: {
        Name:            string
        StepType:        1
        Stmts:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    subdir_create_v2_subdir: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir v2
            cp go.mod subdir.go v2
            """
        Terminal: string
    }
    subdir_go_mod_v2: {
        Name:     string
        StepType: 3
        Source: """
            // /home/gopher/subdir/v2/go.mod

            module {{{.SUBDIR}}}/v2

            go 1.15

            """
        Target:   "/home/gopher/subdir/v2/go.mod"
        Language: "go.mod"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    subdir_go_v2: {
        Name:     string
        StepType: 3
        Source: """
            // /home/gopher/subdir/v2/subdir.go

            package subdir

            const Message = "subdir v2"

            """
        Target:   "/home/gopher/subdir/v2/subdir.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    subdir_v2_commit: {
        Name:     string
        StepType: 1
        Stmts: """
            git add v2
            git commit -q -m 'v2 commit of subdir module'
            git tag v2.0.0
            git push -q origin main v2.0.0
            """
        Terminal: string
    }
    subdir_check_v2_porcelain: {
        Name:            string
        StepType:        1
        Stmts:           "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
        InformationOnly: true
        Terminal:        string
    }
    gopher_init: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir /home/gopher/gopher
            cd /home/gopher/gopher
            go mod init gopher
            """
        Terminal: string
    }
    gopher_go_initial: {
        Name:     string
        StepType: 3
        Source: """
            // /home/gopher/gopher/gopher.go

            package main

            import (
            \t"fmt"

            \tbranch "{{{.BRANCH}}}"
            \tbranch_v2 "{{{.BRANCH}}}/v2"
            \tsubdir "{{{.SUBDIR}}}"
            \tsubdir_v2 "{{{.SUBDIR}}}/v2"
            )

            func main() {
            \tfmt.Printf("branch.Message: %v\\n", branch.Message)
            \tfmt.Printf("branch/v2.Message: %v\\n", branch_v2.Message)
            \tfmt.Printf("subdir.Message: %v\\n", subdir.Message)
            \tfmt.Printf("subdir/v2.Message: %v\\n", subdir_v2.Message)
            }

            """
        Target:   "/home/gopher/gopher/gopher.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    gopher_get_deps: {
        Name:     string
        StepType: 1
        Stmts: """
            go get {{{.BRANCH}}}@v1.0.0
            go get {{{.BRANCH}}}/v2@v2.0.0
            go get {{{.SUBDIR}}}@v1.0.0
            go get {{{.SUBDIR}}}/v2@v2.0.0
            """
        Terminal: string
    }
    gopher_run: {
        Name:     string
        StepType: 1
        Stmts:    "go run ."
        Terminal: string
    }
}
// ---
Presteps: [{
    Package: "github.com/play-with-go/gitea"
    Path:    "/newuser"
    Args: {
        Repos: [{
            Pattern: "branch"
            Private: false
            Var:     "BRANCH"
        }, {
            Pattern: "subdir"
            Private: false
            Var:     "SUBDIR"
        }]
    }
    Version: """
        {
          "GoVersion": "go1.19.1",
          "Path": "github.com/play-with-go/gitea/cmd/gitea",
          "Main": {
            "Path": "github.com/play-with-go/gitea",
            "Version": "v0.0.0-20221003164140-c14d636df530",
            "Sum": "h1:RDNvyzwtVgtV0xOEaQL+CziEPkar/gNPyQUaWdnYjGk=",
            "Replace": null
          },
          "Deps": [
            {
              "Path": "code.gitea.io/sdk/gitea",
              "Version": "v0.15.1",
              "Sum": "h1:WJreC7YYuxbn0UDaPuWIe/mtiNKTvLN8MLkaw71yx/M=",
              "Replace": null
            },
            {
              "Path": "cuelang.org/go",
              "Version": "v0.4.3",
              "Sum": "h1:W3oBBjDTm7+IZfCKZAmC8uDG0eYfJL4Pp/xbbCMKaVo=",
              "Replace": null
            },
            {
              "Path": "github.com/cockroachdb/apd/v2",
              "Version": "v2.0.1",
              "Sum": "h1:y1Rh3tEU89D+7Tgbw+lp52T6p/GJLpDmNvr10UWqLTE=",
              "Replace": null
            },
            {
              "Path": "github.com/emicklei/proto",
              "Version": "v1.6.15",
              "Sum": "h1:XbpwxmuOPrdES97FrSfpyy67SSCV/wBIKXqgJzh6hNw=",
              "Replace": null
            },
            {
              "Path": "github.com/golang/glog",
              "Version": "v0.0.0-20160126235308-23def4e6c14b",
              "Sum": "h1:VKtxabqXZkF25pY9ekfRL6a582T4P37/31XEstQ5p58=",
              "Replace": null
            },
            {
              "Path": "github.com/google/uuid",
              "Version": "v1.2.0",
              "Sum": "h1:qJYtXnJRWmpe7m/3XlyhrsLrEURqHRM2kxzoxXqyUDs=",
              "Replace": null
            },
            {
              "Path": "github.com/hashicorp/go-version",
              "Version": "v1.2.1",
              "Sum": "h1:zEfKbn2+PDgroKdiOzqiE8rsmLqU2uwi5PB5pBJ3TkI=",
              "Replace": null
            },
            {
              "Path": "github.com/mpvl/unique",
              "Version": "v0.0.0-20150818121801-cbe035fff7de",
              "Sum": "h1:D5x39vF5KCwKQaw+OC9ZPiLVHXz3UFw2+psEX+gYcto=",
              "Replace": null
            },
            {
              "Path": "github.com/pkg/errors",
              "Version": "v0.9.1",
              "Sum": "h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=",
              "Replace": null
            },
            {
              "Path": "github.com/play-with-go/preguide",
              "Version": "v0.0.2-0.20221003193111-f84a6637f25f",
              "Sum": "h1:ijMtjVmmzO13W4+wfOng8tkYFBJN+VRuw/znwVm7x68=",
              "Replace": null
            },
            {
              "Path": "github.com/protocolbuffers/txtpbfmt",
              "Version": "v0.0.0-20201118171849-f6a6b3f636fc",
              "Sum": "h1:gSVONBi2HWMFXCa9jFdYvYk7IwW/mTLxWOF7rXS4LO0=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/crypto",
              "Version": "v0.0.0-20210921155107-089bfa567519",
              "Sum": "h1:7I4JAnoQBe7ZtJcBaYHi5UtiO8tQHbUSXxL+pnGRANg=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/net",
              "Version": "v0.0.0-20211015210444-4f30a5c0130f",
              "Sum": "h1:OfiFi4JbukWwe3lzw+xunroH1mnC1e2Gy5cxNJApiSY=",
              "Replace": null
            },
            {
              "Path": "golang.org/x/text",
              "Version": "v0.3.7",
              "Sum": "h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/retry.v1",
              "Version": "v1.0.3",
              "Sum": "h1:a9CArYczAVv6Qs6VGoLMio99GEs7kY9UzSF9+LD+iGs=",
              "Replace": null
            },
            {
              "Path": "gopkg.in/yaml.v3",
              "Version": "v3.0.0-20210107192922-496545a6307b",
              "Sum": "h1:h8qDotaEPuJATrMmW04NCwg7v22aHH28wwpauUhK9Oo=",
              "Replace": null
            }
          ],
          "Settings": null
        }
        """
    Variables: ["GITEA_USERNAME", "GITEA_PRIV_KEY", "GITEA_PUB_KEY", "GITEA_KEYSCAN", "BRANCH", "SUBDIR"]
}]
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go119: {
            Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
        }
    }
}]
Scenarios: [{
    Name:        "go119"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
Steps: {
    goversion: {
        StepType: 1
        Name:     "goversion"
        Order:    0
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go version"
            ExitCode: 0
            Output:   "go version go1.19.1 linux/amd64"
        }]
    }
    branch_init: {
        StepType: 1
        Name:     "branch_init"
        Order:    1
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir /home/gopher/branch"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cd /home/gopher/branch"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "go mod init {{{.BRANCH}}}"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module {{{.BRANCH}}}

                """
        }, {
            CmdStr:   "git init -q"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git remote add origin https://{{{.BRANCH}}}.git"
            ExitCode: 0
            Output:   ""
        }]
    }
    branch_go_initial: {
        StepType: 2
        Name:     "branch_go_initial"
        Order:    2
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // /home/gopher/branch/branch.go

            package branch

            const Message = "branch v1"

            """
        Target: "/home/gopher/branch/branch.go"
    }
    branch_initial_commit: {
        StepType: 1
        Name:     "branch_initial_commit"
        Order:    3
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git add branch.go go.mod"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git commit -q -m 'Initial commit of branch module'"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git tag v1.0.0"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin main v1.0.0"
            ExitCode: 0
            Output: """
                remote: .. Processing 2 references        
                remote: Processed 2 references in total        

                """
        }]
    }
    branch_check_initial_porcelain: {
        StepType:        1
        InformationOnly: true
        Name:            "branch_check_initial_porcelain"
        Order:           4
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode: 0
            Output:   ""
        }]
    }
    branch_create_v1_branch: {
        StepType: 1
        Name:     "branch_create_v1_branch"
        Order:    5
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git branch main.v1"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin main.v1"
            ExitCode: 0
            Output: """
                remote: 
                remote: Create a new pull request for 'main.v1':        
                remote:   https://{{{.BRANCH}}}/compare/main...main.v1        
                remote: 
                remote: . Processing 1 references        
                remote: Processed 1 references in total        

                """
        }]
    }
    branch_go_mod_v2: {
        StepType: 2
        Name:     "branch_go_mod_v2"
        Order:    6
        Terminal: "term1"
        Language: "go.mod"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // /home/gopher/branch/go.mod

            module {{{.BRANCH}}}/v2

            go 1.15

            """
        Target: "/home/gopher/branch/go.mod"
    }
    branch_go_v2: {
        StepType: 2
        Name:     "branch_go_v2"
        Order:    7
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // /home/gopher/branch/branch.go

            package branch

            const Message = "branch v2"

            """
        Target: "/home/gopher/branch/branch.go"
    }
    branch_v2_commit: {
        StepType: 1
        Name:     "branch_v2_commit"
        Order:    8
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git add branch.go go.mod"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git commit -q -m 'v2 commit of branch module'"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git tag v2.0.0"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin main v2.0.0"
            ExitCode: 0
            Output: """
                remote: .. Processing 2 references        
                remote: Processed 2 references in total        

                """
        }]
    }
    branch_check_v2_porcelain: {
        StepType:        1
        InformationOnly: true
        Name:            "branch_check_v2_porcelain"
        Order:           9
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode: 0
            Output:   ""
        }]
    }
    subdir_init: {
        StepType: 1
        Name:     "subdir_init"
        Order:    10
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir /home/gopher/subdir"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cd /home/gopher/subdir"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "go mod init {{{.SUBDIR}}}"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module {{{.SUBDIR}}}

                """
        }, {
            CmdStr:   "git init -q"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git remote add origin https://{{{.SUBDIR}}}.git"
            ExitCode: 0
            Output:   ""
        }]
    }
    subdir_go_initial: {
        StepType: 2
        Name:     "subdir_go_initial"
        Order:    11
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // /home/gopher/subdir/subdir.go

            package subdir

            const Message = "subdir v1"

            """
        Target: "/home/gopher/subdir/subdir.go"
    }
    subdir_initial_commit: {
        StepType: 1
        Name:     "subdir_initial_commit"
        Order:    12
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git add subdir.go go.mod"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git commit -q -m 'Initial commit of subdir module'"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git tag v1.0.0"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin main v1.0.0"
            ExitCode: 0
            Output: """
                remote: .. Processing 2 references        
                remote: Processed 2 references in total        

                """
        }]
    }
    subdir_check_initial_porcelain: {
        StepType:        1
        InformationOnly: true
        Name:            "subdir_check_initial_porcelain"
        Order:           13
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode: 0
            Output:   ""
        }]
    }
    subdir_create_v2_subdir: {
        StepType: 1
        Name:     "subdir_create_v2_subdir"
        Order:    14
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir v2"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cp go.mod subdir.go v2"
            ExitCode: 0
            Output:   ""
        }]
    }
    subdir_go_mod_v2: {
        StepType: 2
        Name:     "subdir_go_mod_v2"
        Order:    15
        Terminal: "term1"
        Language: "go.mod"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // /home/gopher/subdir/v2/go.mod

            module {{{.SUBDIR}}}/v2

            go 1.15

            """
        Target: "/home/gopher/subdir/v2/go.mod"
    }
    subdir_go_v2: {
        StepType: 2
        Name:     "subdir_go_v2"
        Order:    16
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // /home/gopher/subdir/v2/subdir.go

            package subdir

            const Message = "subdir v2"

            """
        Target: "/home/gopher/subdir/v2/subdir.go"
    }
    subdir_v2_commit: {
        StepType: 1
        Name:     "subdir_v2_commit"
        Order:    17
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "git add v2"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git commit -q -m 'v2 commit of subdir module'"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git tag v2.0.0"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "git push -q origin main v2.0.0"
            ExitCode: 0
            Output: """
                remote: .. Processing 2 references        
                remote: Processed 2 references in total        

                """
        }]
    }
    subdir_check_v2_porcelain: {
        StepType:        1
        InformationOnly: true
        Name:            "subdir_check_v2_porcelain"
        Order:           18
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "[ \"$(git status --porcelain)\" == \"\" ] || (git status && false)"
            ExitCode: 0
            Output:   ""
        }]
    }
    gopher_init: {
        StepType: 1
        Name:     "gopher_init"
        Order:    19
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir /home/gopher/gopher"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cd /home/gopher/gopher"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "go mod init gopher"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module gopher

                """
        }]
    }
    gopher_go_initial: {
        StepType: 2
        Name:     "gopher_go_initial"
        Order:    20
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            // /home/gopher/gopher/gopher.go

            package main

            import (
            \t"fmt"

            \tbranch "{{{.BRANCH}}}"
            \tbranch_v2 "{{{.BRANCH}}}/v2"
            \tsubdir "{{{.SUBDIR}}}"
            \tsubdir_v2 "{{{.SUBDIR}}}/v2"
            )

            func main() {
            \tfmt.Printf("branch.Message: %v\\n", branch.Message)
            \tfmt.Printf("branch/v2.Message: %v\\n", branch_v2.Message)
            \tfmt.Printf("subdir.Message: %v\\n", subdir.Message)
            \tfmt.Printf("subdir/v2.Message: %v\\n", subdir_v2.Message)
            }

            """
        Target: "/home/gopher/gopher/gopher.go"
    }
    gopher_get_deps: {
        StepType: 1
        Name:     "gopher_get_deps"
        Order:    21
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go get {{{.BRANCH}}}@v1.0.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.BRANCH}}} v1.0.0
                go: added {{{.BRANCH}}} v1.0.0

                """
        }, {
            CmdStr:   "go get {{{.BRANCH}}}/v2@v2.0.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.BRANCH}}}/v2 v2.0.0
                go: added {{{.BRANCH}}}/v2 v2.0.0

                """
        }, {
            CmdStr:   "go get {{{.SUBDIR}}}@v1.0.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.SUBDIR}}} v1.0.0
                go: added {{{.SUBDIR}}} v1.0.0

                """
        }, {
            CmdStr:   "go get {{{.SUBDIR}}}/v2@v2.0.0"
            ExitCode: 0
            Output: """
                go: downloading {{{.SUBDIR}}}/v2 v2.0.0
                go: added {{{.SUBDIR}}}/v2 v2.0.0

                """
        }]
    }
    gopher_run: {
        StepType: 1
        Name:     "gopher_run"
        Order:    22
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                branch.Message: branch v1
                branch/v2.Message: branch v2
                subdir.Message: subdir v1
                subdir/v2.Message: subdir v2

                """
        }]
    }
}
Hash: "3f05fa31786a39bbda64558b6fdd6069144925c39f6994d2839481793b328ac7"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Defs: {
    script:     "script.sh"
    scriptpath: "/home/gopher/script.sh"
}
Steps: {
    create_script: {
        Name:     string
        StepType: 3
        Source: """
            echo "Hello, world!"

            """
        Target:   "/home/gopher/script.sh"
        Language: "sh"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    run_script: {
        Name:     string
        StepType: 1
        Stmts:    "bash /home/gopher/script.sh"
        Terminal: string
    }
}
Scenarios: {
    go119: {
        Name:        string
        Description: "Go 1.15"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }
}
// ---
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go119: {
            Image: "playwithgo/go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
        }
    }
}]
Scenarios: [{
    Name:        "go119"
    Description: "Go 1.15"
}]
Networks: ["playwithgo_pwg"]
Env: []
Steps: {
    create_script: {
        StepType: 2
        Name:     "create_script"
        Order:    0
        Terminal: "term1"
        Language: "sh"
        Renderer: {
            RendererType: 1
        }
        Source: """
            echo "Hello, world!"

            """
        Target: "/home/gopher/script.sh"
    }
    run_script: {
        StepType: 1
        Name:     "run_script"
        Order:    1
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "bash /home/gopher/script.sh"
            ExitCode: 0
            Output: """
                Hello, world!

                """
        }]
    }
}
Hash: "608f7aeee182a2f487f8bd308e9f91e4508a7706aaa422413d1cc764c61b79df"
Delims: ["{{{", "}}}"]
// ---
Networks: ["playwithgo_pwg"]
Delims: ["{{{", "}}}"]
Defs: {
    demodir: "/home/gopher/demo"
}
Scenarios: {
    go119: {
        Name:        string
        Description: "cue v0.4.3 Go 1.19"
    }
}
Terminals: {
    term1: {
        Name:        string
        Description: "The main terminal"
        Scenarios: {
            go119: {
                Image: "playwithgo/cue_v0.4.3_go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
            }
        }
    }
}
Steps: {
    cachesetup: {
        Name:     string
        StepType: 1
        Stmts: """
            sudo mkdir -p /var/gocache /var/gomodcache
            sudo chown gopher:gopher /var/gocache /var/gomodcache
            """
        InformationOnly: true
        Terminal:        string
    }
    versions: {
        Name:     string
        StepType: 1
        Stmts: [{
            Cmd: "go version"
            Sanitisers: [{
                Pattern:     "linux\\/.+(?:\\n$)"
                Replacement: "linux/amd64"
            }]
        }, {
            Cmd: "cue version"
            Sanitisers: [{
                Pattern:     "(?m)^\\s+GOAMD64.*\\n"
                Replacement: ""
            }, {
                Pattern:     "^(\\s*GOARCH ).*"
                LineWise:    true
                Replacement: "${1}amd64"
            }]
        }]
        Terminal: string
    }
    startexample: {
        Name:     string
        StepType: 1
        Stmts: """
            mkdir demo
            cd demo
            go mod init example.com/demo
            """
        Terminal: string
    }
    create_gomod: {
        Name:     string
        StepType: 3
        Source: """
            module example.com/demo

            go 1.19

            require (
            \t\t  github.com/kr/pretty v0.3.0
            )

            """
        Target:   "/home/gopher/demo/go.mod"
        Language: "mod"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    create_initialmain: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t"encoding/json"
            \t"fmt"
            \t"log"
            \t"os"
            \t"path/filepath"
            )

            type Config struct {
            \tPrograms map[string]Program `json:"programs"`
            }

            type Program struct {
            \tPath         string   `json:"path"`
            \tArgs         []string `json:"args"`
            \tDescription  string   `json:"description"`
            \tRetries      int      `json:"retries"`
            \tIgnoreErrors bool     `json:"ignoreErrors"`
            \tDirectory    string   `json:"directory"`
            }

            func main() {
            \t// Use a fake "$HOME" for the purposes of this demo
            \tcfpath := filepath.Join("home", ".config", "demo", "config.json")

            \tcf, err := os.ReadFile(cfpath)
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}

            \tvar conf Config
            \tif err := json.Unmarshal(cf, &conf); err != nil {
            \t\tlog.Fatal(err)
            \t}

            \tout, err := json.MarshalIndent(conf, "", "  ")
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}
            \tfmt.Printf("%s\\n", out)
            }

            """
        Target:   "/home/gopher/demo/main.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    initialgomodtidy: {
        Name:     string
        StepType: 1
        Stmts:    "go mod tidy"
        Terminal: string
    }
    create_config_dir: {
        Name:     string
        StepType: 1
        Stmts:    "mkdir -p /home/gopher/demo/home/.config/demo"
        Terminal: string
    }
    initial_config_file: {
        Name:     string
        StepType: 3
        Source: """
            {
            \t "programs": {
            \t\t  "service1": {
            \t\t\t\t"path": "/path/to/service1",
            \t\t\t\t"description": "service1 is a special service\\nfor special things",
            \t\t\t\t"args": [
            \t\t\t\t\t "hello",
            \t\t\t\t\t "world"
            \t\t\t\t],
            \t\t\t\t"directory": "/tmp",
            \t\t\t\t"ignoreErrors": true
            \t\t  },
            \t\t  "service2": {
            \t\t\t\t"path": "/path/to/service2",
            \t\t\t\t"description": "service2 is a special service\\nfor special things",
            \t\t\t\t"args": [
            \t\t\t\t\t "hello",
            \t\t\t\t\t "world"
            \t\t\t\t],
            \t\t\t\t"directory": "/home/cueckoo"
            \t\t  },
            \t\t  "service3": {
            \t\t\t\t"path": "/path/to/service3",
            \t\t\t\t"description": "service3 is a special service\\nfor special things",
            \t\t\t\t"directory": "/home/cueckoo"
            \t\t  }
            \t }
            }
            """
        Target:   "/home/gopher/demo/home/.config/demo/config.json"
        Language: "json"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    run_v_json: {
        Name:     string
        StepType: 1
        Stmts: """
            cat go.mod
            go run .
            """
        Terminal: string
    }
    import_json_cue: {
        Name:     string
        StepType: 1
        Stmts:    "cue import ./home/.config/demo/config.json"
        Terminal: string
    }
    inspect_initial_cue: {
        Name:     string
        StepType: 1
        Stmts:    "cat ./home/.config/demo/config.cue"
        Terminal: string
    }
    export_json: {
        Name:     string
        StepType: 1
        Stmts:    "cue export ./home/.config/demo/config.cue"
        Terminal: string
    }
    export_json_diff: {
        Name:     string
        StepType: 1
        Stmts: """
            mv ./home/.config/demo/config.json ./home/.config/demo/config.json.copy
            cue export -o ./home/.config/demo/config.json ./home/.config/demo/config.cue
            diff -wu ./home/.config/demo/config.json ./home/.config/demo/config.json.copy
            """
        Terminal: string
    }
    initial_main_cueconfig: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t"encoding/json"
            \t"fmt"
            \t"log"
            \t"path/filepath"

            \t"github.com/cue-exp/cueconfig"
            )

            type Config struct {
            \tPrograms map[string]Program `json:"programs"`
            }

            type Program struct {
            \tPath         string   `json:"path"`
            \tArgs         []string `json:"args"`
            \tDescription  string   `json:"description"`
            \tRetries      int      `json:"retries"`
            \tIgnoreErrors bool     `json:"ignoreErrors"`
            \tDirectory    string   `json:"directory"`
            }

            func main() {
            \t// Use a fake "$HOME" for the purposes of this demo
            \tcfpath := filepath.Join("home", ".config", "demo", "config.cue")

            \tvar conf Config
            \tif err := cueconfig.Load(cfpath, nil, nil, nil, &conf); err != nil {
            \t\tlog.Fatal(err)
            \t}

            \tout, err := json.MarshalIndent(conf, "", "  ")
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}
            \tfmt.Printf("%s\\n", out)
            }

            """
        Target:   "/home/gopher/demo/main.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    get_cueconfig_and_tidy: {
        Name:     string
        StepType: 1
        Stmts: """
            go get github.com/cue-exp/cueconfig@v0.0.1
            go mod tidy
            """
        Terminal: string
    }
    run_initial_cueconfig: {
        Name:     string
        StepType: 1
        Stmts:    "go run ."
        Terminal: string
    }
    create_initial_schema: {
        Name:     string
        StepType: 3
        Source: """
            package main

            programs: [string]: #Program

            #Program: {
            \tpath: string
            \targs?: [...string]
            \tdescription:   string
            \tretries?:      int
            \tignoreErrors?: bool
            \tdirectory?:    string
            }

            """
        Target:   "/home/gopher/demo/schema.cue"
        Language: "cue"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    update_main_schema: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t_ "embed"
            \t"encoding/json"
            \t"fmt"
            \t"log"
            \t"path/filepath"

            \t"github.com/cue-exp/cueconfig"
            )

            type Config struct {
            \tPrograms map[string]Program `json:"programs"`
            }

            type Program struct {
            \tPath         string   `json:"path"`
            \tArgs         []string `json:"args"`
            \tDescription  string   `json:"description"`
            \tRetries      int      `json:"retries"`
            \tIgnoreErrors bool     `json:"ignoreErrors"`
            \tDirectory    string   `json:"directory"`
            }

            var (
            \t//go:embed schema.cue
            \tschema []byte
            )

            func main() {
            \t// Use a fake "$HOME" for the purposes of this demo
            \tcfpath := filepath.Join("home", ".config", "demo", "config.cue")

            \tvar conf Config
            \tif err := cueconfig.Load(cfpath, schema, nil, nil, &conf); err != nil {
            \t\tlog.Fatal(err)
            \t}

            \tout, err := json.MarshalIndent(conf, "", "  ")
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}
            \tfmt.Printf("%s\\n", out)
            }

            """
        Target:   "/home/gopher/demo/main.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    run_initial_schema: {
        Name:     string
        StepType: 1
        Stmts:    "go run ."
        Terminal: string
    }
    break_config_additional_field: {
        Name:     string
        StepType: 3
        Source: #"""
            programs: {
            \#tservice1: {
            \#t\#tpath: "/path/to/service1"
            \#t\#tdescription: """
            \#t\#t\#tservice1 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#targs: [
            \#t\#t\#t"hello",
            \#t\#t\#t"world",
            \#t\#t]
            \#t\#tdirectory:    "/tmp"
            \#t\#tignoreErrors: true
            \#t\#tblah:         "something"
            \#t}
            \#tservice2: {
            \#t\#tpath: "/path/to/service2"
            \#t\#tdescription: """
            \#t\#t\#tservice2 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#targs: [
            \#t\#t\#t"hello",
            \#t\#t\#t"world",
            \#t\#t]
            \#t\#tdirectory: "/home/cueckoo"
            \#t}
            \#tservice3: {
            \#t\#tpath: "/path/to/service3"
            \#t\#tdescription: """
            \#t\#t\#tservice3 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#tdirectory: "/home/cueckoo"
            \#t}
            }

            """#
        Target:   "/home/gopher/demo/home/.config/demo/config.cue"
        Language: "cue"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    run_broken_config_additional_field: {
        Name:     string
        StepType: 1
        Stmts:    "! go run ."
        Terminal: string
    }
    restore_config_working: {
        Name:     string
        StepType: 3
        Source: #"""
            programs: {
            \#tservice1: {
            \#t\#tpath: "/path/to/service1"
            \#t\#tdescription: """
            \#t\#t\#tservice1 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#targs: [
            \#t\#t\#t"hello",
            \#t\#t\#t"world",
            \#t\#t]
            \#t\#tdirectory:    "/tmp"
            \#t\#tignoreErrors: true
            \#t}
            \#tservice2: {
            \#t\#tpath: "/path/to/service2"
            \#t\#tdescription: """
            \#t\#t\#tservice2 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#targs: [
            \#t\#t\#t"hello",
            \#t\#t\#t"world",
            \#t\#t]
            \#t\#tdirectory: "/home/cueckoo"
            \#t}
            \#tservice3: {
            \#t\#tpath: "/path/to/service3"
            \#t\#tdescription: """
            \#t\#t\#tservice3 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#tdirectory: "/home/cueckoo"
            \#t}
            }

            """#
        Target:   "/home/gopher/demo/home/.config/demo/config.cue"
        Language: "cue"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    run_check_config_working: {
        Name:     string
        StepType: 1
        Stmts:    "go run ."
        Terminal: string
    }
    modify_config_dry: {
        Name:     string
        StepType: 3
        Source: #"""
            import "strings"

            programs: [_name=string]: {
            \#tdirectory:   *"/home/cueckoo" | _
            \#tpath:        *"/path/to/\#\(_name)" | _
            \#tdescription: strings.HasPrefix(_name)
            }

            programs: {
            \#tservice1: {
            \#t\#tdescription: """
            \#t\#t\#tservice1 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#targs: [
            \#t\#t\#t"hello",
            \#t\#t\#t"world",
            \#t\#t]
            \#t\#tdirectory:    "/tmp"
            \#t\#tignoreErrors: true
            \#t}
            \#tservice2: {
            \#t\#tdescription: """
            \#t\#t\#tservice2 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#targs: service1.args,
            \#t}
            \#tservice3: {
            \#t\#tdescription: """
            \#t\#t\#tservice3 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t}
            }

            """#
        Target:   "/home/gopher/demo/home/.config/demo/config.cue"
        Language: "cue"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    run_check_config_dry: {
        Name:     string
        StepType: 1
        Stmts:    "go run ."
        Terminal: string
    }
    create_initial_defaults: {
        Name:     string
        StepType: 3
        Source: """
            package main

            programs: [string]: retries: *3 | _

            """
        Target:   "/home/gopher/demo/defaults.cue"
        Language: "cue"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    update_main_defaults: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t_ "embed"
            \t"encoding/json"
            \t"fmt"
            \t"log"
            \t"path/filepath"

            \t"github.com/cue-exp/cueconfig"
            )

            type Config struct {
            \tPrograms map[string]Program `json:"programs"`
            }

            type Program struct {
            \tPath         string   `json:"path"`
            \tArgs         []string `json:"args"`
            \tDescription  string   `json:"description"`
            \tRetries      int      `json:"retries"`
            \tIgnoreErrors bool     `json:"ignoreErrors"`
            \tDirectory    string   `json:"directory"`
            }

            var (
            \t//go:embed schema.cue
            \tschema []byte

            \t//go:embed defaults.cue
            \tdefaults []byte
            )

            func main() {
            \t// Use a fake "$HOME" for the purposes of this demo
            \tcfpath := filepath.Join("home", ".config", "demo", "config.cue")

            \tvar conf Config
            \tif err := cueconfig.Load(cfpath, schema, defaults, nil, &conf); err != nil {
            \t\tlog.Fatal(err)
            \t}

            \tout, err := json.MarshalIndent(conf, "", "  ")
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}
            \tfmt.Printf("%s\\n", out)
            }

            """
        Target:   "/home/gopher/demo/main.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    run_check_defaults: {
        Name:     string
        StepType: 1
        Stmts:    "go run ."
        Terminal: string
    }
    update_main_runtime: {
        Name:     string
        StepType: 3
        Source: """
            package main

            import (
            \t_ "embed"
            \t"encoding/json"
            \t"fmt"
            \t"log"
            \t"path/filepath"

            \t"github.com/cue-exp/cueconfig"
            )

            type Config struct {
            \tPrograms map[string]Program `json:"programs"`
            }

            type Program struct {
            \tPath         string   `json:"path"`
            \tArgs         []string `json:"args"`
            \tDescription  string   `json:"description"`
            \tRetries      int      `json:"retries"`
            \tIgnoreErrors bool     `json:"ignoreErrors"`
            \tDirectory    string   `json:"directory"`
            }

            var (
            \t//go:embed schema.cue
            \tschema []byte

            \t//go:embed defaults.cue
            \tdefaults []byte
            )

            func main() {
            \t// Use a fake "$HOME" for the purposes of this demo
            \tcfpath := filepath.Join("home", ".config", "demo", "config.cue")

            \tr := map[string]any{
            \t\t"runtime": map[string]any{
            \t\t\t"workingDirectory": "/runtime/blah",
            \t\t},
            \t}

            \tvar conf Config
            \tif err := cueconfig.Load(cfpath, schema, defaults, r, &conf); err != nil {
            \t\tlog.Fatal(err)
            \t}

            \tout, err := json.MarshalIndent(conf, "", "  ")
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}
            \tfmt.Printf("%s\\n", out)
            }

            """
        Target:   "/home/gopher/demo/main.go"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    update_schema_runtime: {
        Name:     string
        StepType: 3
        Source: """
            package main

            programs: [string]: #Program

            #Program: {
            \tpath: string
            \targs?: [...string]
            \tdescription:   string
            \tretries?:      int
            \tignoreErrors?: bool
            \tdirectory?:    string
            }

            runtime: #Runtime

            #Runtime: {
            \tworkingDirectory?: string
            }

            """
        Target:   "/home/gopher/demo/schema.cue"
        Language: "cue"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    update_config_runtime: {
        Name:     string
        StepType: 3
        Source: #"""
            import "strings"

            runtime: _

            programs: [_name=string]: {
            \#tdirectory:   *runtime.workingDirectory | _
            \#tpath:        *"/path/to/\#\(_name)" | _
            \#tdescription: strings.HasPrefix(_name)
            }

            programs: {
            \#tservice1: {
            \#t\#tdescription: """
            \#t\#t\#tservice1 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#targs: [
            \#t\#t\#t"hello",
            \#t\#t\#t"world",
            \#t\#t]
            \#t\#tdirectory:    "/tmp"
            \#t\#tignoreErrors: true
            \#t}
            \#tservice2: {
            \#t\#tdescription: """
            \#t\#t\#tservice2 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#targs: service1.args,
            \#t}
            \#tservice3: {
            \#t\#tdescription: """
            \#t\#t\#tservice3 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t}
            }

            """#
        Target:   "/home/gopher/demo/home/.config/demo/config.cue"
        Language: "cue"
        Renderer: {
            RendererType: 1
        }
        Terminal: string
    }
    run_check_runtime: {
        Name:     string
        StepType: 1
        Stmts:    "go run ."
        Terminal: string
    }
}
// ---
Terminals: [{
    Name:        "term1"
    Description: "The main terminal"
    Scenarios: {
        go119: {
            Image: "playwithgo/cue_v0.4.3_go1.19.1:6d8215b3a5eda6d3bcf338c58a26194abe18b4cd"
        }
    }
}]
Scenarios: [{
    Name:        "go119"
    Description: "cue v0.4.3 Go 1.19"
}]
Networks: ["playwithgo_pwg"]
Env: []
Steps: {
    cachesetup: {
        StepType:        1
        InformationOnly: true
        Name:            "cachesetup"
        Order:           0
        Terminal:        "term1"
        Stmts: [{
            CmdStr:   "sudo mkdir -p /var/gocache /var/gomodcache"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "sudo chown gopher:gopher /var/gocache /var/gomodcache"
            ExitCode: 0
            Output:   ""
        }]
    }
    versions: {
        StepType: 1
        Name:     "versions"
        Order:    1
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go version"
            ExitCode: 0
            Output:   "go version go1.19.1 linux/amd64"
        }, {
            CmdStr:   "cue version"
            ExitCode: 0
            Output: """
                cue version v0.4.4-0.20220923112746-fe50dff0dce8

                       -compiler gc
                     CGO_ENABLED 1
                          GOARCH amd64
                            GOOS linux

                """
        }]
    }
    startexample: {
        StepType: 1
        Name:     "startexample"
        Order:    2
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir demo"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cd demo"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "go mod init example.com/demo"
            ExitCode: 0
            Output: """
                go: creating new go.mod: module example.com/demo

                """
        }]
    }
    create_gomod: {
        StepType: 2
        Name:     "create_gomod"
        Order:    3
        Terminal: "term1"
        Language: "mod"
        Renderer: {
            RendererType: 1
        }
        Source: """
            module example.com/demo

            go 1.19

            require (
            \t\t  github.com/kr/pretty v0.3.0
            )

            """
        Target: "/home/gopher/demo/go.mod"
    }
    create_initialmain: {
        StepType: 2
        Name:     "create_initialmain"
        Order:    4
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import (
            \t"encoding/json"
            \t"fmt"
            \t"log"
            \t"os"
            \t"path/filepath"
            )

            type Config struct {
            \tPrograms map[string]Program `json:"programs"`
            }

            type Program struct {
            \tPath         string   `json:"path"`
            \tArgs         []string `json:"args"`
            \tDescription  string   `json:"description"`
            \tRetries      int      `json:"retries"`
            \tIgnoreErrors bool     `json:"ignoreErrors"`
            \tDirectory    string   `json:"directory"`
            }

            func main() {
            \t// Use a fake "$HOME" for the purposes of this demo
            \tcfpath := filepath.Join("home", ".config", "demo", "config.json")

            \tcf, err := os.ReadFile(cfpath)
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}

            \tvar conf Config
            \tif err := json.Unmarshal(cf, &conf); err != nil {
            \t\tlog.Fatal(err)
            \t}

            \tout, err := json.MarshalIndent(conf, "", "  ")
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}
            \tfmt.Printf("%s\\n", out)
            }

            """
        Target: "/home/gopher/demo/main.go"
    }
    initialgomodtidy: {
        StepType: 1
        Name:     "initialgomodtidy"
        Order:    5
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go mod tidy"
            ExitCode: 0
            Output:   ""
        }]
    }
    create_config_dir: {
        StepType: 1
        Name:     "create_config_dir"
        Order:    6
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mkdir -p /home/gopher/demo/home/.config/demo"
            ExitCode: 0
            Output:   ""
        }]
    }
    initial_config_file: {
        StepType: 2
        Name:     "initial_config_file"
        Order:    7
        Terminal: "term1"
        Language: "json"
        Renderer: {
            RendererType: 1
        }
        Source: """
            {
            \t "programs": {
            \t\t  "service1": {
            \t\t\t\t"path": "/path/to/service1",
            \t\t\t\t"description": "service1 is a special service\\nfor special things",
            \t\t\t\t"args": [
            \t\t\t\t\t "hello",
            \t\t\t\t\t "world"
            \t\t\t\t],
            \t\t\t\t"directory": "/tmp",
            \t\t\t\t"ignoreErrors": true
            \t\t  },
            \t\t  "service2": {
            \t\t\t\t"path": "/path/to/service2",
            \t\t\t\t"description": "service2 is a special service\\nfor special things",
            \t\t\t\t"args": [
            \t\t\t\t\t "hello",
            \t\t\t\t\t "world"
            \t\t\t\t],
            \t\t\t\t"directory": "/home/cueckoo"
            \t\t  },
            \t\t  "service3": {
            \t\t\t\t"path": "/path/to/service3",
            \t\t\t\t"description": "service3 is a special service\\nfor special things",
            \t\t\t\t"directory": "/home/cueckoo"
            \t\t  }
            \t }
            }
            """
        Target: "/home/gopher/demo/home/.config/demo/config.json"
    }
    run_v_json: {
        StepType: 1
        Name:     "run_v_json"
        Order:    8
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cat go.mod"
            ExitCode: 0
            Output: """
                module example.com/demo

                go 1.19

                """
        }, {
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                {
                  "programs": {
                    "service1": {
                      "path": "/path/to/service1",
                      "args": [
                        "hello",
                        "world"
                      ],
                      "description": "service1 is a special service\\nfor special things",
                      "retries": 0,
                      "ignoreErrors": true,
                      "directory": "/tmp"
                    },
                    "service2": {
                      "path": "/path/to/service2",
                      "args": [
                        "hello",
                        "world"
                      ],
                      "description": "service2 is a special service\\nfor special things",
                      "retries": 0,
                      "ignoreErrors": false,
                      "directory": "/home/cueckoo"
                    },
                    "service3": {
                      "path": "/path/to/service3",
                      "args": null,
                      "description": "service3 is a special service\\nfor special things",
                      "retries": 0,
                      "ignoreErrors": false,
                      "directory": "/home/cueckoo"
                    }
                  }
                }

                """
        }]
    }
    import_json_cue: {
        StepType: 1
        Name:     "import_json_cue"
        Order:    9
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cue import ./home/.config/demo/config.json"
            ExitCode: 0
            Output:   ""
        }]
    }
    inspect_initial_cue: {
        StepType: 1
        Name:     "inspect_initial_cue"
        Order:    10
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cat ./home/.config/demo/config.cue"
            ExitCode: 0
            Output: #"""
                programs: {
                \#tservice1: {
                \#t\#tpath: "/path/to/service1"
                \#t\#tdescription: """
                \#t\#t\#tservice1 is a special service
                \#t\#t\#tfor special things
                \#t\#t\#t"""
                \#t\#targs: [
                \#t\#t\#t"hello",
                \#t\#t\#t"world",
                \#t\#t]
                \#t\#tdirectory:    "/tmp"
                \#t\#tignoreErrors: true
                \#t}
                \#tservice2: {
                \#t\#tpath: "/path/to/service2"
                \#t\#tdescription: """
                \#t\#t\#tservice2 is a special service
                \#t\#t\#tfor special things
                \#t\#t\#t"""
                \#t\#targs: [
                \#t\#t\#t"hello",
                \#t\#t\#t"world",
                \#t\#t]
                \#t\#tdirectory: "/home/cueckoo"
                \#t}
                \#tservice3: {
                \#t\#tpath: "/path/to/service3"
                \#t\#tdescription: """
                \#t\#t\#tservice3 is a special service
                \#t\#t\#tfor special things
                \#t\#t\#t"""
                \#t\#tdirectory: "/home/cueckoo"
                \#t}
                }

                """#
        }]
    }
    export_json: {
        StepType: 1
        Name:     "export_json"
        Order:    11
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "cue export ./home/.config/demo/config.cue"
            ExitCode: 0
            Output: """
                {
                    "programs": {
                        "service1": {
                            "path": "/path/to/service1",
                            "description": "service1 is a special service\\nfor special things",
                            "args": [
                                "hello",
                                "world"
                            ],
                            "directory": "/tmp",
                            "ignoreErrors": true
                        },
                        "service2": {
                            "path": "/path/to/service2",
                            "description": "service2 is a special service\\nfor special things",
                            "args": [
                                "hello",
                                "world"
                            ],
                            "directory": "/home/cueckoo"
                        },
                        "service3": {
                            "path": "/path/to/service3",
                            "description": "service3 is a special service\\nfor special things",
                            "directory": "/home/cueckoo"
                        }
                    }
                }

                """
        }]
    }
    export_json_diff: {
        StepType: 1
        Name:     "export_json_diff"
        Order:    12
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "mv ./home/.config/demo/config.json ./home/.config/demo/config.json.copy"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "cue export -o ./home/.config/demo/config.json ./home/.config/demo/config.cue"
            ExitCode: 0
            Output:   ""
        }, {
            CmdStr:   "diff -wu ./home/.config/demo/config.json ./home/.config/demo/config.json.copy"
            ExitCode: 0
            Output:   ""
        }]
    }
    initial_main_cueconfig: {
        StepType: 2
        Name:     "initial_main_cueconfig"
        Order:    13
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import (
            \t"encoding/json"
            \t"fmt"
            \t"log"
            \t"path/filepath"

            \t"github.com/cue-exp/cueconfig"
            )

            type Config struct {
            \tPrograms map[string]Program `json:"programs"`
            }

            type Program struct {
            \tPath         string   `json:"path"`
            \tArgs         []string `json:"args"`
            \tDescription  string   `json:"description"`
            \tRetries      int      `json:"retries"`
            \tIgnoreErrors bool     `json:"ignoreErrors"`
            \tDirectory    string   `json:"directory"`
            }

            func main() {
            \t// Use a fake "$HOME" for the purposes of this demo
            \tcfpath := filepath.Join("home", ".config", "demo", "config.cue")

            \tvar conf Config
            \tif err := cueconfig.Load(cfpath, nil, nil, nil, &conf); err != nil {
            \t\tlog.Fatal(err)
            \t}

            \tout, err := json.MarshalIndent(conf, "", "  ")
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}
            \tfmt.Printf("%s\\n", out)
            }

            """
        Target: "/home/gopher/demo/main.go"
    }
    get_cueconfig_and_tidy: {
        StepType: 1
        Name:     "get_cueconfig_and_tidy"
        Order:    14
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go get github.com/cue-exp/cueconfig@v0.0.1"
            ExitCode: 0
            Output: """
                go: downloading github.com/cue-exp/cueconfig v0.0.1
                go: downloading cuelang.org/go v0.4.3
                go: downloading github.com/cockroachdb/apd/v2 v2.0.1
                go: downloading golang.org/x/net v0.0.0-20200226121028-0de0cce0169b
                go: downloading github.com/emicklei/proto v1.6.15
                go: downloading github.com/protocolbuffers/txtpbfmt v0.0.0-20201118171849-f6a6b3f636fc
                go: downloading gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b
                go: added cuelang.org/go v0.4.3
                go: added github.com/cockroachdb/apd/v2 v2.0.1
                go: added github.com/cue-exp/cueconfig v0.0.1
                go: added github.com/emicklei/proto v1.6.15
                go: added github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b
                go: added github.com/google/uuid v1.2.0
                go: added github.com/mpvl/unique v0.0.0-20150818121801-cbe035fff7de
                go: added github.com/pkg/errors v0.8.1
                go: added github.com/protocolbuffers/txtpbfmt v0.0.0-20201118171849-f6a6b3f636fc
                go: added golang.org/x/net v0.0.0-20200226121028-0de0cce0169b
                go: added golang.org/x/text v0.3.7
                go: added gopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b

                """
        }, {
            CmdStr:   "go mod tidy"
            ExitCode: 0
            Output: """
                go: downloading github.com/rogpeppe/go-internal v1.9.0
                go: downloading github.com/google/go-cmp v0.4.0
                go: downloading github.com/stretchr/testify v1.2.2
                go: downloading github.com/kylelemons/godebug v1.1.0
                go: downloading github.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e
                go: downloading github.com/cockroachdb/apd v1.1.0
                go: downloading github.com/lib/pq v1.0.0
                go: downloading github.com/davecgh/go-spew v1.1.1
                go: downloading github.com/pmezard/go-difflib v1.0.0
                go: downloading golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543
                go: downloading github.com/kr/pretty v0.1.0
                go: downloading golang.org/x/tools v0.0.0-20200612220849-54c614fe050c
                go: downloading github.com/kr/text v0.1.0
                go: downloading gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405

                """
        }]
    }
    run_initial_cueconfig: {
        StepType: 1
        Name:     "run_initial_cueconfig"
        Order:    15
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                {
                  "programs": {
                    "service1": {
                      "path": "/path/to/service1",
                      "args": [
                        "hello",
                        "world"
                      ],
                      "description": "service1 is a special service\\nfor special things",
                      "retries": 0,
                      "ignoreErrors": true,
                      "directory": "/tmp"
                    },
                    "service2": {
                      "path": "/path/to/service2",
                      "args": [
                        "hello",
                        "world"
                      ],
                      "description": "service2 is a special service\\nfor special things",
                      "retries": 0,
                      "ignoreErrors": false,
                      "directory": "/home/cueckoo"
                    },
                    "service3": {
                      "path": "/path/to/service3",
                      "args": null,
                      "description": "service3 is a special service\\nfor special things",
                      "retries": 0,
                      "ignoreErrors": false,
                      "directory": "/home/cueckoo"
                    }
                  }
                }

                """
        }]
    }
    create_initial_schema: {
        StepType: 2
        Name:     "create_initial_schema"
        Order:    16
        Terminal: "term1"
        Language: "cue"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            programs: [string]: #Program

            #Program: {
            \tpath: string
            \targs?: [...string]
            \tdescription:   string
            \tretries?:      int
            \tignoreErrors?: bool
            \tdirectory?:    string
            }

            """
        Target: "/home/gopher/demo/schema.cue"
    }
    update_main_schema: {
        StepType: 2
        Name:     "update_main_schema"
        Order:    17
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import (
            \t_ "embed"
            \t"encoding/json"
            \t"fmt"
            \t"log"
            \t"path/filepath"

            \t"github.com/cue-exp/cueconfig"
            )

            type Config struct {
            \tPrograms map[string]Program `json:"programs"`
            }

            type Program struct {
            \tPath         string   `json:"path"`
            \tArgs         []string `json:"args"`
            \tDescription  string   `json:"description"`
            \tRetries      int      `json:"retries"`
            \tIgnoreErrors bool     `json:"ignoreErrors"`
            \tDirectory    string   `json:"directory"`
            }

            var (
            \t//go:embed schema.cue
            \tschema []byte
            )

            func main() {
            \t// Use a fake "$HOME" for the purposes of this demo
            \tcfpath := filepath.Join("home", ".config", "demo", "config.cue")

            \tvar conf Config
            \tif err := cueconfig.Load(cfpath, schema, nil, nil, &conf); err != nil {
            \t\tlog.Fatal(err)
            \t}

            \tout, err := json.MarshalIndent(conf, "", "  ")
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}
            \tfmt.Printf("%s\\n", out)
            }

            """
        Target: "/home/gopher/demo/main.go"
    }
    run_initial_schema: {
        StepType: 1
        Name:     "run_initial_schema"
        Order:    18
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                {
                  "programs": {
                    "service1": {
                      "path": "/path/to/service1",
                      "args": [
                        "hello",
                        "world"
                      ],
                      "description": "service1 is a special service\\nfor special things",
                      "retries": 0,
                      "ignoreErrors": true,
                      "directory": "/tmp"
                    },
                    "service2": {
                      "path": "/path/to/service2",
                      "args": [
                        "hello",
                        "world"
                      ],
                      "description": "service2 is a special service\\nfor special things",
                      "retries": 0,
                      "ignoreErrors": false,
                      "directory": "/home/cueckoo"
                    },
                    "service3": {
                      "path": "/path/to/service3",
                      "args": null,
                      "description": "service3 is a special service\\nfor special things",
                      "retries": 0,
                      "ignoreErrors": false,
                      "directory": "/home/cueckoo"
                    }
                  }
                }

                """
        }]
    }
    break_config_additional_field: {
        StepType: 2
        Name:     "break_config_additional_field"
        Order:    19
        Terminal: "term1"
        Language: "cue"
        Renderer: {
            RendererType: 1
        }
        Source: #"""
            programs: {
            \#tservice1: {
            \#t\#tpath: "/path/to/service1"
            \#t\#tdescription: """
            \#t\#t\#tservice1 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#targs: [
            \#t\#t\#t"hello",
            \#t\#t\#t"world",
            \#t\#t]
            \#t\#tdirectory:    "/tmp"
            \#t\#tignoreErrors: true
            \#t\#tblah:         "something"
            \#t}
            \#tservice2: {
            \#t\#tpath: "/path/to/service2"
            \#t\#tdescription: """
            \#t\#t\#tservice2 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#targs: [
            \#t\#t\#t"hello",
            \#t\#t\#t"world",
            \#t\#t]
            \#t\#tdirectory: "/home/cueckoo"
            \#t}
            \#tservice3: {
            \#t\#tpath: "/path/to/service3"
            \#t\#tdescription: """
            \#t\#t\#tservice3 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#tdirectory: "/home/cueckoo"
            \#t}
            }

            """#
        Target: "/home/gopher/demo/home/.config/demo/config.cue"
    }
    run_broken_config_additional_field: {
        StepType: 1
        Name:     "run_broken_config_additional_field"
        Order:    20
        Terminal: "term1"
        Stmts: [{
            Negated:  true
            CmdStr:   "go run ."
            ExitCode: 1
            Output: """
                main.go:37: error in configuration: programs.service1: field not allowed: blah:
                    $schema.cue:3:21
                    $schema.cue:5:11
                    /home/gopher/demo/home/.config/demo/config.cue:14:3
                exit status 1

                """
        }]
    }
    restore_config_working: {
        StepType: 2
        Name:     "restore_config_working"
        Order:    21
        Terminal: "term1"
        Language: "cue"
        Renderer: {
            RendererType: 1
        }
        Source: #"""
            programs: {
            \#tservice1: {
            \#t\#tpath: "/path/to/service1"
            \#t\#tdescription: """
            \#t\#t\#tservice1 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#targs: [
            \#t\#t\#t"hello",
            \#t\#t\#t"world",
            \#t\#t]
            \#t\#tdirectory:    "/tmp"
            \#t\#tignoreErrors: true
            \#t}
            \#tservice2: {
            \#t\#tpath: "/path/to/service2"
            \#t\#tdescription: """
            \#t\#t\#tservice2 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#targs: [
            \#t\#t\#t"hello",
            \#t\#t\#t"world",
            \#t\#t]
            \#t\#tdirectory: "/home/cueckoo"
            \#t}
            \#tservice3: {
            \#t\#tpath: "/path/to/service3"
            \#t\#tdescription: """
            \#t\#t\#tservice3 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#tdirectory: "/home/cueckoo"
            \#t}
            }

            """#
        Target: "/home/gopher/demo/home/.config/demo/config.cue"
    }
    run_check_config_working: {
        StepType: 1
        Name:     "run_check_config_working"
        Order:    22
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                {
                  "programs": {
                    "service1": {
                      "path": "/path/to/service1",
                      "args": [
                        "hello",
                        "world"
                      ],
                      "description": "service1 is a special service\\nfor special things",
                      "retries": 0,
                      "ignoreErrors": true,
                      "directory": "/tmp"
                    },
                    "service2": {
                      "path": "/path/to/service2",
                      "args": [
                        "hello",
                        "world"
                      ],
                      "description": "service2 is a special service\\nfor special things",
                      "retries": 0,
                      "ignoreErrors": false,
                      "directory": "/home/cueckoo"
                    },
                    "service3": {
                      "path": "/path/to/service3",
                      "args": null,
                      "description": "service3 is a special service\\nfor special things",
                      "retries": 0,
                      "ignoreErrors": false,
                      "directory": "/home/cueckoo"
                    }
                  }
                }

                """
        }]
    }
    modify_config_dry: {
        StepType: 2
        Name:     "modify_config_dry"
        Order:    23
        Terminal: "term1"
        Language: "cue"
        Renderer: {
            RendererType: 1
        }
        Source: #"""
            import "strings"

            programs: [_name=string]: {
            \#tdirectory:   *"/home/cueckoo" | _
            \#tpath:        *"/path/to/\#\(_name)" | _
            \#tdescription: strings.HasPrefix(_name)
            }

            programs: {
            \#tservice1: {
            \#t\#tdescription: """
            \#t\#t\#tservice1 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#targs: [
            \#t\#t\#t"hello",
            \#t\#t\#t"world",
            \#t\#t]
            \#t\#tdirectory:    "/tmp"
            \#t\#tignoreErrors: true
            \#t}
            \#tservice2: {
            \#t\#tdescription: """
            \#t\#t\#tservice2 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#targs: service1.args,
            \#t}
            \#tservice3: {
            \#t\#tdescription: """
            \#t\#t\#tservice3 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t}
            }

            """#
        Target: "/home/gopher/demo/home/.config/demo/config.cue"
    }
    run_check_config_dry: {
        StepType: 1
        Name:     "run_check_config_dry"
        Order:    24
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                {
                  "programs": {
                    "service1": {
                      "path": "/path/to/service1",
                      "args": [
                        "hello",
                        "world"
                      ],
                      "description": "service1 is a special service\\nfor special things",
                      "retries": 0,
                      "ignoreErrors": true,
                      "directory": "/tmp"
                    },
                    "service2": {
                      "path": "/path/to/service2",
                      "args": [
                        "hello",
                        "world"
                      ],
                      "description": "service2 is a special service\\nfor special things",
                      "retries": 0,
                      "ignoreErrors": false,
                      "directory": "/home/cueckoo"
                    },
                    "service3": {
                      "path": "/path/to/service3",
                      "args": null,
                      "description": "service3 is a special service\\nfor special things",
                      "retries": 0,
                      "ignoreErrors": false,
                      "directory": "/home/cueckoo"
                    }
                  }
                }

                """
        }]
    }
    create_initial_defaults: {
        StepType: 2
        Name:     "create_initial_defaults"
        Order:    25
        Terminal: "term1"
        Language: "cue"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            programs: [string]: retries: *3 | _

            """
        Target: "/home/gopher/demo/defaults.cue"
    }
    update_main_defaults: {
        StepType: 2
        Name:     "update_main_defaults"
        Order:    26
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import (
            \t_ "embed"
            \t"encoding/json"
            \t"fmt"
            \t"log"
            \t"path/filepath"

            \t"github.com/cue-exp/cueconfig"
            )

            type Config struct {
            \tPrograms map[string]Program `json:"programs"`
            }

            type Program struct {
            \tPath         string   `json:"path"`
            \tArgs         []string `json:"args"`
            \tDescription  string   `json:"description"`
            \tRetries      int      `json:"retries"`
            \tIgnoreErrors bool     `json:"ignoreErrors"`
            \tDirectory    string   `json:"directory"`
            }

            var (
            \t//go:embed schema.cue
            \tschema []byte

            \t//go:embed defaults.cue
            \tdefaults []byte
            )

            func main() {
            \t// Use a fake "$HOME" for the purposes of this demo
            \tcfpath := filepath.Join("home", ".config", "demo", "config.cue")

            \tvar conf Config
            \tif err := cueconfig.Load(cfpath, schema, defaults, nil, &conf); err != nil {
            \t\tlog.Fatal(err)
            \t}

            \tout, err := json.MarshalIndent(conf, "", "  ")
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}
            \tfmt.Printf("%s\\n", out)
            }

            """
        Target: "/home/gopher/demo/main.go"
    }
    run_check_defaults: {
        StepType: 1
        Name:     "run_check_defaults"
        Order:    27
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                {
                  "programs": {
                    "service1": {
                      "path": "/path/to/service1",
                      "args": [
                        "hello",
                        "world"
                      ],
                      "description": "service1 is a special service\\nfor special things",
                      "retries": 3,
                      "ignoreErrors": true,
                      "directory": "/tmp"
                    },
                    "service2": {
                      "path": "/path/to/service2",
                      "args": [
                        "hello",
                        "world"
                      ],
                      "description": "service2 is a special service\\nfor special things",
                      "retries": 3,
                      "ignoreErrors": false,
                      "directory": "/home/cueckoo"
                    },
                    "service3": {
                      "path": "/path/to/service3",
                      "args": null,
                      "description": "service3 is a special service\\nfor special things",
                      "retries": 3,
                      "ignoreErrors": false,
                      "directory": "/home/cueckoo"
                    }
                  }
                }

                """
        }]
    }
    update_main_runtime: {
        StepType: 2
        Name:     "update_main_runtime"
        Order:    28
        Terminal: "term1"
        Language: "go"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            import (
            \t_ "embed"
            \t"encoding/json"
            \t"fmt"
            \t"log"
            \t"path/filepath"

            \t"github.com/cue-exp/cueconfig"
            )

            type Config struct {
            \tPrograms map[string]Program `json:"programs"`
            }

            type Program struct {
            \tPath         string   `json:"path"`
            \tArgs         []string `json:"args"`
            \tDescription  string   `json:"description"`
            \tRetries      int      `json:"retries"`
            \tIgnoreErrors bool     `json:"ignoreErrors"`
            \tDirectory    string   `json:"directory"`
            }

            var (
            \t//go:embed schema.cue
            \tschema []byte

            \t//go:embed defaults.cue
            \tdefaults []byte
            )

            func main() {
            \t// Use a fake "$HOME" for the purposes of this demo
            \tcfpath := filepath.Join("home", ".config", "demo", "config.cue")

            \tr := map[string]any{
            \t\t"runtime": map[string]any{
            \t\t\t"workingDirectory": "/runtime/blah",
            \t\t},
            \t}

            \tvar conf Config
            \tif err := cueconfig.Load(cfpath, schema, defaults, r, &conf); err != nil {
            \t\tlog.Fatal(err)
            \t}

            \tout, err := json.MarshalIndent(conf, "", "  ")
            \tif err != nil {
            \t\tlog.Fatal(err)
            \t}
            \tfmt.Printf("%s\\n", out)
            }

            """
        Target: "/home/gopher/demo/main.go"
    }
    update_schema_runtime: {
        StepType: 2
        Name:     "update_schema_runtime"
        Order:    29
        Terminal: "term1"
        Language: "cue"
        Renderer: {
            RendererType: 1
        }
        Source: """
            package main

            programs: [string]: #Program

            #Program: {
            \tpath: string
            \targs?: [...string]
            \tdescription:   string
            \tretries?:      int
            \tignoreErrors?: bool
            \tdirectory?:    string
            }

            runtime: #Runtime

            #Runtime: {
            \tworkingDirectory?: string
            }

            """
        Target: "/home/gopher/demo/schema.cue"
    }
    update_config_runtime: {
        StepType: 2
        Name:     "update_config_runtime"
        Order:    30
        Terminal: "term1"
        Language: "cue"
        Renderer: {
            RendererType: 1
        }
        Source: #"""
            import "strings"

            runtime: _

            programs: [_name=string]: {
            \#tdirectory:   *runtime.workingDirectory | _
            \#tpath:        *"/path/to/\#\(_name)" | _
            \#tdescription: strings.HasPrefix(_name)
            }

            programs: {
            \#tservice1: {
            \#t\#tdescription: """
            \#t\#t\#tservice1 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#targs: [
            \#t\#t\#t"hello",
            \#t\#t\#t"world",
            \#t\#t]
            \#t\#tdirectory:    "/tmp"
            \#t\#tignoreErrors: true
            \#t}
            \#tservice2: {
            \#t\#tdescription: """
            \#t\#t\#tservice2 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t\#targs: service1.args,
            \#t}
            \#tservice3: {
            \#t\#tdescription: """
            \#t\#t\#tservice3 is a special service
            \#t\#t\#tfor special things
            \#t\#t\#t"""
            \#t}
            }

            """#
        Target: "/home/gopher/demo/home/.config/demo/config.cue"
    }
    run_check_runtime: {
        StepType: 1
        Name:     "run_check_runtime"
        Order:    31
        Terminal: "term1"
        Stmts: [{
            CmdStr:   "go run ."
            ExitCode: 0
            Output: """
                {
                  "programs": {
                    "service1": {
                      "path": "/path/to/service1",
                      "args": [
                        "hello",
                        "world"
                      ],
                      "description": "service1 is a special service\\nfor special things",
                      "retries": 3,
                      "ignoreErrors": true,
                      "directory": "/tmp"
                    },
                    "service2": {
                      "path": "/path/to/service2",
                      "args": [
                        "hello",
                        "world"
                      ],
                      "description": "service2 is a special service\\nfor special things",
                      "retries": 3,
                      "ignoreErrors": false,
                      "directory": "/runtime/blah"
                    },
                    "service3": {
                      "path": "/path/to/service3",
                      "args": null,
                      "description": "service3 is a special service\\nfor special things",
                      "retries": 3,
                      "ignoreErrors": false,
                      "directory": "/runtime/blah"
                    }
                  }
                }

                """
        }]
    }
}
Hash: "061d934d15a6d4303f898cac6fb28ce97465695997c97ec32268f61a4b068aa9"
Delims: ["{{{", "}}}"]
// ---
import "strings"

#workflows: [{
    file: "test.yml"
    schema: {
        name:          "Test"
        #architecture: "ARM32" | "x64" | "x86"
        #branch: [strings.MinRunes(1)]
        #configuration: string | number | {} | []
        #container:     string | {
            image: string
        }
        #defaults: {}
        #env: {}
        #event:       "check_run" | "check_suite" | "create" | "delete" | "deployment" | "deployment_status" | "fork" | "gollum" | "issue_comment" | "issues" | "label" | "member" | "milestone" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "status" | "watch" | "repository_dispatch"
        #eventObject: null | {}
        #globs: [strings.MinRunes(1)]
        #machine: "linux" | "macos" | "windows"
        #name:    =~"^[_a-zA-Z][a-zA-Z0-9_-]*$"
        #path: [strings.MinRunes(1)]
        #ref:   null | {}
        #shell: string | "bash" | "pwsh" | "python" | "sh" | "cmd" | "powershell"
        #types: [_]
        on: {
            push: {
                branches: ["main"]
                tags: ["v*"]
            }
            pull_request: {
                branches: ["**"]
            }
            schedule: [{
                cron: "0 9 * * *"
            }]
        }
        env: {
            DOCKER_HUB_USER:                    "playwithgopher"
            DOCKER_HUB_TOKEN:                   "${{ secrets.DOCKER_HUB_TOKEN }}"
            PLAYWITHGODEV_CONTRIBUTOR_USER:     "playwithgopher_github"
            PLAYWITHGODEV_CONTRIBUTOR_PASSWORD: "${{ secrets.PLAYWITHGODEV_CONTRIBUTOR_PASSWORD }}"
            PLAYWITHGOPHER_GITHUB_PAT:          "${{ secrets.PLAYWITHGOPHER_GITHUB_PAT }}"
        }
        jobs: {
            test: {
                strategy: {
                    "fail-fast": false
                    matrix: {
                        go_version: ["1.19.1"]
                        os: ["ubuntu-20.04"]
                    }
                }
                "runs-on": "${{ matrix.os }}"
                steps: [{
                    name: "Checkout code"
                    uses: "actions/checkout@v2"
                }, {
                    name: "Install Go"
                    uses: "actions/setup-go@v2"
                    with: {
                        "go-version": "${{ matrix.go_version }}"
                    }
                }, {
                    name: "Pre-download specific modules"
                    run:  "go mod download github.com/play-with-go/preguide github.com/play-with-go/gitea"
                }, {
                    name: "mac CI setup"
                    run:  "./_scripts/macCISetup.sh"
                    if:   "${{ matrix.os == 'macos-latest' }}"
                }, {
                    name: "Ensure docker setup"
                    run:  "./_scripts/ensureDocker.sh"
                }, {
                    name: "Env setup"
                    run:  "./_scripts/env.sh github"
                }, {
                    name: "Verify"
                    run:  "go mod verify"
                }, {
                    name: "Tidy"
                    run:  "go mod tidy"
                }, {
                    name: "Run unity tests"
                    run:  "go run github.com/cue-sh/unity/cmd/unity test"
                }, {
                    name: "docker-compose build"
                    run:  "./_scripts/dc.sh build"
                }, {
                    name: "Start gitea services"
                    run:  "./_scripts/dc.sh up -d cmd_gitea"
                }, {
                    name: "Re-generate guides"
                    run:  "_scripts/generateGuides.sh"
                    env: {
                        CGO_ENABLED:         "0"
                        PREGUIDE_SKIP_CACHE: "true"
                        PREGUIDE_PROGRESS:   "true"
                    }
                }, {
                    name: "Re-generate everything else"
                    run:  "_scripts/generateEverythingElse.sh"
                }, {
                    name: "Verify commit is clean"
                    run:  "test -z \"$(git status --porcelain)\" || (git status; git diff; false)"
                }, {
                    name: "Publish site"
                    run:  "_scripts/publishSite.sh"
                }]
            }
        }
        #: {
            "working-directory": string
        }
    }
}]
#testWorkflow: {
    #architecture: "ARM32" | "x64" | "x86"
    #branch: [strings.MinRunes(1)]
    #configuration: string | number | {} | []
    #container:     string | {
        image: string
    }
    #defaults: {}
    #env: {}
    #event:       "check_run" | "check_suite" | "create" | "delete" | "deployment" | "deployment_status" | "fork" | "gollum" | "issue_comment" | "issues" | "label" | "member" | "milestone" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "status" | "watch" | "repository_dispatch"
    #eventObject: null | {}
    #globs: [strings.MinRunes(1)]
    #machine: "linux" | "macos" | "windows"
    #name:    =~"^[_a-zA-Z][a-zA-Z0-9_-]*$"
    #path: [strings.MinRunes(1)]
    #ref:   null | {}
    #shell: string | "bash" | "pwsh" | "python" | "sh" | "cmd" | "powershell"
    #types: [_]
    on: "check_run" | "check_suite" | "create" | "delete" | "deployment" | "deployment_status" | "fork" | "gollum" | "issue_comment" | "issues" | "label" | "member" | "milestone" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "status" | "watch" | "repository_dispatch" | ["check_run" | "check_suite" | "create" | "delete" | "deployment" | "deployment_status" | "fork" | "gollum" | "issue_comment" | "issues" | "label" | "member" | "milestone" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "status" | "watch" | "repository_dispatch"] | {}
    env: {
        DOCKER_HUB_USER:                    "playwithgopher"
        DOCKER_HUB_TOKEN:                   "${{ secrets.DOCKER_HUB_TOKEN }}"
        PLAYWITHGODEV_CONTRIBUTOR_USER:     "playwithgopher_github"
        PLAYWITHGODEV_CONTRIBUTOR_PASSWORD: "${{ secrets.PLAYWITHGODEV_CONTRIBUTOR_PASSWORD }}"
        PLAYWITHGOPHER_GITHUB_PAT:          "${{ secrets.PLAYWITHGOPHER_GITHUB_PAT }}"
    }
    #: {
        "working-directory": string
    }
    jobs: {
        test: {
            strategy: {
                "fail-fast": false
                matrix: {
                    go_version: ["1.19.1"]
                }
            }
            "runs-on": "${{ matrix.os }}"
            steps: [{
                name: "Checkout code"
                uses: "actions/checkout@v2"
            }, {
                name: "Install Go"
                uses: "actions/setup-go@v2"
                with: {
                    "go-version": "${{ matrix.go_version }}"
                }
            }, {
                name: "Pre-download specific modules"
                run:  "go mod download github.com/play-with-go/preguide github.com/play-with-go/gitea"
            }, {
                name: "mac CI setup"
                run:  "./_scripts/macCISetup.sh"
                if:   "${{ matrix.os == 'macos-latest' }}"
            }, {
                name: "Ensure docker setup"
                run:  "./_scripts/ensureDocker.sh"
            }, {
                name: "Env setup"
                run:  "./_scripts/env.sh github"
            }, {
                name: "Verify"
                run:  "go mod verify"
            }, {
                name: "Tidy"
                run:  "go mod tidy"
            }, {
                name: "Run unity tests"
                run:  "go run github.com/cue-sh/unity/cmd/unity test"
            }, {
                name: "docker-compose build"
                run:  "./_scripts/dc.sh build"
            }, {
                name: "Start gitea services"
                run:  "./_scripts/dc.sh up -d cmd_gitea"
            }, {
                name: "Re-generate guides"
                run:  "_scripts/generateGuides.sh"
                env: {
                    CGO_ENABLED:         "0"
                    PREGUIDE_SKIP_CACHE: "true"
                    PREGUIDE_PROGRESS:   "true"
                }
            }, {
                name: "Re-generate everything else"
                run:  "_scripts/generateEverythingElse.sh"
            }, {
                name: "Verify commit is clean"
                run:  "test -z \"$(git status --porcelain)\" || (git status; git diff; false)"
            }, {
                name: "Publish site"
                run:  "_scripts/publishSite.sh"
            }]
        }
    }
}
test: {
    name:          "Test"
    #architecture: "ARM32" | "x64" | "x86"
    #branch: [strings.MinRunes(1)]
    #configuration: string | number | {} | []
    #container:     string | {
        image: string
    }
    #defaults: {}
    #env: {}
    #event:       "check_run" | "check_suite" | "create" | "delete" | "deployment" | "deployment_status" | "fork" | "gollum" | "issue_comment" | "issues" | "label" | "member" | "milestone" | "page_build" | "project" | "project_card" | "project_column" | "public" | "pull_request" | "pull_request_review" | "pull_request_review_comment" | "push" | "registry_package" | "release" | "status" | "watch" | "repository_dispatch"
    #eventObject: null | {}
    #globs: [strings.MinRunes(1)]
    #machine: "linux" | "macos" | "windows"
    #name:    =~"^[_a-zA-Z][a-zA-Z0-9_-]*$"
    #path: [strings.MinRunes(1)]
    #ref:   null | {}
    #shell: string | "bash" | "pwsh" | "python" | "sh" | "cmd" | "powershell"
    #types: [_]
    on: {
        push: {
            branches: ["main"]
            tags: ["v*"]
        }
        pull_request: {
            branches: ["**"]
        }
        schedule: [{
            cron: "0 9 * * *"
        }]
    }
    env: {
        DOCKER_HUB_USER:                    "playwithgopher"
        DOCKER_HUB_TOKEN:                   "${{ secrets.DOCKER_HUB_TOKEN }}"
        PLAYWITHGODEV_CONTRIBUTOR_USER:     "playwithgopher_github"
        PLAYWITHGODEV_CONTRIBUTOR_PASSWORD: "${{ secrets.PLAYWITHGODEV_CONTRIBUTOR_PASSWORD }}"
        PLAYWITHGOPHER_GITHUB_PAT:          "${{ secrets.PLAYWITHGOPHER_GITHUB_PAT }}"
    }
    jobs: {
        test: {
            strategy: {
                "fail-fast": false
                matrix: {
                    go_version: ["1.19.1"]
                    os: ["ubuntu-20.04"]
                }
            }
            "runs-on": "${{ matrix.os }}"
            steps: [{
                name: "Checkout code"
                uses: "actions/checkout@v2"
            }, {
                name: "Install Go"
                uses: "actions/setup-go@v2"
                with: {
                    "go-version": "${{ matrix.go_version }}"
                }
            }, {
                name: "Pre-download specific modules"
                run:  "go mod download github.com/play-with-go/preguide github.com/play-with-go/gitea"
            }, {
                name: "mac CI setup"
                run:  "./_scripts/macCISetup.sh"
                if:   "${{ matrix.os == 'macos-latest' }}"
            }, {
                name: "Ensure docker setup"
                run:  "./_scripts/ensureDocker.sh"
            }, {
                name: "Env setup"
                run:  "./_scripts/env.sh github"
            }, {
                name: "Verify"
                run:  "go mod verify"
            }, {
                name: "Tidy"
                run:  "go mod tidy"
            }, {
                name: "Run unity tests"
                run:  "go run github.com/cue-sh/unity/cmd/unity test"
            }, {
                name: "docker-compose build"
                run:  "./_scripts/dc.sh build"
            }, {
                name: "Start gitea services"
                run:  "./_scripts/dc.sh up -d cmd_gitea"
            }, {
                name: "Re-generate guides"
                run:  "_scripts/generateGuides.sh"
                env: {
                    CGO_ENABLED:         "0"
                    PREGUIDE_SKIP_CACHE: "true"
                    PREGUIDE_PROGRESS:   "true"
                }
            }, {
                name: "Re-generate everything else"
                run:  "_scripts/generateEverythingElse.sh"
            }, {
                name: "Verify commit is clean"
                run:  "test -z \"$(git status --porcelain)\" || (git status; git diff; false)"
            }, {
                name: "Publish site"
                run:  "_scripts/publishSite.sh"
            }]
        }
    }
    #: {
        "working-directory": string
    }
}
